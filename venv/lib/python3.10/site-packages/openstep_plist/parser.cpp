/* Generated by Cython 0.29.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "CYTHON_TRACE_NOGIL",
                "1"
            ]
        ],
        "depends": [],
        "extra_compile_args": [
            "-std=c++11"
        ],
        "language": "c++",
        "name": "openstep_plist.parser",
        "sources": [
            "src/openstep_plist/parser.pyx"
        ]
    },
    "module_name": "openstep_plist.parser"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_24"
#define CYTHON_HEX_VERSION 0x001D18F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__openstep_plist__parser
#define __PYX_HAVE_API__openstep_plist__parser
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <iterator>
#include <ctype.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/openstep_plist/parser.pyx",
  "src/openstep_plist/parser.pxd",
  "type.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_14openstep_plist_6parser_ParseError;
struct __pyx_opt_args_14openstep_plist_4util_tounicode;
struct __pyx_opt_args_14openstep_plist_4util_tostr;

/* "util.pxd":12
 * 
 * 
 * cdef unicode tounicode(s, encoding=*, errors=*)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_14openstep_plist_4util_tounicode {
  int __pyx_n;
  PyObject *encoding;
  PyObject *errors;
};

/* "util.pxd":15
 * 
 * 
 * cdef tostr(s, encoding=*, errors=*)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_14openstep_plist_4util_tostr {
  int __pyx_n;
  PyObject *encoding;
  PyObject *errors;
};
struct __pyx_t_14openstep_plist_6parser_ParseInfo;
typedef struct __pyx_t_14openstep_plist_6parser_ParseInfo __pyx_t_14openstep_plist_6parser_ParseInfo;
struct __pyx_opt_args_14openstep_plist_6parser_parse_unquoted_plist_string;
struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_string;
struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_object;

/* "openstep_plist/parser.pxd":31
 * 
 * 
 * cdef enum UnquotedType:             # <<<<<<<<<<<<<<
 *     UNQUOTED_STRING = 0
 *     UNQUOTED_INTEGER = 1
 */
enum __pyx_t_14openstep_plist_6parser_UnquotedType {
  __pyx_e_14openstep_plist_6parser_UNQUOTED_STRING = 0,
  __pyx_e_14openstep_plist_6parser_UNQUOTED_INTEGER = 1,
  __pyx_e_14openstep_plist_6parser_UNQUOTED_FLOAT = 2
};

/* "openstep_plist/parser.pxd":7
 * 
 * 
 * ctypedef struct ParseInfo:             # <<<<<<<<<<<<<<
 *     const Py_UNICODE *begin
 *     const Py_UNICODE *curr
 */
struct __pyx_t_14openstep_plist_6parser_ParseInfo {
  Py_UNICODE const *begin;
  Py_UNICODE const *curr;
  Py_UNICODE const *end;
  void *dict_type;
  int use_numbers;
};

/* "openstep_plist/parser.pxd":40
 * 
 * 
 * cdef object parse_unquoted_plist_string(ParseInfo *pi, bint ensure_string=*)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_14openstep_plist_6parser_parse_unquoted_plist_string {
  int __pyx_n;
  int ensure_string;
};

/* "openstep_plist/parser.pxd":43
 * 
 * 
 * cdef unicode parse_plist_string(ParseInfo *pi, bint required=*)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_string {
  int __pyx_n;
  int required;
};

/* "openstep_plist/parser.pxd":64
 * 
 * 
 * cdef object parse_plist_object(ParseInfo *pi, bint required=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_object {
  int __pyx_n;
  int required;
};

/* "openstep_plist/parser.pxd":15
 * 
 * 
 * cdef class ParseError(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_14openstep_plist_6parser_ParseError {
  PyBaseExceptionObject __pyx_base;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.algorithm' */

/* Module declarations from 'libcpp.iterator' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cython' */

/* Module declarations from 'openstep_plist.util' */
static int *__pyx_vp_14openstep_plist_4util_PY_NARROW_UNICODE = 0;
#define __pyx_v_14openstep_plist_4util_PY_NARROW_UNICODE (*__pyx_vp_14openstep_plist_4util_PY_NARROW_UNICODE)
static PyObject *(*__pyx_f_14openstep_plist_4util_tounicode)(PyObject *, struct __pyx_opt_args_14openstep_plist_4util_tounicode *__pyx_optional_args); /*proto*/
static PyObject *(*__pyx_f_14openstep_plist_4util_tostr)(PyObject *, struct __pyx_opt_args_14openstep_plist_4util_tostr *__pyx_optional_args); /*proto*/
static int (*__pyx_f_14openstep_plist_4util_is_valid_unquoted_string_char)(Py_UNICODE); /*proto*/
static int (*__pyx_f_14openstep_plist_4util_is_high_surrogate)(uint32_t); /*proto*/
static int (*__pyx_f_14openstep_plist_4util_is_low_surrogate)(uint32_t); /*proto*/
static uint32_t (*__pyx_f_14openstep_plist_4util_unicode_scalar_from_surrogates)(uint16_t, uint16_t); /*proto*/

/* Module declarations from 'openstep_plist.parser' */
static PyTypeObject *__pyx_ptype_14openstep_plist_6parser_ParseError = 0;
static unsigned short *__pyx_v_14openstep_plist_6parser_NEXT_STEP_DECODING_TABLE;
static uint32_t __pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_t_14openstep_plist_6parser_ParseInfo *); /*proto*/
static int __pyx_f_14openstep_plist_6parser_advance_to_non_space(__pyx_t_14openstep_plist_6parser_ParseInfo *); /*proto*/
static Py_UNICODE __pyx_f_14openstep_plist_6parser_get_slashed_char(__pyx_t_14openstep_plist_6parser_ParseInfo *); /*proto*/
static PyObject *__pyx_f_14openstep_plist_6parser_parse_quoted_plist_string(__pyx_t_14openstep_plist_6parser_ParseInfo *, Py_UNICODE); /*proto*/
static enum __pyx_t_14openstep_plist_6parser_UnquotedType __pyx_f_14openstep_plist_6parser_get_unquoted_string_type(Py_UNICODE const *, Py_ssize_t); /*proto*/
static PyObject *__pyx_f_14openstep_plist_6parser_parse_unquoted_plist_string(__pyx_t_14openstep_plist_6parser_ParseInfo *, struct __pyx_opt_args_14openstep_plist_6parser_parse_unquoted_plist_string *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_string(__pyx_t_14openstep_plist_6parser_ParseInfo *, struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_string *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_array(__pyx_t_14openstep_plist_6parser_ParseInfo *); /*proto*/
static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_dict_content(__pyx_t_14openstep_plist_6parser_ParseInfo *); /*proto*/
static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_dict(__pyx_t_14openstep_plist_6parser_ParseInfo *); /*proto*/
static CYTHON_INLINE unsigned char __pyx_f_14openstep_plist_6parser_from_hex_digit(unsigned char); /*proto*/
static int __pyx_f_14openstep_plist_6parser_get_data_bytes(__pyx_t_14openstep_plist_6parser_ParseInfo *, std::vector<unsigned char>  &); /*proto*/
static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_data(__pyx_t_14openstep_plist_6parser_ParseInfo *); /*proto*/
static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_object(__pyx_t_14openstep_plist_6parser_ParseInfo *, struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_object *__pyx_optional_args); /*proto*/
#define __Pyx_MODULE_NAME "openstep_plist.parser"
extern int __pyx_module_is_main_openstep_plist__parser;
int __pyx_module_is_main_openstep_plist__parser = 0;

/* Implementation of 'openstep_plist.parser' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_s[] = "s";
static const char __pyx_k__3[] = ": ";
static const char __pyx_k_fp[] = "fp";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_buf[] = "buf";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_curr[] = "curr";
static const char __pyx_k_kind[] = "kind";
static const char __pyx_k_load[] = "load";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_begin[] = "begin";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_string[] = "string";
static const char __pyx_k_required[] = "required";
static const char __pyx_k_dict_type[] = "dict_type";
static const char __pyx_k_ParseError[] = "ParseError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_use_numbers[] = "use_numbers";
static const char __pyx_k_Unexpected_EOF[] = "Unexpected EOF";
static const char __pyx_k_string_to_number[] = "string_to_number";
static const char __pyx_k_Missing_on_line_d[] = "Missing ';' on line %d";
static const char __pyx_k_invalid_hex_digit[] = ": invalid hex digit: ";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_openstep_plist_parser[] = "openstep_plist.parser";
static const char __pyx_k_Junk_after_plist_at_line_d[] = "Junk after plist at line %d";
static const char __pyx_k_Missing_for_array_at_line_d[] = "Missing ',' for array at line %d";
static const char __pyx_k_Unexpected_character_at_line[] = "Unexpected character at line ";
static const char __pyx_k_src_openstep_plist_parser_pyx[] = "src/openstep_plist/parser.pyx";
static const char __pyx_k_Could_not_convert_string_to_floa[] = "Could not convert string to float or int: ";
static const char __pyx_k_Expected_terminating_for_array_a[] = "Expected terminating ')' for array at line %d";
static const char __pyx_k_Expected_terminating_for_data_at[] = "Expected terminating '>' for data at line %d";
static const char __pyx_k_Expected_terminating_for_diction[] = "Expected terminating '}' for dictionary at line %d";
static const char __pyx_k_Invalid_string_character_at_line[] = "Invalid string character at line ";
static const char __pyx_k_Malformed_data_byte_group_at_lin[] = "Malformed data byte group at line %d: uneven length";
static const char __pyx_k_Unexpected_EOF_while_parsing_pli[] = "Unexpected EOF while parsing plist";
static const char __pyx_k_Unexpected_EOF_while_parsing_str[] = "Unexpected EOF while parsing string";
static const char __pyx_k_Unexpected_character_after_key_a[] = "Unexpected character after key at line ";
static const char __pyx_k_Unterminated_quoted_string_start[] = "Unterminated quoted string starting on line %d";
static const char __pyx_k_Malformed_data_byte_group_at_lin_2[] = "Malformed data byte group at line ";
static PyObject *__pyx_kp_u_Could_not_convert_string_to_floa;
static PyObject *__pyx_kp_u_Expected_terminating_for_array_a;
static PyObject *__pyx_kp_u_Expected_terminating_for_data_at;
static PyObject *__pyx_kp_u_Expected_terminating_for_diction;
static PyObject *__pyx_kp_u_Invalid_string_character_at_line;
static PyObject *__pyx_kp_u_Junk_after_plist_at_line_d;
static PyObject *__pyx_kp_u_Malformed_data_byte_group_at_lin;
static PyObject *__pyx_kp_u_Malformed_data_byte_group_at_lin_2;
static PyObject *__pyx_kp_u_Missing_for_array_at_line_d;
static PyObject *__pyx_kp_u_Missing_on_line_d;
static PyObject *__pyx_n_s_ParseError;
static PyObject *__pyx_kp_u_Unexpected_EOF;
static PyObject *__pyx_kp_u_Unexpected_EOF_while_parsing_pli;
static PyObject *__pyx_kp_u_Unexpected_EOF_while_parsing_str;
static PyObject *__pyx_kp_u_Unexpected_character_after_key_a;
static PyObject *__pyx_kp_u_Unexpected_character_at_line;
static PyObject *__pyx_kp_u_Unterminated_quoted_string_start;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_n_s_begin;
static PyObject *__pyx_n_s_buf;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_curr;
static PyObject *__pyx_n_u_d;
static PyObject *__pyx_n_s_dict_type;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_fp;
static PyObject *__pyx_kp_u_invalid_hex_digit;
static PyObject *__pyx_n_s_kind;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_n_s_loads;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_openstep_plist_parser;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_required;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_s_src_openstep_plist_parser_pyx;
static PyObject *__pyx_n_s_string;
static PyObject *__pyx_n_s_string_to_number;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_use_numbers;
static PyObject *__pyx_pf_14openstep_plist_6parser_string_to_number(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s, int __pyx_v_required); /* proto */
static PyObject *__pyx_pf_14openstep_plist_6parser_2loads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_string, PyObject *__pyx_v_dict_type, int __pyx_v_use_numbers); /* proto */
static PyObject *__pyx_pf_14openstep_plist_6parser_4load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fp, PyObject *__pyx_v_dict_type, PyObject *__pyx_v_use_numbers); /* proto */
static PyObject *__pyx_tp_new_14openstep_plist_6parser_ParseError(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_k__5;
static PyObject *__pyx_k__6;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
/* Late includes */

/* "openstep_plist/parser.pyx":28
 * 
 * 
 * cdef uint32_t line_number_strings(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     # warning: doesn't have a good idea of Unicode line separators
 *     cdef const Py_UNICODE *p = pi.begin
 */

static uint32_t __pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi) {
  Py_UNICODE const *__pyx_v_p;
  uint32_t __pyx_v_count;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_UNICODE const *__pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("line_number_strings", 0);

  /* "openstep_plist/parser.pyx":30
 * cdef uint32_t line_number_strings(ParseInfo *pi):
 *     # warning: doesn't have a good idea of Unicode line separators
 *     cdef const Py_UNICODE *p = pi.begin             # <<<<<<<<<<<<<<
 *     cdef uint32_t count = 1
 *     while p < pi.curr:
 */
  __pyx_t_1 = __pyx_v_pi->begin;
  __pyx_v_p = __pyx_t_1;

  /* "openstep_plist/parser.pyx":31
 *     # warning: doesn't have a good idea of Unicode line separators
 *     cdef const Py_UNICODE *p = pi.begin
 *     cdef uint32_t count = 1             # <<<<<<<<<<<<<<
 *     while p < pi.curr:
 *         if p[0] == c'\r':
 */
  __pyx_v_count = 1;

  /* "openstep_plist/parser.pyx":32
 *     cdef const Py_UNICODE *p = pi.begin
 *     cdef uint32_t count = 1
 *     while p < pi.curr:             # <<<<<<<<<<<<<<
 *         if p[0] == c'\r':
 *             count += 1
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_p < __pyx_v_pi->curr) != 0);
    if (!__pyx_t_2) break;

    /* "openstep_plist/parser.pyx":33
 *     cdef uint32_t count = 1
 *     while p < pi.curr:
 *         if p[0] == c'\r':             # <<<<<<<<<<<<<<
 *             count += 1
 *             if (p + 1)[0] == c'\n':
 */
    __pyx_t_2 = (((__pyx_v_p[0]) == '\r') != 0);
    if (__pyx_t_2) {

      /* "openstep_plist/parser.pyx":34
 *     while p < pi.curr:
 *         if p[0] == c'\r':
 *             count += 1             # <<<<<<<<<<<<<<
 *             if (p + 1)[0] == c'\n':
 *                 p += 1
 */
      __pyx_v_count = (__pyx_v_count + 1);

      /* "openstep_plist/parser.pyx":35
 *         if p[0] == c'\r':
 *             count += 1
 *             if (p + 1)[0] == c'\n':             # <<<<<<<<<<<<<<
 *                 p += 1
 *         elif p[0] == c'\n':
 */
      __pyx_t_2 = ((((__pyx_v_p + 1)[0]) == '\n') != 0);
      if (__pyx_t_2) {

        /* "openstep_plist/parser.pyx":36
 *             count += 1
 *             if (p + 1)[0] == c'\n':
 *                 p += 1             # <<<<<<<<<<<<<<
 *         elif p[0] == c'\n':
 *             count += 1
 */
        __pyx_v_p = (__pyx_v_p + 1);

        /* "openstep_plist/parser.pyx":35
 *         if p[0] == c'\r':
 *             count += 1
 *             if (p + 1)[0] == c'\n':             # <<<<<<<<<<<<<<
 *                 p += 1
 *         elif p[0] == c'\n':
 */
      }

      /* "openstep_plist/parser.pyx":33
 *     cdef uint32_t count = 1
 *     while p < pi.curr:
 *         if p[0] == c'\r':             # <<<<<<<<<<<<<<
 *             count += 1
 *             if (p + 1)[0] == c'\n':
 */
      goto __pyx_L5;
    }

    /* "openstep_plist/parser.pyx":37
 *             if (p + 1)[0] == c'\n':
 *                 p += 1
 *         elif p[0] == c'\n':             # <<<<<<<<<<<<<<
 *             count += 1
 *         p += 1
 */
    __pyx_t_2 = (((__pyx_v_p[0]) == '\n') != 0);
    if (__pyx_t_2) {

      /* "openstep_plist/parser.pyx":38
 *                 p += 1
 *         elif p[0] == c'\n':
 *             count += 1             # <<<<<<<<<<<<<<
 *         p += 1
 *     return count
 */
      __pyx_v_count = (__pyx_v_count + 1);

      /* "openstep_plist/parser.pyx":37
 *             if (p + 1)[0] == c'\n':
 *                 p += 1
 *         elif p[0] == c'\n':             # <<<<<<<<<<<<<<
 *             count += 1
 *         p += 1
 */
    }
    __pyx_L5:;

    /* "openstep_plist/parser.pyx":39
 *         elif p[0] == c'\n':
 *             count += 1
 *         p += 1             # <<<<<<<<<<<<<<
 *     return count
 * 
 */
    __pyx_v_p = (__pyx_v_p + 1);
  }

  /* "openstep_plist/parser.pyx":40
 *             count += 1
 *         p += 1
 *     return count             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_count;
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":28
 * 
 * 
 * cdef uint32_t line_number_strings(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     # warning: doesn't have a good idea of Unicode line separators
 *     cdef const Py_UNICODE *p = pi.begin
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":43
 * 
 * 
 * cdef bint advance_to_non_space(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     """Returns true if the advance found something that's not whitespace
 *     before the end of the buffer, false otherwise.
 */

static int __pyx_f_14openstep_plist_6parser_advance_to_non_space(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi) {
  Py_UNICODE __pyx_v_ch2;
  Py_UNICODE __pyx_v_ch3;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("advance_to_non_space", 0);

  /* "openstep_plist/parser.pyx":48
 *     """
 *     cdef Py_UNICODE ch2, ch3
 *     while pi.curr < pi.end:             # <<<<<<<<<<<<<<
 *         ch2 = pi.curr[0]
 *         pi.curr += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_pi->curr < __pyx_v_pi->end) != 0);
    if (!__pyx_t_1) break;

    /* "openstep_plist/parser.pyx":49
 *     cdef Py_UNICODE ch2, ch3
 *     while pi.curr < pi.end:
 *         ch2 = pi.curr[0]             # <<<<<<<<<<<<<<
 *         pi.curr += 1
 *         if ch2 >= 9 and ch2 <= 0x0d:
 */
    __pyx_v_ch2 = (__pyx_v_pi->curr[0]);

    /* "openstep_plist/parser.pyx":50
 *     while pi.curr < pi.end:
 *         ch2 = pi.curr[0]
 *         pi.curr += 1             # <<<<<<<<<<<<<<
 *         if ch2 >= 9 and ch2 <= 0x0d:
 *             # tab, newline, vt, form feed, carriage return
 */
    __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

    /* "openstep_plist/parser.pyx":51
 *         ch2 = pi.curr[0]
 *         pi.curr += 1
 *         if ch2 >= 9 and ch2 <= 0x0d:             # <<<<<<<<<<<<<<
 *             # tab, newline, vt, form feed, carriage return
 *             continue
 */
    __pyx_t_2 = ((__pyx_v_ch2 >= 9) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_ch2 <= 0x0d) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "openstep_plist/parser.pyx":53
 *         if ch2 >= 9 and ch2 <= 0x0d:
 *             # tab, newline, vt, form feed, carriage return
 *             continue             # <<<<<<<<<<<<<<
 *         elif ch2 == c' ' or ch2 == 0x2028 or ch2 == 0x2029:
 *             continue
 */
      goto __pyx_L3_continue;

      /* "openstep_plist/parser.pyx":51
 *         ch2 = pi.curr[0]
 *         pi.curr += 1
 *         if ch2 >= 9 and ch2 <= 0x0d:             # <<<<<<<<<<<<<<
 *             # tab, newline, vt, form feed, carriage return
 *             continue
 */
    }

    /* "openstep_plist/parser.pyx":54
 *             # tab, newline, vt, form feed, carriage return
 *             continue
 *         elif ch2 == c' ' or ch2 == 0x2028 or ch2 == 0x2029:             # <<<<<<<<<<<<<<
 *             continue
 *         elif ch2 == c'/':
 */
    switch (__pyx_v_ch2) {
      case ' ':
      case 0x2028:
      case 0x2029:
      __pyx_t_1 = 1;
      break;
      default:
      __pyx_t_1 = 0;
      break;
    }
    if (__pyx_t_1) {

      /* "openstep_plist/parser.pyx":55
 *             continue
 *         elif ch2 == c' ' or ch2 == 0x2028 or ch2 == 0x2029:
 *             continue             # <<<<<<<<<<<<<<
 *         elif ch2 == c'/':
 *             if pi.curr >= pi.end:
 */
      goto __pyx_L3_continue;

      /* "openstep_plist/parser.pyx":54
 *             # tab, newline, vt, form feed, carriage return
 *             continue
 *         elif ch2 == c' ' or ch2 == 0x2028 or ch2 == 0x2029:             # <<<<<<<<<<<<<<
 *             continue
 *         elif ch2 == c'/':
 */
    }

    /* "openstep_plist/parser.pyx":56
 *         elif ch2 == c' ' or ch2 == 0x2028 or ch2 == 0x2029:
 *             continue
 *         elif ch2 == c'/':             # <<<<<<<<<<<<<<
 *             if pi.curr >= pi.end:
 *                 # whoops; back up and return
 */
    __pyx_t_1 = ((__pyx_v_ch2 == '/') != 0);
    if (__pyx_t_1) {

      /* "openstep_plist/parser.pyx":57
 *             continue
 *         elif ch2 == c'/':
 *             if pi.curr >= pi.end:             # <<<<<<<<<<<<<<
 *                 # whoops; back up and return
 *                 pi.curr -= 1
 */
      __pyx_t_1 = ((__pyx_v_pi->curr >= __pyx_v_pi->end) != 0);
      if (__pyx_t_1) {

        /* "openstep_plist/parser.pyx":59
 *             if pi.curr >= pi.end:
 *                 # whoops; back up and return
 *                 pi.curr -= 1             # <<<<<<<<<<<<<<
 *                 return True
 *             elif pi.curr[0] == c'/':
 */
        __pyx_v_pi->curr = (__pyx_v_pi->curr - 1);

        /* "openstep_plist/parser.pyx":60
 *                 # whoops; back up and return
 *                 pi.curr -= 1
 *                 return True             # <<<<<<<<<<<<<<
 *             elif pi.curr[0] == c'/':
 *                 pi.curr += 1
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "openstep_plist/parser.pyx":57
 *             continue
 *         elif ch2 == c'/':
 *             if pi.curr >= pi.end:             # <<<<<<<<<<<<<<
 *                 # whoops; back up and return
 *                 pi.curr -= 1
 */
      }

      /* "openstep_plist/parser.pyx":61
 *                 pi.curr -= 1
 *                 return True
 *             elif pi.curr[0] == c'/':             # <<<<<<<<<<<<<<
 *                 pi.curr += 1
 *                 while pi.curr < pi.end:
 */
      __pyx_t_1 = (((__pyx_v_pi->curr[0]) == '/') != 0);
      if (__pyx_t_1) {

        /* "openstep_plist/parser.pyx":62
 *                 return True
 *             elif pi.curr[0] == c'/':
 *                 pi.curr += 1             # <<<<<<<<<<<<<<
 *                 while pi.curr < pi.end:
 *                     # go to end of // comment line
 */
        __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

        /* "openstep_plist/parser.pyx":63
 *             elif pi.curr[0] == c'/':
 *                 pi.curr += 1
 *                 while pi.curr < pi.end:             # <<<<<<<<<<<<<<
 *                     # go to end of // comment line
 *                     ch3 = pi.curr[0]
 */
        while (1) {
          __pyx_t_1 = ((__pyx_v_pi->curr < __pyx_v_pi->end) != 0);
          if (!__pyx_t_1) break;

          /* "openstep_plist/parser.pyx":65
 *                 while pi.curr < pi.end:
 *                     # go to end of // comment line
 *                     ch3 = pi.curr[0]             # <<<<<<<<<<<<<<
 *                     if ch3 == c'\n' or ch3 == c'\r' or ch3 == 0x2028 or ch3 == 0x2029:
 *                         break
 */
          __pyx_v_ch3 = (__pyx_v_pi->curr[0]);

          /* "openstep_plist/parser.pyx":66
 *                     # go to end of // comment line
 *                     ch3 = pi.curr[0]
 *                     if ch3 == c'\n' or ch3 == c'\r' or ch3 == 0x2028 or ch3 == 0x2029:             # <<<<<<<<<<<<<<
 *                         break
 *                     pi.curr += 1
 */
          switch (__pyx_v_ch3) {
            case '\n':
            case '\r':
            case 0x2028:
            case 0x2029:

            /* "openstep_plist/parser.pyx":67
 *                     ch3 = pi.curr[0]
 *                     if ch3 == c'\n' or ch3 == c'\r' or ch3 == 0x2028 or ch3 == 0x2029:
 *                         break             # <<<<<<<<<<<<<<
 *                     pi.curr += 1
 *             elif pi.curr[0] == c'*':
 */
            goto __pyx_L10_break;

            /* "openstep_plist/parser.pyx":66
 *                     # go to end of // comment line
 *                     ch3 = pi.curr[0]
 *                     if ch3 == c'\n' or ch3 == c'\r' or ch3 == 0x2028 or ch3 == 0x2029:             # <<<<<<<<<<<<<<
 *                         break
 *                     pi.curr += 1
 */
            break;
            default: break;
          }

          /* "openstep_plist/parser.pyx":68
 *                     if ch3 == c'\n' or ch3 == c'\r' or ch3 == 0x2028 or ch3 == 0x2029:
 *                         break
 *                     pi.curr += 1             # <<<<<<<<<<<<<<
 *             elif pi.curr[0] == c'*':
 *                 # handle C-style comments /[inserted by cython to avoid comment start]* ... *[inserted by cython to avoid comment closer]/
 */
          __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);
        }
        __pyx_L10_break:;

        /* "openstep_plist/parser.pyx":61
 *                 pi.curr -= 1
 *                 return True
 *             elif pi.curr[0] == c'/':             # <<<<<<<<<<<<<<
 *                 pi.curr += 1
 *                 while pi.curr < pi.end:
 */
        goto __pyx_L8;
      }

      /* "openstep_plist/parser.pyx":69
 *                         break
 *                     pi.curr += 1
 *             elif pi.curr[0] == c'*':             # <<<<<<<<<<<<<<
 *                 # handle C-style comments /[inserted by cython to avoid comment start]* ... *[inserted by cython to avoid comment closer]/
 *                 pi.curr += 1
 */
      __pyx_t_1 = (((__pyx_v_pi->curr[0]) == '*') != 0);
      if (__pyx_t_1) {

        /* "openstep_plist/parser.pyx":71
 *             elif pi.curr[0] == c'*':
 *                 # handle C-style comments /[inserted by cython to avoid comment start]* ... *[inserted by cython to avoid comment closer]/
 *                 pi.curr += 1             # <<<<<<<<<<<<<<
 *                 while pi.curr < pi.end:
 *                     ch2 = pi.curr[0]
 */
        __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

        /* "openstep_plist/parser.pyx":72
 *                 # handle C-style comments /[inserted by cython to avoid comment start]* ... *[inserted by cython to avoid comment closer]/
 *                 pi.curr += 1
 *                 while pi.curr < pi.end:             # <<<<<<<<<<<<<<
 *                     ch2 = pi.curr[0]
 *                     pi.curr += 1
 */
        while (1) {
          __pyx_t_1 = ((__pyx_v_pi->curr < __pyx_v_pi->end) != 0);
          if (!__pyx_t_1) break;

          /* "openstep_plist/parser.pyx":73
 *                 pi.curr += 1
 *                 while pi.curr < pi.end:
 *                     ch2 = pi.curr[0]             # <<<<<<<<<<<<<<
 *                     pi.curr += 1
 *                     if ch2 == c'*' and pi.curr < pi.end and pi.curr[0] == c'/':
 */
          __pyx_v_ch2 = (__pyx_v_pi->curr[0]);

          /* "openstep_plist/parser.pyx":74
 *                 while pi.curr < pi.end:
 *                     ch2 = pi.curr[0]
 *                     pi.curr += 1             # <<<<<<<<<<<<<<
 *                     if ch2 == c'*' and pi.curr < pi.end and pi.curr[0] == c'/':
 *                         pi.curr += 1  # advance past the '/'
 */
          __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

          /* "openstep_plist/parser.pyx":75
 *                     ch2 = pi.curr[0]
 *                     pi.curr += 1
 *                     if ch2 == c'*' and pi.curr < pi.end and pi.curr[0] == c'/':             # <<<<<<<<<<<<<<
 *                         pi.curr += 1  # advance past the '/'
 *                         break
 */
          __pyx_t_2 = ((__pyx_v_ch2 == '*') != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L14_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_pi->curr < __pyx_v_pi->end) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L14_bool_binop_done;
          }
          __pyx_t_2 = (((__pyx_v_pi->curr[0]) == '/') != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L14_bool_binop_done:;
          if (__pyx_t_1) {

            /* "openstep_plist/parser.pyx":76
 *                     pi.curr += 1
 *                     if ch2 == c'*' and pi.curr < pi.end and pi.curr[0] == c'/':
 *                         pi.curr += 1  # advance past the '/'             # <<<<<<<<<<<<<<
 *                         break
 *             else:
 */
            __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

            /* "openstep_plist/parser.pyx":77
 *                     if ch2 == c'*' and pi.curr < pi.end and pi.curr[0] == c'/':
 *                         pi.curr += 1  # advance past the '/'
 *                         break             # <<<<<<<<<<<<<<
 *             else:
 *                 pi.curr -= 1
 */
            goto __pyx_L12_break;

            /* "openstep_plist/parser.pyx":75
 *                     ch2 = pi.curr[0]
 *                     pi.curr += 1
 *                     if ch2 == c'*' and pi.curr < pi.end and pi.curr[0] == c'/':             # <<<<<<<<<<<<<<
 *                         pi.curr += 1  # advance past the '/'
 *                         break
 */
          }
        }
        __pyx_L12_break:;

        /* "openstep_plist/parser.pyx":69
 *                         break
 *                     pi.curr += 1
 *             elif pi.curr[0] == c'*':             # <<<<<<<<<<<<<<
 *                 # handle C-style comments /[inserted by cython to avoid comment start]* ... *[inserted by cython to avoid comment closer]/
 *                 pi.curr += 1
 */
        goto __pyx_L8;
      }

      /* "openstep_plist/parser.pyx":79
 *                         break
 *             else:
 *                 pi.curr -= 1             # <<<<<<<<<<<<<<
 *                 return True
 *         else:
 */
      /*else*/ {
        __pyx_v_pi->curr = (__pyx_v_pi->curr - 1);

        /* "openstep_plist/parser.pyx":80
 *             else:
 *                 pi.curr -= 1
 *                 return True             # <<<<<<<<<<<<<<
 *         else:
 *             pi.curr -= 1
 */
        __pyx_r = 1;
        goto __pyx_L0;
      }
      __pyx_L8:;

      /* "openstep_plist/parser.pyx":56
 *         elif ch2 == c' ' or ch2 == 0x2028 or ch2 == 0x2029:
 *             continue
 *         elif ch2 == c'/':             # <<<<<<<<<<<<<<
 *             if pi.curr >= pi.end:
 *                 # whoops; back up and return
 */
      goto __pyx_L5;
    }

    /* "openstep_plist/parser.pyx":82
 *                 return True
 *         else:
 *             pi.curr -= 1             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
    /*else*/ {
      __pyx_v_pi->curr = (__pyx_v_pi->curr - 1);

      /* "openstep_plist/parser.pyx":83
 *         else:
 *             pi.curr -= 1
 *             return True             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
      __pyx_r = 1;
      goto __pyx_L0;
    }
    __pyx_L5:;
    __pyx_L3_continue:;
  }

  /* "openstep_plist/parser.pyx":85
 *             return True
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":43
 * 
 * 
 * cdef bint advance_to_non_space(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     """Returns true if the advance found something that's not whitespace
 *     before the end of the buffer, false otherwise.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":112
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef Py_UNICODE get_slashed_char(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     cdef Py_UNICODE result
 *     cdef uint8_t num
 */

static Py_UNICODE __pyx_f_14openstep_plist_6parser_get_slashed_char(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi) {
  uint8_t __pyx_v_num;
  unsigned int __pyx_v_codepoint;
  unsigned int __pyx_v_num_digits;
  unsigned long __pyx_v_unum;
  unsigned long __pyx_v_ch;
  Py_UNICODE __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  unsigned long __pyx_t_4;
  __Pyx_RefNannySetupContext("get_slashed_char", 0);

  /* "openstep_plist/parser.pyx":117
 *     cdef unsigned int codepoint, num_digits
 *     cdef unsigned long unum
 *     cdef unsigned long ch = pi.curr[0]             # <<<<<<<<<<<<<<
 * 
 *     pi.curr += 1
 */
  __pyx_v_ch = (__pyx_v_pi->curr[0]);

  /* "openstep_plist/parser.pyx":119
 *     cdef unsigned long ch = pi.curr[0]
 * 
 *     pi.curr += 1             # <<<<<<<<<<<<<<
 *     if (
 *         ch == c'0' or
 */
  __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

  /* "openstep_plist/parser.pyx":120
 * 
 *     pi.curr += 1
 *     if (             # <<<<<<<<<<<<<<
 *         ch == c'0' or
 *         ch == c'1' or
 */
  switch (__pyx_v_ch) {
    case '0':

    /* "openstep_plist/parser.pyx":121
 *     pi.curr += 1
 *     if (
 *         ch == c'0' or             # <<<<<<<<<<<<<<
 *         ch == c'1' or
 *         ch == c'2' or
 */
    case '1':

    /* "openstep_plist/parser.pyx":122
 *     if (
 *         ch == c'0' or
 *         ch == c'1' or             # <<<<<<<<<<<<<<
 *         ch == c'2' or
 *         ch == c'3' or
 */
    case '2':

    /* "openstep_plist/parser.pyx":123
 *         ch == c'0' or
 *         ch == c'1' or
 *         ch == c'2' or             # <<<<<<<<<<<<<<
 *         ch == c'3' or
 *         ch == c'4' or
 */
    case '3':

    /* "openstep_plist/parser.pyx":124
 *         ch == c'1' or
 *         ch == c'2' or
 *         ch == c'3' or             # <<<<<<<<<<<<<<
 *         ch == c'4' or
 *         ch == c'5' or
 */
    case '4':

    /* "openstep_plist/parser.pyx":125
 *         ch == c'2' or
 *         ch == c'3' or
 *         ch == c'4' or             # <<<<<<<<<<<<<<
 *         ch == c'5' or
 *         ch == c'6' or
 */
    case '5':

    /* "openstep_plist/parser.pyx":126
 *         ch == c'3' or
 *         ch == c'4' or
 *         ch == c'5' or             # <<<<<<<<<<<<<<
 *         ch == c'6' or
 *         ch == c'7'
 */
    case '6':

    /* "openstep_plist/parser.pyx":127
 *         ch == c'4' or
 *         ch == c'5' or
 *         ch == c'6' or             # <<<<<<<<<<<<<<
 *         ch == c'7'
 *     ):
 */
    case '7':

    /* "openstep_plist/parser.pyx":130
 *         ch == c'7'
 *     ):
 *         num = ch - c'0'             # <<<<<<<<<<<<<<
 *         # three digits maximum to avoid reading \000 followed by 5 as \5 !
 *         ch = pi.curr[0]
 */
    __pyx_v_num = (__pyx_v_ch - '0');

    /* "openstep_plist/parser.pyx":132
 *         num = ch - c'0'
 *         # three digits maximum to avoid reading \000 followed by 5 as \5 !
 *         ch = pi.curr[0]             # <<<<<<<<<<<<<<
 *         if ch >= c'0' and ch <= c'7':
 *             # we use in this test the fact that the buffer is zero-terminated
 */
    __pyx_v_ch = (__pyx_v_pi->curr[0]);

    /* "openstep_plist/parser.pyx":133
 *         # three digits maximum to avoid reading \000 followed by 5 as \5 !
 *         ch = pi.curr[0]
 *         if ch >= c'0' and ch <= c'7':             # <<<<<<<<<<<<<<
 *             # we use in this test the fact that the buffer is zero-terminated
 *             pi.curr += 1
 */
    __pyx_t_2 = ((__pyx_v_ch >= '0') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_ch <= '7') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L4_bool_binop_done:;
    if (__pyx_t_1) {

      /* "openstep_plist/parser.pyx":135
 *         if ch >= c'0' and ch <= c'7':
 *             # we use in this test the fact that the buffer is zero-terminated
 *             pi.curr += 1             # <<<<<<<<<<<<<<
 *             num = (num << 3) + ch - c'0'
 *             if pi.curr < pi.end:
 */
      __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

      /* "openstep_plist/parser.pyx":136
 *             # we use in this test the fact that the buffer is zero-terminated
 *             pi.curr += 1
 *             num = (num << 3) + ch - c'0'             # <<<<<<<<<<<<<<
 *             if pi.curr < pi.end:
 *                 ch = pi.curr[0]
 */
      __pyx_v_num = (((__pyx_v_num << 3) + __pyx_v_ch) - '0');

      /* "openstep_plist/parser.pyx":137
 *             pi.curr += 1
 *             num = (num << 3) + ch - c'0'
 *             if pi.curr < pi.end:             # <<<<<<<<<<<<<<
 *                 ch = pi.curr[0]
 *                 if ch >= c'0' and ch <= c'7':
 */
      __pyx_t_1 = ((__pyx_v_pi->curr < __pyx_v_pi->end) != 0);
      if (__pyx_t_1) {

        /* "openstep_plist/parser.pyx":138
 *             num = (num << 3) + ch - c'0'
 *             if pi.curr < pi.end:
 *                 ch = pi.curr[0]             # <<<<<<<<<<<<<<
 *                 if ch >= c'0' and ch <= c'7':
 *                     pi.curr += 1
 */
        __pyx_v_ch = (__pyx_v_pi->curr[0]);

        /* "openstep_plist/parser.pyx":139
 *             if pi.curr < pi.end:
 *                 ch = pi.curr[0]
 *                 if ch >= c'0' and ch <= c'7':             # <<<<<<<<<<<<<<
 *                     pi.curr += 1
 *                     num = (num << 3) + ch - c'0'
 */
        __pyx_t_2 = ((__pyx_v_ch >= '0') != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_1 = __pyx_t_2;
          goto __pyx_L8_bool_binop_done;
        }
        __pyx_t_2 = ((__pyx_v_ch <= '7') != 0);
        __pyx_t_1 = __pyx_t_2;
        __pyx_L8_bool_binop_done:;
        if (__pyx_t_1) {

          /* "openstep_plist/parser.pyx":140
 *                 ch = pi.curr[0]
 *                 if ch >= c'0' and ch <= c'7':
 *                     pi.curr += 1             # <<<<<<<<<<<<<<
 *                     num = (num << 3) + ch - c'0'
 *             if num < 128:  # ascii
 */
          __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

          /* "openstep_plist/parser.pyx":141
 *                 if ch >= c'0' and ch <= c'7':
 *                     pi.curr += 1
 *                     num = (num << 3) + ch - c'0'             # <<<<<<<<<<<<<<
 *             if num < 128:  # ascii
 *                 codepoint = num
 */
          __pyx_v_num = (((__pyx_v_num << 3) + __pyx_v_ch) - '0');

          /* "openstep_plist/parser.pyx":139
 *             if pi.curr < pi.end:
 *                 ch = pi.curr[0]
 *                 if ch >= c'0' and ch <= c'7':             # <<<<<<<<<<<<<<
 *                     pi.curr += 1
 *                     num = (num << 3) + ch - c'0'
 */
        }

        /* "openstep_plist/parser.pyx":137
 *             pi.curr += 1
 *             num = (num << 3) + ch - c'0'
 *             if pi.curr < pi.end:             # <<<<<<<<<<<<<<
 *                 ch = pi.curr[0]
 *                 if ch >= c'0' and ch <= c'7':
 */
      }

      /* "openstep_plist/parser.pyx":142
 *                     pi.curr += 1
 *                     num = (num << 3) + ch - c'0'
 *             if num < 128:  # ascii             # <<<<<<<<<<<<<<
 *                 codepoint = num
 *             else:
 */
      __pyx_t_1 = ((__pyx_v_num < 0x80) != 0);
      if (__pyx_t_1) {

        /* "openstep_plist/parser.pyx":143
 *                     num = (num << 3) + ch - c'0'
 *             if num < 128:  # ascii
 *                 codepoint = num             # <<<<<<<<<<<<<<
 *             else:
 *                 codepoint = NEXT_STEP_DECODING_TABLE[num-128]
 */
        __pyx_v_codepoint = __pyx_v_num;

        /* "openstep_plist/parser.pyx":142
 *                     pi.curr += 1
 *                     num = (num << 3) + ch - c'0'
 *             if num < 128:  # ascii             # <<<<<<<<<<<<<<
 *                 codepoint = num
 *             else:
 */
        goto __pyx_L10;
      }

      /* "openstep_plist/parser.pyx":145
 *                 codepoint = num
 *             else:
 *                 codepoint = NEXT_STEP_DECODING_TABLE[num-128]             # <<<<<<<<<<<<<<
 *             return codepoint
 *     elif ch == c'U':
 */
      /*else*/ {
        __pyx_v_codepoint = (__pyx_v_14openstep_plist_6parser_NEXT_STEP_DECODING_TABLE[(__pyx_v_num - 0x80)]);
      }
      __pyx_L10:;

      /* "openstep_plist/parser.pyx":146
 *             else:
 *                 codepoint = NEXT_STEP_DECODING_TABLE[num-128]
 *             return codepoint             # <<<<<<<<<<<<<<
 *     elif ch == c'U':
 *         unum = 0
 */
      __pyx_r = __pyx_v_codepoint;
      goto __pyx_L0;

      /* "openstep_plist/parser.pyx":133
 *         # three digits maximum to avoid reading \000 followed by 5 as \5 !
 *         ch = pi.curr[0]
 *         if ch >= c'0' and ch <= c'7':             # <<<<<<<<<<<<<<
 *             # we use in this test the fact that the buffer is zero-terminated
 *             pi.curr += 1
 */
    }

    /* "openstep_plist/parser.pyx":120
 * 
 *     pi.curr += 1
 *     if (             # <<<<<<<<<<<<<<
 *         ch == c'0' or
 *         ch == c'1' or
 */
    break;
    case 'U':

    /* "openstep_plist/parser.pyx":148
 *             return codepoint
 *     elif ch == c'U':
 *         unum = 0             # <<<<<<<<<<<<<<
 *         num_digits = 4
 *         while pi.curr < pi.end and num_digits > 0:
 */
    __pyx_v_unum = 0;

    /* "openstep_plist/parser.pyx":149
 *     elif ch == c'U':
 *         unum = 0
 *         num_digits = 4             # <<<<<<<<<<<<<<
 *         while pi.curr < pi.end and num_digits > 0:
 *             ch = pi.curr[0]
 */
    __pyx_v_num_digits = 4;

    /* "openstep_plist/parser.pyx":150
 *         unum = 0
 *         num_digits = 4
 *         while pi.curr < pi.end and num_digits > 0:             # <<<<<<<<<<<<<<
 *             ch = pi.curr[0]
 *             if ch < 128 and isxdigit(<unsigned char>ch):
 */
    while (1) {
      __pyx_t_2 = ((__pyx_v_pi->curr < __pyx_v_pi->end) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L13_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_num_digits > 0) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L13_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "openstep_plist/parser.pyx":151
 *         num_digits = 4
 *         while pi.curr < pi.end and num_digits > 0:
 *             ch = pi.curr[0]             # <<<<<<<<<<<<<<
 *             if ch < 128 and isxdigit(<unsigned char>ch):
 *                 pi.curr += 1
 */
      __pyx_v_ch = (__pyx_v_pi->curr[0]);

      /* "openstep_plist/parser.pyx":152
 *         while pi.curr < pi.end and num_digits > 0:
 *             ch = pi.curr[0]
 *             if ch < 128 and isxdigit(<unsigned char>ch):             # <<<<<<<<<<<<<<
 *                 pi.curr += 1
 *                 unum = (unum << 4) + (
 */
      __pyx_t_2 = ((__pyx_v_ch < 0x80) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_2 = (isxdigit(((unsigned char)__pyx_v_ch)) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_1) {

        /* "openstep_plist/parser.pyx":153
 *             ch = pi.curr[0]
 *             if ch < 128 and isxdigit(<unsigned char>ch):
 *                 pi.curr += 1             # <<<<<<<<<<<<<<
 *                 unum = (unum << 4) + (
 *                     (ch - c'0') if ch <= c'9' else (
 */
        __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

        /* "openstep_plist/parser.pyx":155
 *                 pi.curr += 1
 *                 unum = (unum << 4) + (
 *                     (ch - c'0') if ch <= c'9' else (             # <<<<<<<<<<<<<<
 *                         (ch - c'A' + 10) if ch <= c'F' else (ch - c'a' + 10)
 *                     )
 */
        if (((__pyx_v_ch <= '9') != 0)) {
          __pyx_t_3 = (__pyx_v_ch - '0');
        } else {

          /* "openstep_plist/parser.pyx":156
 *                 unum = (unum << 4) + (
 *                     (ch - c'0') if ch <= c'9' else (
 *                         (ch - c'A' + 10) if ch <= c'F' else (ch - c'a' + 10)             # <<<<<<<<<<<<<<
 *                     )
 *                 )
 */
          if (((__pyx_v_ch <= 'F') != 0)) {
            __pyx_t_4 = ((__pyx_v_ch - 'A') + 10);
          } else {
            __pyx_t_4 = ((__pyx_v_ch - 'a') + 10);
          }
          __pyx_t_3 = __pyx_t_4;
        }

        /* "openstep_plist/parser.pyx":154
 *             if ch < 128 and isxdigit(<unsigned char>ch):
 *                 pi.curr += 1
 *                 unum = (unum << 4) + (             # <<<<<<<<<<<<<<
 *                     (ch - c'0') if ch <= c'9' else (
 *                         (ch - c'A' + 10) if ch <= c'F' else (ch - c'a' + 10)
 */
        __pyx_v_unum = ((__pyx_v_unum << 4) + __pyx_t_3);

        /* "openstep_plist/parser.pyx":152
 *         while pi.curr < pi.end and num_digits > 0:
 *             ch = pi.curr[0]
 *             if ch < 128 and isxdigit(<unsigned char>ch):             # <<<<<<<<<<<<<<
 *                 pi.curr += 1
 *                 unum = (unum << 4) + (
 */
      }

      /* "openstep_plist/parser.pyx":159
 *                     )
 *                 )
 *             num_digits -= 1             # <<<<<<<<<<<<<<
 *         return unum
 *     elif ch == c'a':
 */
      __pyx_v_num_digits = (__pyx_v_num_digits - 1);
    }

    /* "openstep_plist/parser.pyx":160
 *                 )
 *             num_digits -= 1
 *         return unum             # <<<<<<<<<<<<<<
 *     elif ch == c'a':
 *         return c'\a'
 */
    __pyx_r = __pyx_v_unum;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":147
 *                 codepoint = NEXT_STEP_DECODING_TABLE[num-128]
 *             return codepoint
 *     elif ch == c'U':             # <<<<<<<<<<<<<<
 *         unum = 0
 *         num_digits = 4
 */
    break;
    case 'a':

    /* "openstep_plist/parser.pyx":162
 *         return unum
 *     elif ch == c'a':
 *         return c'\a'             # <<<<<<<<<<<<<<
 *     elif ch == c'b':
 *         return c'\b'
 */
    __pyx_r = '\x07';
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":161
 *             num_digits -= 1
 *         return unum
 *     elif ch == c'a':             # <<<<<<<<<<<<<<
 *         return c'\a'
 *     elif ch == c'b':
 */
    break;
    case 'b':

    /* "openstep_plist/parser.pyx":164
 *         return c'\a'
 *     elif ch == c'b':
 *         return c'\b'             # <<<<<<<<<<<<<<
 *     elif ch == c'f':
 *         return c'\f'
 */
    __pyx_r = '\x08';
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":163
 *     elif ch == c'a':
 *         return c'\a'
 *     elif ch == c'b':             # <<<<<<<<<<<<<<
 *         return c'\b'
 *     elif ch == c'f':
 */
    break;
    case 'f':

    /* "openstep_plist/parser.pyx":166
 *         return c'\b'
 *     elif ch == c'f':
 *         return c'\f'             # <<<<<<<<<<<<<<
 *     elif ch == c'n':
 *         return c'\n'
 */
    __pyx_r = '\x0C';
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":165
 *     elif ch == c'b':
 *         return c'\b'
 *     elif ch == c'f':             # <<<<<<<<<<<<<<
 *         return c'\f'
 *     elif ch == c'n':
 */
    break;
    case 'n':

    /* "openstep_plist/parser.pyx":168
 *         return c'\f'
 *     elif ch == c'n':
 *         return c'\n'             # <<<<<<<<<<<<<<
 *     elif ch == c'r':
 *         return c'\r'
 */
    __pyx_r = '\n';
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":167
 *     elif ch == c'f':
 *         return c'\f'
 *     elif ch == c'n':             # <<<<<<<<<<<<<<
 *         return c'\n'
 *     elif ch == c'r':
 */
    break;
    case 'r':

    /* "openstep_plist/parser.pyx":170
 *         return c'\n'
 *     elif ch == c'r':
 *         return c'\r'             # <<<<<<<<<<<<<<
 *     elif ch == c't':
 *         return c'\t'
 */
    __pyx_r = '\r';
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":169
 *     elif ch == c'n':
 *         return c'\n'
 *     elif ch == c'r':             # <<<<<<<<<<<<<<
 *         return c'\r'
 *     elif ch == c't':
 */
    break;
    case 't':

    /* "openstep_plist/parser.pyx":172
 *         return c'\r'
 *     elif ch == c't':
 *         return c'\t'             # <<<<<<<<<<<<<<
 *     elif ch == c'v':
 *         return c'\v'
 */
    __pyx_r = '\t';
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":171
 *     elif ch == c'r':
 *         return c'\r'
 *     elif ch == c't':             # <<<<<<<<<<<<<<
 *         return c'\t'
 *     elif ch == c'v':
 */
    break;
    case 'v':

    /* "openstep_plist/parser.pyx":174
 *         return c'\t'
 *     elif ch == c'v':
 *         return c'\v'             # <<<<<<<<<<<<<<
 *     elif ch == c'"':
 *         return c'"'
 */
    __pyx_r = '\x0B';
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":173
 *     elif ch == c't':
 *         return c'\t'
 *     elif ch == c'v':             # <<<<<<<<<<<<<<
 *         return c'\v'
 *     elif ch == c'"':
 */
    break;
    case '"':

    /* "openstep_plist/parser.pyx":176
 *         return c'\v'
 *     elif ch == c'"':
 *         return c'"'             # <<<<<<<<<<<<<<
 *     elif ch == c'\n':
 *         return c'\n'
 */
    __pyx_r = '"';
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":175
 *     elif ch == c'v':
 *         return c'\v'
 *     elif ch == c'"':             # <<<<<<<<<<<<<<
 *         return c'"'
 *     elif ch == c'\n':
 */
    break;
    case '\n':

    /* "openstep_plist/parser.pyx":178
 *         return c'"'
 *     elif ch == c'\n':
 *         return c'\n'             # <<<<<<<<<<<<<<
 * 
 *     return ch
 */
    __pyx_r = '\n';
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":177
 *     elif ch == c'"':
 *         return c'"'
 *     elif ch == c'\n':             # <<<<<<<<<<<<<<
 *         return c'\n'
 * 
 */
    break;
    default: break;
  }

  /* "openstep_plist/parser.pyx":180
 *         return c'\n'
 * 
 *     return ch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_ch;
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":112
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef Py_UNICODE get_slashed_char(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     cdef Py_UNICODE result
 *     cdef uint8_t num
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":183
 * 
 * 
 * cdef unicode parse_quoted_plist_string(ParseInfo *pi, Py_UNICODE quote):             # <<<<<<<<<<<<<<
 *     cdef vector[Py_UNICODE] string
 *     cdef const Py_UNICODE *start_mark = pi.curr
 */

static PyObject *__pyx_f_14openstep_plist_6parser_parse_quoted_plist_string(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi, Py_UNICODE __pyx_v_quote) {
  std::vector<Py_UNICODE>  __pyx_v_string;
  CYTHON_UNUSED Py_UNICODE const *__pyx_v_start_mark;
  Py_UNICODE const *__pyx_v_mark;
  Py_UNICODE const *__pyx_v_tmp;
  Py_UNICODE __pyx_v_ch;
  Py_UNICODE __pyx_v_ch2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_UNICODE const *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_quoted_plist_string", 0);

  /* "openstep_plist/parser.pyx":185
 * cdef unicode parse_quoted_plist_string(ParseInfo *pi, Py_UNICODE quote):
 *     cdef vector[Py_UNICODE] string
 *     cdef const Py_UNICODE *start_mark = pi.curr             # <<<<<<<<<<<<<<
 *     cdef const Py_UNICODE *mark = pi.curr
 *     cdef const Py_UNICODE *tmp
 */
  __pyx_t_1 = __pyx_v_pi->curr;
  __pyx_v_start_mark = __pyx_t_1;

  /* "openstep_plist/parser.pyx":186
 *     cdef vector[Py_UNICODE] string
 *     cdef const Py_UNICODE *start_mark = pi.curr
 *     cdef const Py_UNICODE *mark = pi.curr             # <<<<<<<<<<<<<<
 *     cdef const Py_UNICODE *tmp
 *     cdef Py_UNICODE ch, ch2
 */
  __pyx_t_1 = __pyx_v_pi->curr;
  __pyx_v_mark = __pyx_t_1;

  /* "openstep_plist/parser.pyx":189
 *     cdef const Py_UNICODE *tmp
 *     cdef Py_UNICODE ch, ch2
 *     while pi.curr < pi.end:             # <<<<<<<<<<<<<<
 *         ch = pi.curr[0]
 *         if ch == quote:
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_pi->curr < __pyx_v_pi->end) != 0);
    if (!__pyx_t_2) break;

    /* "openstep_plist/parser.pyx":190
 *     cdef Py_UNICODE ch, ch2
 *     while pi.curr < pi.end:
 *         ch = pi.curr[0]             # <<<<<<<<<<<<<<
 *         if ch == quote:
 *             break
 */
    __pyx_v_ch = (__pyx_v_pi->curr[0]);

    /* "openstep_plist/parser.pyx":191
 *     while pi.curr < pi.end:
 *         ch = pi.curr[0]
 *         if ch == quote:             # <<<<<<<<<<<<<<
 *             break
 *         elif ch == c'\\':
 */
    __pyx_t_2 = ((__pyx_v_ch == __pyx_v_quote) != 0);
    if (__pyx_t_2) {

      /* "openstep_plist/parser.pyx":192
 *         ch = pi.curr[0]
 *         if ch == quote:
 *             break             # <<<<<<<<<<<<<<
 *         elif ch == c'\\':
 *             string.reserve(string.size() + (pi.curr - mark))
 */
      goto __pyx_L4_break;

      /* "openstep_plist/parser.pyx":191
 *     while pi.curr < pi.end:
 *         ch = pi.curr[0]
 *         if ch == quote:             # <<<<<<<<<<<<<<
 *             break
 *         elif ch == c'\\':
 */
    }

    /* "openstep_plist/parser.pyx":193
 *         if ch == quote:
 *             break
 *         elif ch == c'\\':             # <<<<<<<<<<<<<<
 *             string.reserve(string.size() + (pi.curr - mark))
 *             copy(mark, pi.curr, back_inserter(string))
 */
    __pyx_t_2 = ((__pyx_v_ch == '\\') != 0);
    if (__pyx_t_2) {

      /* "openstep_plist/parser.pyx":194
 *             break
 *         elif ch == c'\\':
 *             string.reserve(string.size() + (pi.curr - mark))             # <<<<<<<<<<<<<<
 *             copy(mark, pi.curr, back_inserter(string))
 *             pi.curr += 1
 */
      __pyx_v_string.reserve((__pyx_v_string.size() + (__pyx_v_pi->curr - __pyx_v_mark)));

      /* "openstep_plist/parser.pyx":195
 *         elif ch == c'\\':
 *             string.reserve(string.size() + (pi.curr - mark))
 *             copy(mark, pi.curr, back_inserter(string))             # <<<<<<<<<<<<<<
 *             pi.curr += 1
 *             ch = get_slashed_char(pi)
 */
      (void)(std::copy<Py_UNICODE const *,std::back_insert_iterator<std::vector<Py_UNICODE> > >(__pyx_v_mark, __pyx_v_pi->curr, std::back_inserter<std::vector<Py_UNICODE> >(__pyx_v_string)));

      /* "openstep_plist/parser.pyx":196
 *             string.reserve(string.size() + (pi.curr - mark))
 *             copy(mark, pi.curr, back_inserter(string))
 *             pi.curr += 1             # <<<<<<<<<<<<<<
 *             ch = get_slashed_char(pi)
 *             # If we are NOT on a "narrow" python 2 build, then we need to parse
 */
      __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

      /* "openstep_plist/parser.pyx":197
 *             copy(mark, pi.curr, back_inserter(string))
 *             pi.curr += 1
 *             ch = get_slashed_char(pi)             # <<<<<<<<<<<<<<
 *             # If we are NOT on a "narrow" python 2 build, then we need to parse
 *             # two successive \UXXXX escape sequences as one surrogate pair
 */
      __pyx_v_ch = __pyx_f_14openstep_plist_6parser_get_slashed_char(__pyx_v_pi);

      /* "openstep_plist/parser.pyx":204
 *             # represent a single codepoint internally.
 *             if (
 *                 not PY_NARROW_UNICODE and is_high_surrogate(ch)             # <<<<<<<<<<<<<<
 *                 and pi.curr < pi.end and pi.curr[0] == c"\\"
 *             ):
 */
      __pyx_t_3 = ((!(__pyx_v_14openstep_plist_4util_PY_NARROW_UNICODE != 0)) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L7_bool_binop_done;
      }

      /* "openstep_plist/parser.pyx":205
 *             if (
 *                 not PY_NARROW_UNICODE and is_high_surrogate(ch)
 *                 and pi.curr < pi.end and pi.curr[0] == c"\\"             # <<<<<<<<<<<<<<
 *             ):
 *                 tmp = pi.curr
 */
      __pyx_t_3 = (__pyx_f_14openstep_plist_4util_is_high_surrogate(__pyx_v_ch) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_3 = ((__pyx_v_pi->curr < __pyx_v_pi->end) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_3 = (((__pyx_v_pi->curr[0]) == '\\') != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L7_bool_binop_done:;

      /* "openstep_plist/parser.pyx":203
 *             # If we are on a "narrow" build, then the two code units already
 *             # represent a single codepoint internally.
 *             if (             # <<<<<<<<<<<<<<
 *                 not PY_NARROW_UNICODE and is_high_surrogate(ch)
 *                 and pi.curr < pi.end and pi.curr[0] == c"\\"
 */
      if (__pyx_t_2) {

        /* "openstep_plist/parser.pyx":207
 *                 and pi.curr < pi.end and pi.curr[0] == c"\\"
 *             ):
 *                 tmp = pi.curr             # <<<<<<<<<<<<<<
 *                 pi.curr += 1
 *                 ch2 = get_slashed_char(pi)
 */
        __pyx_t_1 = __pyx_v_pi->curr;
        __pyx_v_tmp = __pyx_t_1;

        /* "openstep_plist/parser.pyx":208
 *             ):
 *                 tmp = pi.curr
 *                 pi.curr += 1             # <<<<<<<<<<<<<<
 *                 ch2 = get_slashed_char(pi)
 *                 if is_low_surrogate(ch2):
 */
        __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

        /* "openstep_plist/parser.pyx":209
 *                 tmp = pi.curr
 *                 pi.curr += 1
 *                 ch2 = get_slashed_char(pi)             # <<<<<<<<<<<<<<
 *                 if is_low_surrogate(ch2):
 *                     ch = unicode_scalar_from_surrogates(high=ch, low=ch2)
 */
        __pyx_v_ch2 = __pyx_f_14openstep_plist_6parser_get_slashed_char(__pyx_v_pi);

        /* "openstep_plist/parser.pyx":210
 *                 pi.curr += 1
 *                 ch2 = get_slashed_char(pi)
 *                 if is_low_surrogate(ch2):             # <<<<<<<<<<<<<<
 *                     ch = unicode_scalar_from_surrogates(high=ch, low=ch2)
 *                 else:
 */
        __pyx_t_2 = (__pyx_f_14openstep_plist_4util_is_low_surrogate(__pyx_v_ch2) != 0);
        if (__pyx_t_2) {

          /* "openstep_plist/parser.pyx":211
 *                 ch2 = get_slashed_char(pi)
 *                 if is_low_surrogate(ch2):
 *                     ch = unicode_scalar_from_surrogates(high=ch, low=ch2)             # <<<<<<<<<<<<<<
 *                 else:
 *                     # XXX maybe we should raise here instead of letting this
 */
          __pyx_v_ch = __pyx_f_14openstep_plist_4util_unicode_scalar_from_surrogates(__pyx_v_ch, __pyx_v_ch2);

          /* "openstep_plist/parser.pyx":210
 *                 pi.curr += 1
 *                 ch2 = get_slashed_char(pi)
 *                 if is_low_surrogate(ch2):             # <<<<<<<<<<<<<<
 *                     ch = unicode_scalar_from_surrogates(high=ch, low=ch2)
 *                 else:
 */
          goto __pyx_L11;
        }

        /* "openstep_plist/parser.pyx":215
 *                     # XXX maybe we should raise here instead of letting this
 *                     # lone high surrogate (not followed by a low) pass through?
 *                     pi.curr = tmp             # <<<<<<<<<<<<<<
 *             string.push_back(ch)
 *             mark = pi.curr
 */
        /*else*/ {
          __pyx_v_pi->curr = __pyx_v_tmp;
        }
        __pyx_L11:;

        /* "openstep_plist/parser.pyx":203
 *             # If we are on a "narrow" build, then the two code units already
 *             # represent a single codepoint internally.
 *             if (             # <<<<<<<<<<<<<<
 *                 not PY_NARROW_UNICODE and is_high_surrogate(ch)
 *                 and pi.curr < pi.end and pi.curr[0] == c"\\"
 */
      }

      /* "openstep_plist/parser.pyx":216
 *                     # lone high surrogate (not followed by a low) pass through?
 *                     pi.curr = tmp
 *             string.push_back(ch)             # <<<<<<<<<<<<<<
 *             mark = pi.curr
 *         else:
 */
      try {
        __pyx_v_string.push_back(__pyx_v_ch);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 216, __pyx_L1_error)
      }

      /* "openstep_plist/parser.pyx":217
 *                     pi.curr = tmp
 *             string.push_back(ch)
 *             mark = pi.curr             # <<<<<<<<<<<<<<
 *         else:
 *             pi.curr += 1
 */
      __pyx_t_1 = __pyx_v_pi->curr;
      __pyx_v_mark = __pyx_t_1;

      /* "openstep_plist/parser.pyx":193
 *         if ch == quote:
 *             break
 *         elif ch == c'\\':             # <<<<<<<<<<<<<<
 *             string.reserve(string.size() + (pi.curr - mark))
 *             copy(mark, pi.curr, back_inserter(string))
 */
      goto __pyx_L5;
    }

    /* "openstep_plist/parser.pyx":219
 *             mark = pi.curr
 *         else:
 *             pi.curr += 1             # <<<<<<<<<<<<<<
 *     if pi.end <= pi.curr:
 *         raise ParseError(
 */
    /*else*/ {
      __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);
    }
    __pyx_L5:;
  }
  __pyx_L4_break:;

  /* "openstep_plist/parser.pyx":220
 *         else:
 *             pi.curr += 1
 *     if pi.end <= pi.curr:             # <<<<<<<<<<<<<<
 *         raise ParseError(
 *             "Unterminated quoted string starting on line %d"
 */
  __pyx_t_2 = ((__pyx_v_pi->end <= __pyx_v_pi->curr) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "openstep_plist/parser.pyx":223
 *         raise ParseError(
 *             "Unterminated quoted string starting on line %d"
 *             % line_number_strings(pi)             # <<<<<<<<<<<<<<
 *         )
 *     if mark != pi.curr:
 */
    __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_Unterminated_quoted_string_start, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "openstep_plist/parser.pyx":221
 *             pi.curr += 1
 *     if pi.end <= pi.curr:
 *         raise ParseError(             # <<<<<<<<<<<<<<
 *             "Unterminated quoted string starting on line %d"
 *             % line_number_strings(pi)
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 221, __pyx_L1_error)

    /* "openstep_plist/parser.pyx":220
 *         else:
 *             pi.curr += 1
 *     if pi.end <= pi.curr:             # <<<<<<<<<<<<<<
 *         raise ParseError(
 *             "Unterminated quoted string starting on line %d"
 */
  }

  /* "openstep_plist/parser.pyx":225
 *             % line_number_strings(pi)
 *         )
 *     if mark != pi.curr:             # <<<<<<<<<<<<<<
 *         string.reserve(string.size() + (pi.curr - mark))
 *         copy(mark, pi.curr, back_inserter(string))
 */
  __pyx_t_2 = ((__pyx_v_mark != __pyx_v_pi->curr) != 0);
  if (__pyx_t_2) {

    /* "openstep_plist/parser.pyx":226
 *         )
 *     if mark != pi.curr:
 *         string.reserve(string.size() + (pi.curr - mark))             # <<<<<<<<<<<<<<
 *         copy(mark, pi.curr, back_inserter(string))
 *     # Advance past the quote character before returning
 */
    __pyx_v_string.reserve((__pyx_v_string.size() + (__pyx_v_pi->curr - __pyx_v_mark)));

    /* "openstep_plist/parser.pyx":227
 *     if mark != pi.curr:
 *         string.reserve(string.size() + (pi.curr - mark))
 *         copy(mark, pi.curr, back_inserter(string))             # <<<<<<<<<<<<<<
 *     # Advance past the quote character before returning
 *     pi.curr += 1
 */
    (void)(std::copy<Py_UNICODE const *,std::back_insert_iterator<std::vector<Py_UNICODE> > >(__pyx_v_mark, __pyx_v_pi->curr, std::back_inserter<std::vector<Py_UNICODE> >(__pyx_v_string)));

    /* "openstep_plist/parser.pyx":225
 *             % line_number_strings(pi)
 *         )
 *     if mark != pi.curr:             # <<<<<<<<<<<<<<
 *         string.reserve(string.size() + (pi.curr - mark))
 *         copy(mark, pi.curr, back_inserter(string))
 */
  }

  /* "openstep_plist/parser.pyx":229
 *         copy(mark, pi.curr, back_inserter(string))
 *     # Advance past the quote character before returning
 *     pi.curr += 1             # <<<<<<<<<<<<<<
 * 
 *     return PyUnicode_FromUnicode(<const Py_UNICODE*>string.const_data(), string.size())
 */
  __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

  /* "openstep_plist/parser.pyx":231
 *     pi.curr += 1
 * 
 *     return PyUnicode_FromUnicode(<const Py_UNICODE*>string.const_data(), string.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyUnicode_FromUnicode(((Py_UNICODE const *)__pyx_v_string.data()), __pyx_v_string.size()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":183
 * 
 * 
 * cdef unicode parse_quoted_plist_string(ParseInfo *pi, Py_UNICODE quote):             # <<<<<<<<<<<<<<
 *     cdef vector[Py_UNICODE] string
 *     cdef const Py_UNICODE *start_mark = pi.curr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openstep_plist.parser.parse_quoted_plist_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":234
 * 
 * 
 * def string_to_number(unicode s not None, bint required=True):             # <<<<<<<<<<<<<<
 *     """Convert string s to either int or float.
 *     Raises ValueError if the string is not a number.
 */

/* Python wrapper */
static PyObject *__pyx_pw_14openstep_plist_6parser_1string_to_number(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14openstep_plist_6parser_string_to_number[] = "string_to_number(unicode s, bool required=True)\nConvert string s to either int or float.\n    Raises ValueError if the string is not a number.\n    ";
static PyMethodDef __pyx_mdef_14openstep_plist_6parser_1string_to_number = {"string_to_number", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14openstep_plist_6parser_1string_to_number, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14openstep_plist_6parser_string_to_number};
static PyObject *__pyx_pw_14openstep_plist_6parser_1string_to_number(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_s = 0;
  int __pyx_v_required;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("string_to_number (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_required,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_required);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "string_to_number") < 0)) __PYX_ERR(0, 234, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_required = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_required == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L3_error)
    } else {
      __pyx_v_required = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("string_to_number", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 234, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openstep_plist.parser.string_to_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyUnicode_Type), 0, "s", 1))) __PYX_ERR(0, 234, __pyx_L1_error)
  __pyx_r = __pyx_pf_14openstep_plist_6parser_string_to_number(__pyx_self, __pyx_v_s, __pyx_v_required);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14openstep_plist_6parser_string_to_number(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s, int __pyx_v_required) {
  Py_UNICODE *__pyx_v_buf;
  Py_ssize_t __pyx_v_length;
  enum __pyx_t_14openstep_plist_6parser_UnquotedType __pyx_v_kind;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("string_to_number", 0);

  /* "openstep_plist/parser.pyx":241
 *         Py_UNICODE c
 *         Py_UNICODE* buf
 *         Py_ssize_t length = PyUnicode_GET_SIZE(s)             # <<<<<<<<<<<<<<
 * 
 *     if length:
 */
  __pyx_v_length = PyUnicode_GET_SIZE(__pyx_v_s);

  /* "openstep_plist/parser.pyx":243
 *         Py_ssize_t length = PyUnicode_GET_SIZE(s)
 * 
 *     if length:             # <<<<<<<<<<<<<<
 *         buf = PyUnicode_AS_UNICODE(s)
 *         kind = get_unquoted_string_type(buf, length)
 */
  __pyx_t_1 = (__pyx_v_length != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":244
 * 
 *     if length:
 *         buf = PyUnicode_AS_UNICODE(s)             # <<<<<<<<<<<<<<
 *         kind = get_unquoted_string_type(buf, length)
 *         if kind == UNQUOTED_FLOAT:
 */
    __pyx_v_buf = PyUnicode_AS_UNICODE(__pyx_v_s);

    /* "openstep_plist/parser.pyx":245
 *     if length:
 *         buf = PyUnicode_AS_UNICODE(s)
 *         kind = get_unquoted_string_type(buf, length)             # <<<<<<<<<<<<<<
 *         if kind == UNQUOTED_FLOAT:
 *             return float(s)
 */
    __pyx_v_kind = __pyx_f_14openstep_plist_6parser_get_unquoted_string_type(__pyx_v_buf, __pyx_v_length);

    /* "openstep_plist/parser.pyx":246
 *         buf = PyUnicode_AS_UNICODE(s)
 *         kind = get_unquoted_string_type(buf, length)
 *         if kind == UNQUOTED_FLOAT:             # <<<<<<<<<<<<<<
 *             return float(s)
 *         elif kind == UNQUOTED_INTEGER:
 */
    switch (__pyx_v_kind) {
      case __pyx_e_14openstep_plist_6parser_UNQUOTED_FLOAT:

      /* "openstep_plist/parser.pyx":247
 *         kind = get_unquoted_string_type(buf, length)
 *         if kind == UNQUOTED_FLOAT:
 *             return float(s)             # <<<<<<<<<<<<<<
 *         elif kind == UNQUOTED_INTEGER:
 *             return int(s)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyNumber_Float(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "openstep_plist/parser.pyx":246
 *         buf = PyUnicode_AS_UNICODE(s)
 *         kind = get_unquoted_string_type(buf, length)
 *         if kind == UNQUOTED_FLOAT:             # <<<<<<<<<<<<<<
 *             return float(s)
 *         elif kind == UNQUOTED_INTEGER:
 */
      break;
      case __pyx_e_14openstep_plist_6parser_UNQUOTED_INTEGER:

      /* "openstep_plist/parser.pyx":249
 *             return float(s)
 *         elif kind == UNQUOTED_INTEGER:
 *             return int(s)             # <<<<<<<<<<<<<<
 * 
 *     if required:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "openstep_plist/parser.pyx":248
 *         if kind == UNQUOTED_FLOAT:
 *             return float(s)
 *         elif kind == UNQUOTED_INTEGER:             # <<<<<<<<<<<<<<
 *             return int(s)
 * 
 */
      break;
      default: break;
    }

    /* "openstep_plist/parser.pyx":243
 *         Py_ssize_t length = PyUnicode_GET_SIZE(s)
 * 
 *     if length:             # <<<<<<<<<<<<<<
 *         buf = PyUnicode_AS_UNICODE(s)
 *         kind = get_unquoted_string_type(buf, length)
 */
  }

  /* "openstep_plist/parser.pyx":251
 *             return int(s)
 * 
 *     if required:             # <<<<<<<<<<<<<<
 *         raise ValueError(f"Could not convert string to float or int: {s!r}")
 *     else:
 */
  __pyx_t_1 = (__pyx_v_required != 0);
  if (unlikely(__pyx_t_1)) {

    /* "openstep_plist/parser.pyx":252
 * 
 *     if required:
 *         raise ValueError(f"Could not convert string to float or int: {s!r}")             # <<<<<<<<<<<<<<
 *     else:
 *         return s
 */
    __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_s), __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Could_not_convert_string_to_floa, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 252, __pyx_L1_error)

    /* "openstep_plist/parser.pyx":251
 *             return int(s)
 * 
 *     if required:             # <<<<<<<<<<<<<<
 *         raise ValueError(f"Could not convert string to float or int: {s!r}")
 *     else:
 */
  }

  /* "openstep_plist/parser.pyx":254
 *         raise ValueError(f"Could not convert string to float or int: {s!r}")
 *     else:
 *         return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_s);
    __pyx_r = __pyx_v_s;
    goto __pyx_L0;
  }

  /* "openstep_plist/parser.pyx":234
 * 
 * 
 * def string_to_number(unicode s not None, bint required=True):             # <<<<<<<<<<<<<<
 *     """Convert string s to either int or float.
 *     Raises ValueError if the string is not a number.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openstep_plist.parser.string_to_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":257
 * 
 * 
 * cdef UnquotedType get_unquoted_string_type(             # <<<<<<<<<<<<<<
 *     const Py_UNICODE *buf, Py_ssize_t length
 * ):
 */

static enum __pyx_t_14openstep_plist_6parser_UnquotedType __pyx_f_14openstep_plist_6parser_get_unquoted_string_type(Py_UNICODE const *__pyx_v_buf, Py_ssize_t __pyx_v_length) {
  int __pyx_v_maybe_number;
  int __pyx_v_is_float;
  int __pyx_v_i;
  Py_UNICODE __pyx_v_ch;
  enum __pyx_t_14openstep_plist_6parser_UnquotedType __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  enum __pyx_t_14openstep_plist_6parser_UnquotedType __pyx_t_6;
  __Pyx_RefNannySetupContext("get_unquoted_string_type", 0);

  /* "openstep_plist/parser.pyx":268
 *     # "." (e.g. .05) are not handled here, but are treated as strings.
 *     cdef:
 *         bint maybe_number = True             # <<<<<<<<<<<<<<
 *         bint is_float = False
 *         int i = 0
 */
  __pyx_v_maybe_number = 1;

  /* "openstep_plist/parser.pyx":269
 *     cdef:
 *         bint maybe_number = True
 *         bint is_float = False             # <<<<<<<<<<<<<<
 *         int i = 0
 *         # deref here is safe since Py_UNICODE* are NULL-terminated
 */
  __pyx_v_is_float = 0;

  /* "openstep_plist/parser.pyx":270
 *         bint maybe_number = True
 *         bint is_float = False
 *         int i = 0             # <<<<<<<<<<<<<<
 *         # deref here is safe since Py_UNICODE* are NULL-terminated
 *         Py_UNICODE ch = buf[i]
 */
  __pyx_v_i = 0;

  /* "openstep_plist/parser.pyx":272
 *         int i = 0
 *         # deref here is safe since Py_UNICODE* are NULL-terminated
 *         Py_UNICODE ch = buf[i]             # <<<<<<<<<<<<<<
 * 
 *     if ch == c'-':
 */
  __pyx_v_ch = (__pyx_v_buf[__pyx_v_i]);

  /* "openstep_plist/parser.pyx":274
 *         Py_UNICODE ch = buf[i]
 * 
 *     if ch == c'-':             # <<<<<<<<<<<<<<
 *         if length > 1:
 *             i += 1
 */
  __pyx_t_1 = ((__pyx_v_ch == '-') != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":275
 * 
 *     if ch == c'-':
 *         if length > 1:             # <<<<<<<<<<<<<<
 *             i += 1
 *             ch = buf[i]
 */
    __pyx_t_1 = ((__pyx_v_length > 1) != 0);
    if (__pyx_t_1) {

      /* "openstep_plist/parser.pyx":276
 *     if ch == c'-':
 *         if length > 1:
 *             i += 1             # <<<<<<<<<<<<<<
 *             ch = buf[i]
 *             if ch > c'9' or ch < c'0':
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "openstep_plist/parser.pyx":277
 *         if length > 1:
 *             i += 1
 *             ch = buf[i]             # <<<<<<<<<<<<<<
 *             if ch > c'9' or ch < c'0':
 *                 maybe_number = False
 */
      __pyx_v_ch = (__pyx_v_buf[__pyx_v_i]);

      /* "openstep_plist/parser.pyx":278
 *             i += 1
 *             ch = buf[i]
 *             if ch > c'9' or ch < c'0':             # <<<<<<<<<<<<<<
 *                 maybe_number = False
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_ch > '9') != 0);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L6_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_ch < '0') != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L6_bool_binop_done:;
      if (__pyx_t_1) {

        /* "openstep_plist/parser.pyx":279
 *             ch = buf[i]
 *             if ch > c'9' or ch < c'0':
 *                 maybe_number = False             # <<<<<<<<<<<<<<
 *         else:
 *             maybe_number = False
 */
        __pyx_v_maybe_number = 0;

        /* "openstep_plist/parser.pyx":278
 *             i += 1
 *             ch = buf[i]
 *             if ch > c'9' or ch < c'0':             # <<<<<<<<<<<<<<
 *                 maybe_number = False
 *         else:
 */
      }

      /* "openstep_plist/parser.pyx":275
 * 
 *     if ch == c'-':
 *         if length > 1:             # <<<<<<<<<<<<<<
 *             i += 1
 *             ch = buf[i]
 */
      goto __pyx_L4;
    }

    /* "openstep_plist/parser.pyx":281
 *                 maybe_number = False
 *         else:
 *             maybe_number = False             # <<<<<<<<<<<<<<
 *     elif ch > c'9' or ch < c'0':
 *         maybe_number = False
 */
    /*else*/ {
      __pyx_v_maybe_number = 0;
    }
    __pyx_L4:;

    /* "openstep_plist/parser.pyx":274
 *         Py_UNICODE ch = buf[i]
 * 
 *     if ch == c'-':             # <<<<<<<<<<<<<<
 *         if length > 1:
 *             i += 1
 */
    goto __pyx_L3;
  }

  /* "openstep_plist/parser.pyx":282
 *         else:
 *             maybe_number = False
 *     elif ch > c'9' or ch < c'0':             # <<<<<<<<<<<<<<
 *         maybe_number = False
 * 
 */
  __pyx_t_2 = ((__pyx_v_ch > '9') != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_ch < '0') != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":283
 *             maybe_number = False
 *     elif ch > c'9' or ch < c'0':
 *         maybe_number = False             # <<<<<<<<<<<<<<
 * 
 *     if maybe_number:
 */
    __pyx_v_maybe_number = 0;

    /* "openstep_plist/parser.pyx":282
 *         else:
 *             maybe_number = False
 *     elif ch > c'9' or ch < c'0':             # <<<<<<<<<<<<<<
 *         maybe_number = False
 * 
 */
  }
  __pyx_L3:;

  /* "openstep_plist/parser.pyx":285
 *         maybe_number = False
 * 
 *     if maybe_number:             # <<<<<<<<<<<<<<
 *         for i in range(i, length):
 *             ch = buf[i]
 */
  __pyx_t_1 = (__pyx_v_maybe_number != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":286
 * 
 *     if maybe_number:
 *         for i in range(i, length):             # <<<<<<<<<<<<<<
 *             ch = buf[i]
 *             if ch > c'9' or ch < c'.' or ch == c'/':
 */
    __pyx_t_3 = __pyx_v_length;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = __pyx_v_i; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "openstep_plist/parser.pyx":287
 *     if maybe_number:
 *         for i in range(i, length):
 *             ch = buf[i]             # <<<<<<<<<<<<<<
 *             if ch > c'9' or ch < c'.' or ch == c'/':
 *                 return UNQUOTED_STRING  # not a number
 */
      __pyx_v_ch = (__pyx_v_buf[__pyx_v_i]);

      /* "openstep_plist/parser.pyx":288
 *         for i in range(i, length):
 *             ch = buf[i]
 *             if ch > c'9' or ch < c'.' or ch == c'/':             # <<<<<<<<<<<<<<
 *                 return UNQUOTED_STRING  # not a number
 *             elif ch == c'.':
 */
      __pyx_t_2 = ((__pyx_v_ch > '9') != 0);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L14_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_ch < '.') != 0);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L14_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_ch == '/') != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L14_bool_binop_done:;
      if (__pyx_t_1) {

        /* "openstep_plist/parser.pyx":289
 *             ch = buf[i]
 *             if ch > c'9' or ch < c'.' or ch == c'/':
 *                 return UNQUOTED_STRING  # not a number             # <<<<<<<<<<<<<<
 *             elif ch == c'.':
 *                 if not is_float:
 */
        __pyx_r = __pyx_e_14openstep_plist_6parser_UNQUOTED_STRING;
        goto __pyx_L0;

        /* "openstep_plist/parser.pyx":288
 *         for i in range(i, length):
 *             ch = buf[i]
 *             if ch > c'9' or ch < c'.' or ch == c'/':             # <<<<<<<<<<<<<<
 *                 return UNQUOTED_STRING  # not a number
 *             elif ch == c'.':
 */
      }

      /* "openstep_plist/parser.pyx":290
 *             if ch > c'9' or ch < c'.' or ch == c'/':
 *                 return UNQUOTED_STRING  # not a number
 *             elif ch == c'.':             # <<<<<<<<<<<<<<
 *                 if not is_float:
 *                     is_float = True
 */
      __pyx_t_1 = ((__pyx_v_ch == '.') != 0);
      if (__pyx_t_1) {

        /* "openstep_plist/parser.pyx":291
 *                 return UNQUOTED_STRING  # not a number
 *             elif ch == c'.':
 *                 if not is_float:             # <<<<<<<<<<<<<<
 *                     is_float = True
 *                 else:
 */
        __pyx_t_1 = ((!(__pyx_v_is_float != 0)) != 0);
        if (__pyx_t_1) {

          /* "openstep_plist/parser.pyx":292
 *             elif ch == c'.':
 *                 if not is_float:
 *                     is_float = True             # <<<<<<<<<<<<<<
 *                 else:
 *                     # seen a second '.', it's not a float
 */
          __pyx_v_is_float = 1;

          /* "openstep_plist/parser.pyx":291
 *                 return UNQUOTED_STRING  # not a number
 *             elif ch == c'.':
 *                 if not is_float:             # <<<<<<<<<<<<<<
 *                     is_float = True
 *                 else:
 */
          goto __pyx_L17;
        }

        /* "openstep_plist/parser.pyx":295
 *                 else:
 *                     # seen a second '.', it's not a float
 *                     return UNQUOTED_STRING             # <<<<<<<<<<<<<<
 * 
 *         return UNQUOTED_FLOAT if is_float else UNQUOTED_INTEGER
 */
        /*else*/ {
          __pyx_r = __pyx_e_14openstep_plist_6parser_UNQUOTED_STRING;
          goto __pyx_L0;
        }
        __pyx_L17:;

        /* "openstep_plist/parser.pyx":290
 *             if ch > c'9' or ch < c'.' or ch == c'/':
 *                 return UNQUOTED_STRING  # not a number
 *             elif ch == c'.':             # <<<<<<<<<<<<<<
 *                 if not is_float:
 *                     is_float = True
 */
      }
    }

    /* "openstep_plist/parser.pyx":297
 *                     return UNQUOTED_STRING
 * 
 *         return UNQUOTED_FLOAT if is_float else UNQUOTED_INTEGER             # <<<<<<<<<<<<<<
 * 
 *     return UNQUOTED_STRING
 */
    if ((__pyx_v_is_float != 0)) {
      __pyx_t_6 = __pyx_e_14openstep_plist_6parser_UNQUOTED_FLOAT;
    } else {
      __pyx_t_6 = __pyx_e_14openstep_plist_6parser_UNQUOTED_INTEGER;
    }
    __pyx_r = __pyx_t_6;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":285
 *         maybe_number = False
 * 
 *     if maybe_number:             # <<<<<<<<<<<<<<
 *         for i in range(i, length):
 *             ch = buf[i]
 */
  }

  /* "openstep_plist/parser.pyx":299
 *         return UNQUOTED_FLOAT if is_float else UNQUOTED_INTEGER
 * 
 *     return UNQUOTED_STRING             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_e_14openstep_plist_6parser_UNQUOTED_STRING;
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":257
 * 
 * 
 * cdef UnquotedType get_unquoted_string_type(             # <<<<<<<<<<<<<<
 *     const Py_UNICODE *buf, Py_ssize_t length
 * ):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":302
 * 
 * 
 * cdef object parse_unquoted_plist_string(ParseInfo *pi, bint ensure_string=False):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const Py_UNICODE *mark = pi.curr
 */

static PyObject *__pyx_f_14openstep_plist_6parser_parse_unquoted_plist_string(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi, struct __pyx_opt_args_14openstep_plist_6parser_parse_unquoted_plist_string *__pyx_optional_args) {
  int __pyx_v_ensure_string = ((int)0);
  Py_UNICODE const *__pyx_v_mark;
  Py_UNICODE __pyx_v_ch;
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_v_s = 0;
  enum __pyx_t_14openstep_plist_6parser_UnquotedType __pyx_v_kind;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_UNICODE const *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_unquoted_plist_string", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_ensure_string = __pyx_optional_args->ensure_string;
    }
  }

  /* "openstep_plist/parser.pyx":304
 * cdef object parse_unquoted_plist_string(ParseInfo *pi, bint ensure_string=False):
 *     cdef:
 *         const Py_UNICODE *mark = pi.curr             # <<<<<<<<<<<<<<
 *         Py_UNICODE ch
 *         Py_ssize_t length, i
 */
  __pyx_t_1 = __pyx_v_pi->curr;
  __pyx_v_mark = __pyx_t_1;

  /* "openstep_plist/parser.pyx":310
 *         UnquotedType kind
 * 
 *     while pi.curr < pi.end:             # <<<<<<<<<<<<<<
 *         ch = pi.curr[0]
 *         if is_valid_unquoted_string_char(ch):
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_pi->curr < __pyx_v_pi->end) != 0);
    if (!__pyx_t_2) break;

    /* "openstep_plist/parser.pyx":311
 * 
 *     while pi.curr < pi.end:
 *         ch = pi.curr[0]             # <<<<<<<<<<<<<<
 *         if is_valid_unquoted_string_char(ch):
 *             pi.curr += 1
 */
    __pyx_v_ch = (__pyx_v_pi->curr[0]);

    /* "openstep_plist/parser.pyx":312
 *     while pi.curr < pi.end:
 *         ch = pi.curr[0]
 *         if is_valid_unquoted_string_char(ch):             # <<<<<<<<<<<<<<
 *             pi.curr += 1
 *         else:
 */
    __pyx_t_2 = (__pyx_f_14openstep_plist_4util_is_valid_unquoted_string_char(__pyx_v_ch) != 0);
    if (__pyx_t_2) {

      /* "openstep_plist/parser.pyx":313
 *         ch = pi.curr[0]
 *         if is_valid_unquoted_string_char(ch):
 *             pi.curr += 1             # <<<<<<<<<<<<<<
 *         else:
 *             break
 */
      __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

      /* "openstep_plist/parser.pyx":312
 *     while pi.curr < pi.end:
 *         ch = pi.curr[0]
 *         if is_valid_unquoted_string_char(ch):             # <<<<<<<<<<<<<<
 *             pi.curr += 1
 *         else:
 */
      goto __pyx_L5;
    }

    /* "openstep_plist/parser.pyx":315
 *             pi.curr += 1
 *         else:
 *             break             # <<<<<<<<<<<<<<
 *     if pi.curr != mark:
 *         length = pi.curr - mark
 */
    /*else*/ {
      goto __pyx_L4_break;
    }
    __pyx_L5:;
  }
  __pyx_L4_break:;

  /* "openstep_plist/parser.pyx":316
 *         else:
 *             break
 *     if pi.curr != mark:             # <<<<<<<<<<<<<<
 *         length = pi.curr - mark
 *         s = PyUnicode_FromUnicode(mark, length)
 */
  __pyx_t_2 = ((__pyx_v_pi->curr != __pyx_v_mark) != 0);
  if (__pyx_t_2) {

    /* "openstep_plist/parser.pyx":317
 *             break
 *     if pi.curr != mark:
 *         length = pi.curr - mark             # <<<<<<<<<<<<<<
 *         s = PyUnicode_FromUnicode(mark, length)
 * 
 */
    __pyx_v_length = (__pyx_v_pi->curr - __pyx_v_mark);

    /* "openstep_plist/parser.pyx":318
 *     if pi.curr != mark:
 *         length = pi.curr - mark
 *         s = PyUnicode_FromUnicode(mark, length)             # <<<<<<<<<<<<<<
 * 
 *         if not ensure_string and pi.use_numbers:
 */
    __pyx_t_3 = PyUnicode_FromUnicode(__pyx_v_mark, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_s = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "openstep_plist/parser.pyx":320
 *         s = PyUnicode_FromUnicode(mark, length)
 * 
 *         if not ensure_string and pi.use_numbers:             # <<<<<<<<<<<<<<
 *             kind = get_unquoted_string_type(mark, length)
 *             if kind == UNQUOTED_FLOAT:
 */
    __pyx_t_4 = ((!(__pyx_v_ensure_string != 0)) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_pi->use_numbers != 0);
    __pyx_t_2 = __pyx_t_4;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_2) {

      /* "openstep_plist/parser.pyx":321
 * 
 *         if not ensure_string and pi.use_numbers:
 *             kind = get_unquoted_string_type(mark, length)             # <<<<<<<<<<<<<<
 *             if kind == UNQUOTED_FLOAT:
 *                 return float(s)
 */
      __pyx_v_kind = __pyx_f_14openstep_plist_6parser_get_unquoted_string_type(__pyx_v_mark, __pyx_v_length);

      /* "openstep_plist/parser.pyx":322
 *         if not ensure_string and pi.use_numbers:
 *             kind = get_unquoted_string_type(mark, length)
 *             if kind == UNQUOTED_FLOAT:             # <<<<<<<<<<<<<<
 *                 return float(s)
 *             elif kind == UNQUOTED_INTEGER:
 */
      switch (__pyx_v_kind) {
        case __pyx_e_14openstep_plist_6parser_UNQUOTED_FLOAT:

        /* "openstep_plist/parser.pyx":323
 *             kind = get_unquoted_string_type(mark, length)
 *             if kind == UNQUOTED_FLOAT:
 *                 return float(s)             # <<<<<<<<<<<<<<
 *             elif kind == UNQUOTED_INTEGER:
 *                 return int(s)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyNumber_Float(__pyx_v_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "openstep_plist/parser.pyx":322
 *         if not ensure_string and pi.use_numbers:
 *             kind = get_unquoted_string_type(mark, length)
 *             if kind == UNQUOTED_FLOAT:             # <<<<<<<<<<<<<<
 *                 return float(s)
 *             elif kind == UNQUOTED_INTEGER:
 */
        break;
        case __pyx_e_14openstep_plist_6parser_UNQUOTED_INTEGER:

        /* "openstep_plist/parser.pyx":325
 *                 return float(s)
 *             elif kind == UNQUOTED_INTEGER:
 *                 return int(s)             # <<<<<<<<<<<<<<
 * 
 *         return s
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_v_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "openstep_plist/parser.pyx":324
 *             if kind == UNQUOTED_FLOAT:
 *                 return float(s)
 *             elif kind == UNQUOTED_INTEGER:             # <<<<<<<<<<<<<<
 *                 return int(s)
 * 
 */
        break;
        default: break;
      }

      /* "openstep_plist/parser.pyx":320
 *         s = PyUnicode_FromUnicode(mark, length)
 * 
 *         if not ensure_string and pi.use_numbers:             # <<<<<<<<<<<<<<
 *             kind = get_unquoted_string_type(mark, length)
 *             if kind == UNQUOTED_FLOAT:
 */
    }

    /* "openstep_plist/parser.pyx":327
 *                 return int(s)
 * 
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     raise ParseError("Unexpected EOF")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_s);
    __pyx_r = __pyx_v_s;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":316
 *         else:
 *             break
 *     if pi.curr != mark:             # <<<<<<<<<<<<<<
 *         length = pi.curr - mark
 *         s = PyUnicode_FromUnicode(mark, length)
 */
  }

  /* "openstep_plist/parser.pyx":329
 *         return s
 * 
 *     raise ParseError("Unexpected EOF")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 329, __pyx_L1_error)

  /* "openstep_plist/parser.pyx":302
 * 
 * 
 * cdef object parse_unquoted_plist_string(ParseInfo *pi, bint ensure_string=False):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const Py_UNICODE *mark = pi.curr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openstep_plist.parser.parse_unquoted_plist_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":332
 * 
 * 
 * cdef unicode parse_plist_string(ParseInfo *pi, bint required=True):             # <<<<<<<<<<<<<<
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):
 */

static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_string(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi, struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_string *__pyx_optional_args) {
  int __pyx_v_required = ((int)1);
  Py_UNICODE __pyx_v_ch;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_14openstep_plist_6parser_parse_unquoted_plist_string __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_plist_string", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_required = __pyx_optional_args->required;
    }
  }

  /* "openstep_plist/parser.pyx":334
 * cdef unicode parse_plist_string(ParseInfo *pi, bint required=True):
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):             # <<<<<<<<<<<<<<
 *         if required:
 *             raise ParseError("Unexpected EOF while parsing string")
 */
  __pyx_t_1 = ((!(__pyx_f_14openstep_plist_6parser_advance_to_non_space(__pyx_v_pi) != 0)) != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":335
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):
 *         if required:             # <<<<<<<<<<<<<<
 *             raise ParseError("Unexpected EOF while parsing string")
 *     ch = pi.curr[0]
 */
    __pyx_t_1 = (__pyx_v_required != 0);
    if (unlikely(__pyx_t_1)) {

      /* "openstep_plist/parser.pyx":336
 *     if not advance_to_non_space(pi):
 *         if required:
 *             raise ParseError("Unexpected EOF while parsing string")             # <<<<<<<<<<<<<<
 *     ch = pi.curr[0]
 *     if ch == c'\'' or ch == c'"':
 */
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 336, __pyx_L1_error)

      /* "openstep_plist/parser.pyx":335
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):
 *         if required:             # <<<<<<<<<<<<<<
 *             raise ParseError("Unexpected EOF while parsing string")
 *     ch = pi.curr[0]
 */
    }

    /* "openstep_plist/parser.pyx":334
 * cdef unicode parse_plist_string(ParseInfo *pi, bint required=True):
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):             # <<<<<<<<<<<<<<
 *         if required:
 *             raise ParseError("Unexpected EOF while parsing string")
 */
  }

  /* "openstep_plist/parser.pyx":337
 *         if required:
 *             raise ParseError("Unexpected EOF while parsing string")
 *     ch = pi.curr[0]             # <<<<<<<<<<<<<<
 *     if ch == c'\'' or ch == c'"':
 *         pi.curr += 1
 */
  __pyx_v_ch = (__pyx_v_pi->curr[0]);

  /* "openstep_plist/parser.pyx":338
 *             raise ParseError("Unexpected EOF while parsing string")
 *     ch = pi.curr[0]
 *     if ch == c'\'' or ch == c'"':             # <<<<<<<<<<<<<<
 *         pi.curr += 1
 *         return parse_quoted_plist_string(pi, ch)
 */
  switch (__pyx_v_ch) {
    case '\'':
    case '"':
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":339
 *     ch = pi.curr[0]
 *     if ch == c'\'' or ch == c'"':
 *         pi.curr += 1             # <<<<<<<<<<<<<<
 *         return parse_quoted_plist_string(pi, ch)
 *     elif is_valid_unquoted_string_char(ch):
 */
    __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

    /* "openstep_plist/parser.pyx":340
 *     if ch == c'\'' or ch == c'"':
 *         pi.curr += 1
 *         return parse_quoted_plist_string(pi, ch)             # <<<<<<<<<<<<<<
 *     elif is_valid_unquoted_string_char(ch):
 *         return parse_unquoted_plist_string(pi, ensure_string=True)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_14openstep_plist_6parser_parse_quoted_plist_string(__pyx_v_pi, __pyx_v_ch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":338
 *             raise ParseError("Unexpected EOF while parsing string")
 *     ch = pi.curr[0]
 *     if ch == c'\'' or ch == c'"':             # <<<<<<<<<<<<<<
 *         pi.curr += 1
 *         return parse_quoted_plist_string(pi, ch)
 */
  }

  /* "openstep_plist/parser.pyx":341
 *         pi.curr += 1
 *         return parse_quoted_plist_string(pi, ch)
 *     elif is_valid_unquoted_string_char(ch):             # <<<<<<<<<<<<<<
 *         return parse_unquoted_plist_string(pi, ensure_string=True)
 *     else:
 */
  __pyx_t_1 = (__pyx_f_14openstep_plist_4util_is_valid_unquoted_string_char(__pyx_v_ch) != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":342
 *         return parse_quoted_plist_string(pi, ch)
 *     elif is_valid_unquoted_string_char(ch):
 *         return parse_unquoted_plist_string(pi, ensure_string=True)             # <<<<<<<<<<<<<<
 *     else:
 *         if required:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3.__pyx_n = 1;
    __pyx_t_3.ensure_string = 1;
    __pyx_t_2 = __pyx_f_14openstep_plist_6parser_parse_unquoted_plist_string(__pyx_v_pi, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 342, __pyx_L1_error)
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":341
 *         pi.curr += 1
 *         return parse_quoted_plist_string(pi, ch)
 *     elif is_valid_unquoted_string_char(ch):             # <<<<<<<<<<<<<<
 *         return parse_unquoted_plist_string(pi, ensure_string=True)
 *     else:
 */
  }

  /* "openstep_plist/parser.pyx":344
 *         return parse_unquoted_plist_string(pi, ensure_string=True)
 *     else:
 *         if required:             # <<<<<<<<<<<<<<
 *             raise ParseError(
 *                 "Invalid string character at line %d: %r"
 */
  /*else*/ {
    __pyx_t_1 = (__pyx_v_required != 0);
    if (unlikely(__pyx_t_1)) {

      /* "openstep_plist/parser.pyx":346
 *         if required:
 *             raise ParseError(
 *                 "Invalid string character at line %d: %r"             # <<<<<<<<<<<<<<
 *                 % (line_number_strings(pi), ch)
 *             )
 */
      __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_string_character_at_line);
      __pyx_t_4 += 33;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_string_character_at_line);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Invalid_string_character_at_line);

      /* "openstep_plist/parser.pyx":347
 *             raise ParseError(
 *                 "Invalid string character at line %d: %r"
 *                 % (line_number_strings(pi), ch)             # <<<<<<<<<<<<<<
 *             )
 *     return None
 */
      __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_6), __pyx_n_u_d); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u__3);
      __pyx_t_4 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__3);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__3);
      __pyx_t_7 = PyUnicode_FromOrdinal(__pyx_v_ch); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_7), __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "openstep_plist/parser.pyx":346
 *         if required:
 *             raise ParseError(
 *                 "Invalid string character at line %d: %r"             # <<<<<<<<<<<<<<
 *                 % (line_number_strings(pi), ch)
 *             )
 */
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "openstep_plist/parser.pyx":345
 *     else:
 *         if required:
 *             raise ParseError(             # <<<<<<<<<<<<<<
 *                 "Invalid string character at line %d: %r"
 *                 % (line_number_strings(pi), ch)
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 345, __pyx_L1_error)

      /* "openstep_plist/parser.pyx":344
 *         return parse_unquoted_plist_string(pi, ensure_string=True)
 *     else:
 *         if required:             # <<<<<<<<<<<<<<
 *             raise ParseError(
 *                 "Invalid string character at line %d: %r"
 */
    }
  }

  /* "openstep_plist/parser.pyx":349
 *                 % (line_number_strings(pi), ch)
 *             )
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":332
 * 
 * 
 * cdef unicode parse_plist_string(ParseInfo *pi, bint required=True):             # <<<<<<<<<<<<<<
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("openstep_plist.parser.parse_plist_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":352
 * 
 * 
 * cdef list parse_plist_array(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     cdef list result = []
 *     cdef object tmp = parse_plist_object(pi, required=False)
 */

static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_array(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi) {
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_tmp = 0;
  int __pyx_v_found_char;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_object __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_plist_array", 0);

  /* "openstep_plist/parser.pyx":353
 * 
 * cdef list parse_plist_array(ParseInfo *pi):
 *     cdef list result = []             # <<<<<<<<<<<<<<
 *     cdef object tmp = parse_plist_object(pi, required=False)
 *     cdef bint found_char
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openstep_plist/parser.pyx":354
 * cdef list parse_plist_array(ParseInfo *pi):
 *     cdef list result = []
 *     cdef object tmp = parse_plist_object(pi, required=False)             # <<<<<<<<<<<<<<
 *     cdef bint found_char
 *     while tmp is not None:
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.required = 0;
  __pyx_t_1 = __pyx_f_14openstep_plist_6parser_parse_plist_object(__pyx_v_pi, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "openstep_plist/parser.pyx":356
 *     cdef object tmp = parse_plist_object(pi, required=False)
 *     cdef bint found_char
 *     while tmp is not None:             # <<<<<<<<<<<<<<
 *         result.append(tmp)
 *         found_char = advance_to_non_space(pi)
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_tmp != Py_None);
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) break;

    /* "openstep_plist/parser.pyx":357
 *     cdef bint found_char
 *     while tmp is not None:
 *         result.append(tmp)             # <<<<<<<<<<<<<<
 *         found_char = advance_to_non_space(pi)
 *         if not found_char:
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_tmp); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 357, __pyx_L1_error)

    /* "openstep_plist/parser.pyx":358
 *     while tmp is not None:
 *         result.append(tmp)
 *         found_char = advance_to_non_space(pi)             # <<<<<<<<<<<<<<
 *         if not found_char:
 *             raise ParseError(
 */
    __pyx_v_found_char = __pyx_f_14openstep_plist_6parser_advance_to_non_space(__pyx_v_pi);

    /* "openstep_plist/parser.pyx":359
 *         result.append(tmp)
 *         found_char = advance_to_non_space(pi)
 *         if not found_char:             # <<<<<<<<<<<<<<
 *             raise ParseError(
 *                 "Missing ',' for array at line %d" % line_number_strings(pi)
 */
    __pyx_t_4 = ((!(__pyx_v_found_char != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "openstep_plist/parser.pyx":361
 *         if not found_char:
 *             raise ParseError(
 *                 "Missing ',' for array at line %d" % line_number_strings(pi)             # <<<<<<<<<<<<<<
 *             )
 *         if pi.curr[0] != c',':
 */
      __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_Missing_for_array_at_line_d, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "openstep_plist/parser.pyx":360
 *         found_char = advance_to_non_space(pi)
 *         if not found_char:
 *             raise ParseError(             # <<<<<<<<<<<<<<
 *                 "Missing ',' for array at line %d" % line_number_strings(pi)
 *             )
 */
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 360, __pyx_L1_error)

      /* "openstep_plist/parser.pyx":359
 *         result.append(tmp)
 *         found_char = advance_to_non_space(pi)
 *         if not found_char:             # <<<<<<<<<<<<<<
 *             raise ParseError(
 *                 "Missing ',' for array at line %d" % line_number_strings(pi)
 */
    }

    /* "openstep_plist/parser.pyx":363
 *                 "Missing ',' for array at line %d" % line_number_strings(pi)
 *             )
 *         if pi.curr[0] != c',':             # <<<<<<<<<<<<<<
 *             tmp = None
 *         else:
 */
    __pyx_t_4 = (((__pyx_v_pi->curr[0]) != ',') != 0);
    if (__pyx_t_4) {

      /* "openstep_plist/parser.pyx":364
 *             )
 *         if pi.curr[0] != c',':
 *             tmp = None             # <<<<<<<<<<<<<<
 *         else:
 *             pi.curr += 1
 */
      __Pyx_INCREF(Py_None);
      __Pyx_DECREF_SET(__pyx_v_tmp, Py_None);

      /* "openstep_plist/parser.pyx":363
 *                 "Missing ',' for array at line %d" % line_number_strings(pi)
 *             )
 *         if pi.curr[0] != c',':             # <<<<<<<<<<<<<<
 *             tmp = None
 *         else:
 */
      goto __pyx_L6;
    }

    /* "openstep_plist/parser.pyx":366
 *             tmp = None
 *         else:
 *             pi.curr += 1             # <<<<<<<<<<<<<<
 *             tmp = parse_plist_object(pi, required=False)
 *     found_char = advance_to_non_space(pi)
 */
    /*else*/ {
      __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

      /* "openstep_plist/parser.pyx":367
 *         else:
 *             pi.curr += 1
 *             tmp = parse_plist_object(pi, required=False)             # <<<<<<<<<<<<<<
 *     found_char = advance_to_non_space(pi)
 *     if not found_char or pi.curr[0] != c')':
 */
      __pyx_t_2.__pyx_n = 1;
      __pyx_t_2.required = 0;
      __pyx_t_1 = __pyx_f_14openstep_plist_6parser_parse_plist_object(__pyx_v_pi, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_tmp, __pyx_t_1);
      __pyx_t_1 = 0;
    }
    __pyx_L6:;
  }

  /* "openstep_plist/parser.pyx":368
 *             pi.curr += 1
 *             tmp = parse_plist_object(pi, required=False)
 *     found_char = advance_to_non_space(pi)             # <<<<<<<<<<<<<<
 *     if not found_char or pi.curr[0] != c')':
 *         raise ParseError(
 */
  __pyx_v_found_char = __pyx_f_14openstep_plist_6parser_advance_to_non_space(__pyx_v_pi);

  /* "openstep_plist/parser.pyx":369
 *             tmp = parse_plist_object(pi, required=False)
 *     found_char = advance_to_non_space(pi)
 *     if not found_char or pi.curr[0] != c')':             # <<<<<<<<<<<<<<
 *         raise ParseError(
 *             "Expected terminating ')' for array at line %d" % line_number_strings(pi)
 */
  __pyx_t_3 = ((!(__pyx_v_found_char != 0)) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_3 = (((__pyx_v_pi->curr[0]) != ')') != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L8_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "openstep_plist/parser.pyx":371
 *     if not found_char or pi.curr[0] != c')':
 *         raise ParseError(
 *             "Expected terminating ')' for array at line %d" % line_number_strings(pi)             # <<<<<<<<<<<<<<
 *         )
 *     pi.curr += 1
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_Expected_terminating_for_array_a, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "openstep_plist/parser.pyx":370
 *     found_char = advance_to_non_space(pi)
 *     if not found_char or pi.curr[0] != c')':
 *         raise ParseError(             # <<<<<<<<<<<<<<
 *             "Expected terminating ')' for array at line %d" % line_number_strings(pi)
 *         )
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 370, __pyx_L1_error)

    /* "openstep_plist/parser.pyx":369
 *             tmp = parse_plist_object(pi, required=False)
 *     found_char = advance_to_non_space(pi)
 *     if not found_char or pi.curr[0] != c')':             # <<<<<<<<<<<<<<
 *         raise ParseError(
 *             "Expected terminating ')' for array at line %d" % line_number_strings(pi)
 */
  }

  /* "openstep_plist/parser.pyx":373
 *             "Expected terminating ')' for array at line %d" % line_number_strings(pi)
 *         )
 *     pi.curr += 1             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

  /* "openstep_plist/parser.pyx":374
 *         )
 *     pi.curr += 1
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":352
 * 
 * 
 * cdef list parse_plist_array(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     cdef list result = []
 *     cdef object tmp = parse_plist_object(pi, required=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("openstep_plist.parser.parse_plist_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":377
 * 
 * 
 * cdef object parse_plist_dict_content(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     cdef object dict_type = <object>pi.dict_type
 *     result = dict_type()
 */

static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_dict_content(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi) {
  PyObject *__pyx_v_dict_type = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_value = 0;
  int __pyx_v_found_char;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_string __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_object __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_UCS4 __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_plist_dict_content", 0);

  /* "openstep_plist/parser.pyx":378
 * 
 * cdef object parse_plist_dict_content(ParseInfo *pi):
 *     cdef object dict_type = <object>pi.dict_type             # <<<<<<<<<<<<<<
 *     result = dict_type()
 *     cdef object value
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_pi->dict_type);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_dict_type = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "openstep_plist/parser.pyx":379
 * cdef object parse_plist_dict_content(ParseInfo *pi):
 *     cdef object dict_type = <object>pi.dict_type
 *     result = dict_type()             # <<<<<<<<<<<<<<
 *     cdef object value
 *     cdef bint found_char
 */
  __Pyx_INCREF(__pyx_v_dict_type);
  __pyx_t_2 = __pyx_v_dict_type; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "openstep_plist/parser.pyx":382
 *     cdef object value
 *     cdef bint found_char
 *     cdef object key = parse_plist_string(pi, required=False)             # <<<<<<<<<<<<<<
 * 
 *     while key is not None:
 */
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.required = 0;
  __pyx_t_1 = __pyx_f_14openstep_plist_6parser_parse_plist_string(__pyx_v_pi, &__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_key = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "openstep_plist/parser.pyx":384
 *     cdef object key = parse_plist_string(pi, required=False)
 * 
 *     while key is not None:             # <<<<<<<<<<<<<<
 *         found_char = advance_to_non_space(pi)
 *         if not found_char:
 */
  while (1) {
    __pyx_t_5 = (__pyx_v_key != Py_None);
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (!__pyx_t_6) break;

    /* "openstep_plist/parser.pyx":385
 * 
 *     while key is not None:
 *         found_char = advance_to_non_space(pi)             # <<<<<<<<<<<<<<
 *         if not found_char:
 *             raise ParseError(
 */
    __pyx_v_found_char = __pyx_f_14openstep_plist_6parser_advance_to_non_space(__pyx_v_pi);

    /* "openstep_plist/parser.pyx":386
 *     while key is not None:
 *         found_char = advance_to_non_space(pi)
 *         if not found_char:             # <<<<<<<<<<<<<<
 *             raise ParseError(
 *                 "Missing ';' on line %d" % line_number_strings(pi)
 */
    __pyx_t_6 = ((!(__pyx_v_found_char != 0)) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "openstep_plist/parser.pyx":388
 *         if not found_char:
 *             raise ParseError(
 *                 "Missing ';' on line %d" % line_number_strings(pi)             # <<<<<<<<<<<<<<
 *             )
 * 
 */
      __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Missing_on_line_d, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "openstep_plist/parser.pyx":387
 *         found_char = advance_to_non_space(pi)
 *         if not found_char:
 *             raise ParseError(             # <<<<<<<<<<<<<<
 *                 "Missing ';' on line %d" % line_number_strings(pi)
 *             )
 */
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 387, __pyx_L1_error)

      /* "openstep_plist/parser.pyx":386
 *     while key is not None:
 *         found_char = advance_to_non_space(pi)
 *         if not found_char:             # <<<<<<<<<<<<<<
 *             raise ParseError(
 *                 "Missing ';' on line %d" % line_number_strings(pi)
 */
    }

    /* "openstep_plist/parser.pyx":391
 *             )
 * 
 *         if pi.curr[0] == c';':             # <<<<<<<<<<<<<<
 *             # This is a 'strings resource' file using the shortcut format,
 *             # although this check here really applies to all plists
 */
    __pyx_t_6 = (((__pyx_v_pi->curr[0]) == ';') != 0);
    if (__pyx_t_6) {

      /* "openstep_plist/parser.pyx":394
 *             # This is a 'strings resource' file using the shortcut format,
 *             # although this check here really applies to all plists
 *             value = key             # <<<<<<<<<<<<<<
 *         elif pi.curr[0] == c'=':
 *             pi.curr += 1
 */
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_v_key);

      /* "openstep_plist/parser.pyx":391
 *             )
 * 
 *         if pi.curr[0] == c';':             # <<<<<<<<<<<<<<
 *             # This is a 'strings resource' file using the shortcut format,
 *             # although this check here really applies to all plists
 */
      goto __pyx_L6;
    }

    /* "openstep_plist/parser.pyx":395
 *             # although this check here really applies to all plists
 *             value = key
 *         elif pi.curr[0] == c'=':             # <<<<<<<<<<<<<<
 *             pi.curr += 1
 *             value = parse_plist_object(pi, required=True)
 */
    __pyx_t_6 = (((__pyx_v_pi->curr[0]) == '=') != 0);
    if (likely(__pyx_t_6)) {

      /* "openstep_plist/parser.pyx":396
 *             value = key
 *         elif pi.curr[0] == c'=':
 *             pi.curr += 1             # <<<<<<<<<<<<<<
 *             value = parse_plist_object(pi, required=True)
 *         else:
 */
      __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

      /* "openstep_plist/parser.pyx":397
 *         elif pi.curr[0] == c'=':
 *             pi.curr += 1
 *             value = parse_plist_object(pi, required=True)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ParseError(
 */
      __pyx_t_7.__pyx_n = 1;
      __pyx_t_7.required = 1;
      __pyx_t_1 = __pyx_f_14openstep_plist_6parser_parse_plist_object(__pyx_v_pi, &__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "openstep_plist/parser.pyx":395
 *             # although this check here really applies to all plists
 *             value = key
 *         elif pi.curr[0] == c'=':             # <<<<<<<<<<<<<<
 *             pi.curr += 1
 *             value = parse_plist_object(pi, required=True)
 */
      goto __pyx_L6;
    }

    /* "openstep_plist/parser.pyx":399
 *             value = parse_plist_object(pi, required=True)
 *         else:
 *             raise ParseError(             # <<<<<<<<<<<<<<
 *                 "Unexpected character after key at line %d: %r"
 *                 % (line_number_strings(pi), pi.curr[0])
 */
    /*else*/ {

      /* "openstep_plist/parser.pyx":400
 *         else:
 *             raise ParseError(
 *                 "Unexpected character after key at line %d: %r"             # <<<<<<<<<<<<<<
 *                 % (line_number_strings(pi), pi.curr[0])
 *             )
 */
      __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = 0;
      __pyx_t_9 = 127;
      __Pyx_INCREF(__pyx_kp_u_Unexpected_character_after_key_a);
      __pyx_t_8 += 39;
      __Pyx_GIVEREF(__pyx_kp_u_Unexpected_character_after_key_a);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Unexpected_character_after_key_a);

      /* "openstep_plist/parser.pyx":401
 *             raise ParseError(
 *                 "Unexpected character after key at line %d: %r"
 *                 % (line_number_strings(pi), pi.curr[0])             # <<<<<<<<<<<<<<
 *             )
 *         result[key] = value
 */
      __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_2), __pyx_n_u_d); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u__3);
      __pyx_t_8 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__3);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__3);
      __pyx_t_3 = PyUnicode_FromOrdinal((__pyx_v_pi->curr[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_3), __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "openstep_plist/parser.pyx":400
 *         else:
 *             raise ParseError(
 *                 "Unexpected character after key at line %d: %r"             # <<<<<<<<<<<<<<
 *                 % (line_number_strings(pi), pi.curr[0])
 *             )
 */
      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "openstep_plist/parser.pyx":399
 *             value = parse_plist_object(pi, required=True)
 *         else:
 *             raise ParseError(             # <<<<<<<<<<<<<<
 *                 "Unexpected character after key at line %d: %r"
 *                 % (line_number_strings(pi), pi.curr[0])
 */
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 399, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "openstep_plist/parser.pyx":403
 *                 % (line_number_strings(pi), pi.curr[0])
 *             )
 *         result[key] = value             # <<<<<<<<<<<<<<
 *         key = None
 *         value = None
 */
    if (unlikely(PyObject_SetItem(__pyx_v_result, __pyx_v_key, __pyx_v_value) < 0)) __PYX_ERR(0, 403, __pyx_L1_error)

    /* "openstep_plist/parser.pyx":404
 *             )
 *         result[key] = value
 *         key = None             # <<<<<<<<<<<<<<
 *         value = None
 *         found_char = advance_to_non_space(pi)
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_key, Py_None);

    /* "openstep_plist/parser.pyx":405
 *         result[key] = value
 *         key = None
 *         value = None             # <<<<<<<<<<<<<<
 *         found_char = advance_to_non_space(pi)
 *         if found_char and pi.curr[0] == c';':
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_value, Py_None);

    /* "openstep_plist/parser.pyx":406
 *         key = None
 *         value = None
 *         found_char = advance_to_non_space(pi)             # <<<<<<<<<<<<<<
 *         if found_char and pi.curr[0] == c';':
 *             pi.curr += 1
 */
    __pyx_v_found_char = __pyx_f_14openstep_plist_6parser_advance_to_non_space(__pyx_v_pi);

    /* "openstep_plist/parser.pyx":407
 *         value = None
 *         found_char = advance_to_non_space(pi)
 *         if found_char and pi.curr[0] == c';':             # <<<<<<<<<<<<<<
 *             pi.curr += 1
 *             key = parse_plist_string(pi, required=False)
 */
    __pyx_t_5 = (__pyx_v_found_char != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_5 = (((__pyx_v_pi->curr[0]) == ';') != 0);
    __pyx_t_6 = __pyx_t_5;
    __pyx_L8_bool_binop_done:;
    if (likely(__pyx_t_6)) {

      /* "openstep_plist/parser.pyx":408
 *         found_char = advance_to_non_space(pi)
 *         if found_char and pi.curr[0] == c';':
 *             pi.curr += 1             # <<<<<<<<<<<<<<
 *             key = parse_plist_string(pi, required=False)
 *         else:
 */
      __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

      /* "openstep_plist/parser.pyx":409
 *         if found_char and pi.curr[0] == c';':
 *             pi.curr += 1
 *             key = parse_plist_string(pi, required=False)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ParseError("Missing ';' on line %d" % line_number_strings(pi))
 */
      __pyx_t_4.__pyx_n = 1;
      __pyx_t_4.required = 0;
      __pyx_t_1 = __pyx_f_14openstep_plist_6parser_parse_plist_string(__pyx_v_pi, &__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "openstep_plist/parser.pyx":407
 *         value = None
 *         found_char = advance_to_non_space(pi)
 *         if found_char and pi.curr[0] == c';':             # <<<<<<<<<<<<<<
 *             pi.curr += 1
 *             key = parse_plist_string(pi, required=False)
 */
      goto __pyx_L7;
    }

    /* "openstep_plist/parser.pyx":411
 *             key = parse_plist_string(pi, required=False)
 *         else:
 *             raise ParseError("Missing ';' on line %d" % line_number_strings(pi))             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Missing_on_line_d, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 411, __pyx_L1_error)
    }
    __pyx_L7:;
  }

  /* "openstep_plist/parser.pyx":413
 *             raise ParseError("Missing ';' on line %d" % line_number_strings(pi))
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":377
 * 
 * 
 * cdef object parse_plist_dict_content(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     cdef object dict_type = <object>pi.dict_type
 *     result = dict_type()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openstep_plist.parser.parse_plist_dict_content", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dict_type);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":416
 * 
 * 
 * cdef object parse_plist_dict(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     result = parse_plist_dict_content(pi)
 *     if not advance_to_non_space(pi) or pi.curr[0] != c'}':
 */

static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_dict(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_plist_dict", 0);

  /* "openstep_plist/parser.pyx":417
 * 
 * cdef object parse_plist_dict(ParseInfo *pi):
 *     result = parse_plist_dict_content(pi)             # <<<<<<<<<<<<<<
 *     if not advance_to_non_space(pi) or pi.curr[0] != c'}':
 *         raise ParseError(
 */
  __pyx_t_1 = __pyx_f_14openstep_plist_6parser_parse_plist_dict_content(__pyx_v_pi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "openstep_plist/parser.pyx":418
 * cdef object parse_plist_dict(ParseInfo *pi):
 *     result = parse_plist_dict_content(pi)
 *     if not advance_to_non_space(pi) or pi.curr[0] != c'}':             # <<<<<<<<<<<<<<
 *         raise ParseError(
 *             "Expected terminating '}' for dictionary at line %d"
 */
  __pyx_t_3 = ((!(__pyx_f_14openstep_plist_6parser_advance_to_non_space(__pyx_v_pi) != 0)) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
__pyx_t_3 = (((__pyx_v_pi->curr[0]) != '}') != 0);
__pyx_t_2 = __pyx_t_3;
__pyx_L4_bool_binop_done:;
if (unlikely(__pyx_t_2)) {

  /* "openstep_plist/parser.pyx":421
 *         raise ParseError(
 *             "Expected terminating '}' for dictionary at line %d"
 *             % line_number_strings(pi)             # <<<<<<<<<<<<<<
 *         )
 *     pi.curr += 1
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_Expected_terminating_for_diction, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openstep_plist/parser.pyx":419
 *     result = parse_plist_dict_content(pi)
 *     if not advance_to_non_space(pi) or pi.curr[0] != c'}':
 *         raise ParseError(             # <<<<<<<<<<<<<<
 *             "Expected terminating '}' for dictionary at line %d"
 *             % line_number_strings(pi)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 419, __pyx_L1_error)

  /* "openstep_plist/parser.pyx":418
 * cdef object parse_plist_dict(ParseInfo *pi):
 *     result = parse_plist_dict_content(pi)
 *     if not advance_to_non_space(pi) or pi.curr[0] != c'}':             # <<<<<<<<<<<<<<
 *         raise ParseError(
 *             "Expected terminating '}' for dictionary at line %d"
 */
}

/* "openstep_plist/parser.pyx":423
 *             % line_number_strings(pi)
 *         )
 *     pi.curr += 1             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
__pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

/* "openstep_plist/parser.pyx":424
 *         )
 *     pi.curr += 1
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "openstep_plist/parser.pyx":416
 * 
 * 
 * cdef object parse_plist_dict(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     result = parse_plist_dict_content(pi)
 *     if not advance_to_non_space(pi) or pi.curr[0] != c'}':
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_4);
__Pyx_AddTraceback("openstep_plist.parser.parse_plist_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "openstep_plist/parser.pyx":427
 * 
 * 
 * cdef inline unsigned char from_hex_digit(unsigned char ch):             # <<<<<<<<<<<<<<
 *     if isdigit(ch):
 *         return ch - c'0'
 */

static CYTHON_INLINE unsigned char __pyx_f_14openstep_plist_6parser_from_hex_digit(unsigned char __pyx_v_ch) {
unsigned char __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
int __pyx_t_2;
__Pyx_RefNannySetupContext("from_hex_digit", 0);

/* "openstep_plist/parser.pyx":428
 * 
 * cdef inline unsigned char from_hex_digit(unsigned char ch):
 *     if isdigit(ch):             # <<<<<<<<<<<<<<
 *         return ch - c'0'
 *     if ch >= c'a' and ch <= c'f':
 */
__pyx_t_1 = (isdigit(__pyx_v_ch) != 0);
if (__pyx_t_1) {

  /* "openstep_plist/parser.pyx":429
 * cdef inline unsigned char from_hex_digit(unsigned char ch):
 *     if isdigit(ch):
 *         return ch - c'0'             # <<<<<<<<<<<<<<
 *     if ch >= c'a' and ch <= c'f':
 *         return ch - c'a' + 10
 */
  __pyx_r = (__pyx_v_ch - '0');
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":428
 * 
 * cdef inline unsigned char from_hex_digit(unsigned char ch):
 *     if isdigit(ch):             # <<<<<<<<<<<<<<
 *         return ch - c'0'
 *     if ch >= c'a' and ch <= c'f':
 */
}

/* "openstep_plist/parser.pyx":430
 *     if isdigit(ch):
 *         return ch - c'0'
 *     if ch >= c'a' and ch <= c'f':             # <<<<<<<<<<<<<<
 *         return ch - c'a' + 10
 *     elif ch >= c'A' and ch <= c'F':
 */
__pyx_t_2 = ((__pyx_v_ch >= 'a') != 0);
if (__pyx_t_2) {
} else {
  __pyx_t_1 = __pyx_t_2;
  goto __pyx_L5_bool_binop_done;
}
__pyx_t_2 = ((__pyx_v_ch <= 'f') != 0);
__pyx_t_1 = __pyx_t_2;
__pyx_L5_bool_binop_done:;
if (__pyx_t_1) {

  /* "openstep_plist/parser.pyx":431
 *         return ch - c'0'
 *     if ch >= c'a' and ch <= c'f':
 *         return ch - c'a' + 10             # <<<<<<<<<<<<<<
 *     elif ch >= c'A' and ch <= c'F':
 *         return ch - c'A' + 10
 */
  __pyx_r = ((__pyx_v_ch - 'a') + 10);
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":430
 *     if isdigit(ch):
 *         return ch - c'0'
 *     if ch >= c'a' and ch <= c'f':             # <<<<<<<<<<<<<<
 *         return ch - c'a' + 10
 *     elif ch >= c'A' and ch <= c'F':
 */
}

/* "openstep_plist/parser.pyx":432
 *     if ch >= c'a' and ch <= c'f':
 *         return ch - c'a' + 10
 *     elif ch >= c'A' and ch <= c'F':             # <<<<<<<<<<<<<<
 *         return ch - c'A' + 10
 *     return 0xff  # Just choose a large number for the error code
 */
__pyx_t_2 = ((__pyx_v_ch >= 'A') != 0);
if (__pyx_t_2) {
} else {
  __pyx_t_1 = __pyx_t_2;
  goto __pyx_L7_bool_binop_done;
}
__pyx_t_2 = ((__pyx_v_ch <= 'F') != 0);
__pyx_t_1 = __pyx_t_2;
__pyx_L7_bool_binop_done:;
if (__pyx_t_1) {

  /* "openstep_plist/parser.pyx":433
 *         return ch - c'a' + 10
 *     elif ch >= c'A' and ch <= c'F':
 *         return ch - c'A' + 10             # <<<<<<<<<<<<<<
 *     return 0xff  # Just choose a large number for the error code
 * 
 */
  __pyx_r = ((__pyx_v_ch - 'A') + 10);
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":432
 *     if ch >= c'a' and ch <= c'f':
 *         return ch - c'a' + 10
 *     elif ch >= c'A' and ch <= c'F':             # <<<<<<<<<<<<<<
 *         return ch - c'A' + 10
 *     return 0xff  # Just choose a large number for the error code
 */
}

/* "openstep_plist/parser.pyx":434
 *     elif ch >= c'A' and ch <= c'F':
 *         return ch - c'A' + 10
 *     return 0xff  # Just choose a large number for the error code             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 0xff;
goto __pyx_L0;

/* "openstep_plist/parser.pyx":427
 * 
 * 
 * cdef inline unsigned char from_hex_digit(unsigned char ch):             # <<<<<<<<<<<<<<
 *     if isdigit(ch):
 *         return ch - c'0'
 */

/* function exit code */
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "openstep_plist/parser.pyx":437
 * 
 * 
 * cdef int get_data_bytes(ParseInfo *pi, vector[unsigned char]& result) except -1:             # <<<<<<<<<<<<<<
 *     cdef unsigned char first, second
 *     cdef int num_bytes_read = 0
 */

static int __pyx_f_14openstep_plist_6parser_get_data_bytes(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi, std::vector<unsigned char>  &__pyx_v_result) {
unsigned char __pyx_v_first;
unsigned char __pyx_v_second;
CYTHON_UNUSED int __pyx_v_num_bytes_read;
Py_UNICODE __pyx_v_ch1;
Py_UNICODE __pyx_v_ch2;
int __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
Py_ssize_t __pyx_t_4;
Py_UCS4 __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("get_data_bytes", 0);

/* "openstep_plist/parser.pyx":439
 * cdef int get_data_bytes(ParseInfo *pi, vector[unsigned char]& result) except -1:
 *     cdef unsigned char first, second
 *     cdef int num_bytes_read = 0             # <<<<<<<<<<<<<<
 *     cdef Py_UNICODE ch1, ch2
 *     while pi.curr < pi.end:
 */
__pyx_v_num_bytes_read = 0;

/* "openstep_plist/parser.pyx":441
 *     cdef int num_bytes_read = 0
 *     cdef Py_UNICODE ch1, ch2
 *     while pi.curr < pi.end:             # <<<<<<<<<<<<<<
 *         ch1 = pi.curr[0]
 *         if ch1 == c'>':
 */
while (1) {
  __pyx_t_1 = ((__pyx_v_pi->curr < __pyx_v_pi->end) != 0);
  if (!__pyx_t_1) break;

  /* "openstep_plist/parser.pyx":442
 *     cdef Py_UNICODE ch1, ch2
 *     while pi.curr < pi.end:
 *         ch1 = pi.curr[0]             # <<<<<<<<<<<<<<
 *         if ch1 == c'>':
 *             return 0
 */
  __pyx_v_ch1 = (__pyx_v_pi->curr[0]);

  /* "openstep_plist/parser.pyx":443
 *     while pi.curr < pi.end:
 *         ch1 = pi.curr[0]
 *         if ch1 == c'>':             # <<<<<<<<<<<<<<
 *             return 0
 *         first = from_hex_digit(<unsigned char>ch1)
 */
  __pyx_t_1 = ((__pyx_v_ch1 == '>') != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":444
 *         ch1 = pi.curr[0]
 *         if ch1 == c'>':
 *             return 0             # <<<<<<<<<<<<<<
 *         first = from_hex_digit(<unsigned char>ch1)
 *         if first != 0xff:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":443
 *     while pi.curr < pi.end:
 *         ch1 = pi.curr[0]
 *         if ch1 == c'>':             # <<<<<<<<<<<<<<
 *             return 0
 *         first = from_hex_digit(<unsigned char>ch1)
 */
  }

  /* "openstep_plist/parser.pyx":445
 *         if ch1 == c'>':
 *             return 0
 *         first = from_hex_digit(<unsigned char>ch1)             # <<<<<<<<<<<<<<
 *         if first != 0xff:
 *             # if the first char is a hex, then try to read a second hex
 */
  __pyx_v_first = __pyx_f_14openstep_plist_6parser_from_hex_digit(((unsigned char)__pyx_v_ch1));

  /* "openstep_plist/parser.pyx":446
 *             return 0
 *         first = from_hex_digit(<unsigned char>ch1)
 *         if first != 0xff:             # <<<<<<<<<<<<<<
 *             # if the first char is a hex, then try to read a second hex
 *             pi.curr += 1
 */
  __pyx_t_1 = ((__pyx_v_first != 0xff) != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":448
 *         if first != 0xff:
 *             # if the first char is a hex, then try to read a second hex
 *             pi.curr += 1             # <<<<<<<<<<<<<<
 *             if pi.curr >= pi.end:
 *                 raise ParseError(
 */
    __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

    /* "openstep_plist/parser.pyx":449
 *             # if the first char is a hex, then try to read a second hex
 *             pi.curr += 1
 *             if pi.curr >= pi.end:             # <<<<<<<<<<<<<<
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: uneven length"
 */
    __pyx_t_1 = ((__pyx_v_pi->curr >= __pyx_v_pi->end) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "openstep_plist/parser.pyx":452
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: uneven length"
 *                     % line_number_strings(pi)             # <<<<<<<<<<<<<<
 *                 )
 *             ch2 = pi.curr[0]
 */
      __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_Malformed_data_byte_group_at_lin, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 452, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "openstep_plist/parser.pyx":450
 *             pi.curr += 1
 *             if pi.curr >= pi.end:
 *                 raise ParseError(             # <<<<<<<<<<<<<<
 *                     "Malformed data byte group at line %d: uneven length"
 *                     % line_number_strings(pi)
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 450, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 450, __pyx_L1_error)

      /* "openstep_plist/parser.pyx":449
 *             # if the first char is a hex, then try to read a second hex
 *             pi.curr += 1
 *             if pi.curr >= pi.end:             # <<<<<<<<<<<<<<
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: uneven length"
 */
    }

    /* "openstep_plist/parser.pyx":454
 *                     % line_number_strings(pi)
 *                 )
 *             ch2 = pi.curr[0]             # <<<<<<<<<<<<<<
 *             if ch2 == c'>':
 *                 raise ParseError(
 */
    __pyx_v_ch2 = (__pyx_v_pi->curr[0]);

    /* "openstep_plist/parser.pyx":455
 *                 )
 *             ch2 = pi.curr[0]
 *             if ch2 == c'>':             # <<<<<<<<<<<<<<
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: uneven length"
 */
    __pyx_t_1 = ((__pyx_v_ch2 == '>') != 0);
    if (unlikely(__pyx_t_1)) {

      /* "openstep_plist/parser.pyx":458
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: uneven length"
 *                     % line_number_strings(pi)             # <<<<<<<<<<<<<<
 *                 )
 *             second = from_hex_digit(<unsigned char>ch2)
 */
      __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_Malformed_data_byte_group_at_lin, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 458, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "openstep_plist/parser.pyx":456
 *             ch2 = pi.curr[0]
 *             if ch2 == c'>':
 *                 raise ParseError(             # <<<<<<<<<<<<<<
 *                     "Malformed data byte group at line %d: uneven length"
 *                     % line_number_strings(pi)
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 456, __pyx_L1_error)

      /* "openstep_plist/parser.pyx":455
 *                 )
 *             ch2 = pi.curr[0]
 *             if ch2 == c'>':             # <<<<<<<<<<<<<<
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: uneven length"
 */
    }

    /* "openstep_plist/parser.pyx":460
 *                     % line_number_strings(pi)
 *                 )
 *             second = from_hex_digit(<unsigned char>ch2)             # <<<<<<<<<<<<<<
 *             if second == 0xff:
 *                 raise ParseError(
 */
    __pyx_v_second = __pyx_f_14openstep_plist_6parser_from_hex_digit(((unsigned char)__pyx_v_ch2));

    /* "openstep_plist/parser.pyx":461
 *                 )
 *             second = from_hex_digit(<unsigned char>ch2)
 *             if second == 0xff:             # <<<<<<<<<<<<<<
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: invalid hex digit: %r"
 */
    __pyx_t_1 = ((__pyx_v_second == 0xff) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "openstep_plist/parser.pyx":463
 *             if second == 0xff:
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: invalid hex digit: %r"             # <<<<<<<<<<<<<<
 *                     % (line_number_strings(pi), ch2)
 *             )
 */
      __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_Malformed_data_byte_group_at_lin_2);
      __pyx_t_4 += 34;
      __Pyx_GIVEREF(__pyx_kp_u_Malformed_data_byte_group_at_lin_2);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Malformed_data_byte_group_at_lin_2);

      /* "openstep_plist/parser.pyx":464
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: invalid hex digit: %r"
 *                     % (line_number_strings(pi), ch2)             # <<<<<<<<<<<<<<
 *             )
 *             result.push_back((first << 4) + second)
 */
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_3), __pyx_n_u_d); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_invalid_hex_digit);
      __pyx_t_4 += 21;
      __Pyx_GIVEREF(__pyx_kp_u_invalid_hex_digit);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_invalid_hex_digit);
      __pyx_t_6 = PyUnicode_FromOrdinal(__pyx_v_ch2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_6), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_5;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "openstep_plist/parser.pyx":463
 *             if second == 0xff:
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: invalid hex digit: %r"             # <<<<<<<<<<<<<<
 *                     % (line_number_strings(pi), ch2)
 *             )
 */
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "openstep_plist/parser.pyx":462
 *             second = from_hex_digit(<unsigned char>ch2)
 *             if second == 0xff:
 *                 raise ParseError(             # <<<<<<<<<<<<<<
 *                     "Malformed data byte group at line %d: invalid hex digit: %r"
 *                     % (line_number_strings(pi), ch2)
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 462, __pyx_L1_error)

      /* "openstep_plist/parser.pyx":461
 *                 )
 *             second = from_hex_digit(<unsigned char>ch2)
 *             if second == 0xff:             # <<<<<<<<<<<<<<
 *                 raise ParseError(
 *                     "Malformed data byte group at line %d: invalid hex digit: %r"
 */
    }

    /* "openstep_plist/parser.pyx":466
 *                     % (line_number_strings(pi), ch2)
 *             )
 *             result.push_back((first << 4) + second)             # <<<<<<<<<<<<<<
 *             pi.curr += 1
 *         elif (
 */
    try {
      __pyx_v_result.push_back(((__pyx_v_first << 4) + __pyx_v_second));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 466, __pyx_L1_error)
    }

    /* "openstep_plist/parser.pyx":467
 *             )
 *             result.push_back((first << 4) + second)
 *             pi.curr += 1             # <<<<<<<<<<<<<<
 *         elif (
 *             ch1 == c' ' or
 */
    __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

    /* "openstep_plist/parser.pyx":446
 *             return 0
 *         first = from_hex_digit(<unsigned char>ch1)
 *         if first != 0xff:             # <<<<<<<<<<<<<<
 *             # if the first char is a hex, then try to read a second hex
 *             pi.curr += 1
 */
    goto __pyx_L6;
  }

  /* "openstep_plist/parser.pyx":469
 *             pi.curr += 1
 *         elif (
 *             ch1 == c' ' or             # <<<<<<<<<<<<<<
 *             ch1 == c'\n' or
 *             ch1 == c'\t' or
 */
  switch (__pyx_v_ch1) {
    case ' ':
    case '\n':

    /* "openstep_plist/parser.pyx":470
 *         elif (
 *             ch1 == c' ' or
 *             ch1 == c'\n' or             # <<<<<<<<<<<<<<
 *             ch1 == c'\t' or
 *             ch1 == c'\r' or
 */
    case '\t':

    /* "openstep_plist/parser.pyx":471
 *             ch1 == c' ' or
 *             ch1 == c'\n' or
 *             ch1 == c'\t' or             # <<<<<<<<<<<<<<
 *             ch1 == c'\r' or
 *             ch1 == 0x2028 or
 */
    case '\r':

    /* "openstep_plist/parser.pyx":472
 *             ch1 == c'\n' or
 *             ch1 == c'\t' or
 *             ch1 == c'\r' or             # <<<<<<<<<<<<<<
 *             ch1 == 0x2028 or
 *             ch1 == 0x2029
 */
    case 0x2028:

    /* "openstep_plist/parser.pyx":473
 *             ch1 == c'\t' or
 *             ch1 == c'\r' or
 *             ch1 == 0x2028 or             # <<<<<<<<<<<<<<
 *             ch1 == 0x2029
 *         ):
 */
    case 0x2029:

    /* "openstep_plist/parser.pyx":469
 *             pi.curr += 1
 *         elif (
 *             ch1 == c' ' or             # <<<<<<<<<<<<<<
 *             ch1 == c'\n' or
 *             ch1 == c'\t' or
 */
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }

  /* "openstep_plist/parser.pyx":468
 *             result.push_back((first << 4) + second)
 *             pi.curr += 1
 *         elif (             # <<<<<<<<<<<<<<
 *             ch1 == c' ' or
 *             ch1 == c'\n' or
 */
  if (likely(__pyx_t_1)) {

    /* "openstep_plist/parser.pyx":476
 *             ch1 == 0x2029
 *         ):
 *             pi.curr += 1             # <<<<<<<<<<<<<<
 *         else:
 *             raise ParseError(
 */
    __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

    /* "openstep_plist/parser.pyx":468
 *             result.push_back((first << 4) + second)
 *             pi.curr += 1
 *         elif (             # <<<<<<<<<<<<<<
 *             ch1 == c' ' or
 *             ch1 == c'\n' or
 */
    goto __pyx_L6;
  }

  /* "openstep_plist/parser.pyx":478
 *             pi.curr += 1
 *         else:
 *             raise ParseError(             # <<<<<<<<<<<<<<
 *                 "Malformed data byte group at line %d: invalid hex digit: %r"
 *                 % (line_number_strings(pi), ch1)
 */
  /*else*/ {

    /* "openstep_plist/parser.pyx":479
 *         else:
 *             raise ParseError(
 *                 "Malformed data byte group at line %d: invalid hex digit: %r"             # <<<<<<<<<<<<<<
 *                 % (line_number_strings(pi), ch1)
 *             )
 */
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Malformed_data_byte_group_at_lin_2);
    __pyx_t_4 += 34;
    __Pyx_GIVEREF(__pyx_kp_u_Malformed_data_byte_group_at_lin_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Malformed_data_byte_group_at_lin_2);

    /* "openstep_plist/parser.pyx":480
 *             raise ParseError(
 *                 "Malformed data byte group at line %d: invalid hex digit: %r"
 *                 % (line_number_strings(pi), ch1)             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_3), __pyx_n_u_d); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_invalid_hex_digit);
    __pyx_t_4 += 21;
    __Pyx_GIVEREF(__pyx_kp_u_invalid_hex_digit);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_invalid_hex_digit);
    __pyx_t_6 = PyUnicode_FromOrdinal(__pyx_v_ch1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_6), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "openstep_plist/parser.pyx":479
 *         else:
 *             raise ParseError(
 *                 "Malformed data byte group at line %d: invalid hex digit: %r"             # <<<<<<<<<<<<<<
 *                 % (line_number_strings(pi), ch1)
 *             )
 */
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "openstep_plist/parser.pyx":478
 *             pi.curr += 1
 *         else:
 *             raise ParseError(             # <<<<<<<<<<<<<<
 *                 "Malformed data byte group at line %d: invalid hex digit: %r"
 *                 % (line_number_strings(pi), ch1)
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 478, __pyx_L1_error)
  }
  __pyx_L6:;
}

/* "openstep_plist/parser.pyx":437
 * 
 * 
 * cdef int get_data_bytes(ParseInfo *pi, vector[unsigned char]& result) except -1:             # <<<<<<<<<<<<<<
 *     cdef unsigned char first, second
 *     cdef int num_bytes_read = 0
 */

/* function exit code */
__pyx_r = 0;
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_AddTraceback("openstep_plist.parser.get_data_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "openstep_plist/parser.pyx":484
 * 
 * 
 * cdef bytes parse_plist_data(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     cdef vector[unsigned char] data
 *     get_data_bytes(pi, data)
 */

static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_data(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi) {
std::vector<unsigned char>  __pyx_v_data;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
int __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
PyObject *__pyx_t_4 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("parse_plist_data", 0);

/* "openstep_plist/parser.pyx":486
 * cdef bytes parse_plist_data(ParseInfo *pi):
 *     cdef vector[unsigned char] data
 *     get_data_bytes(pi, data)             # <<<<<<<<<<<<<<
 *     if pi.curr[0] == c">":
 *         pi.curr += 1  # move past '>'
 */
__pyx_t_1 = __pyx_f_14openstep_plist_6parser_get_data_bytes(__pyx_v_pi, __pyx_v_data); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 486, __pyx_L1_error)

/* "openstep_plist/parser.pyx":487
 *     cdef vector[unsigned char] data
 *     get_data_bytes(pi, data)
 *     if pi.curr[0] == c">":             # <<<<<<<<<<<<<<
 *         pi.curr += 1  # move past '>'
 *         return PyBytes_FromStringAndSize(<const char*>data.const_data(), data.size())
 */
__pyx_t_2 = (((__pyx_v_pi->curr[0]) == '>') != 0);
if (likely(__pyx_t_2)) {

  /* "openstep_plist/parser.pyx":488
 *     get_data_bytes(pi, data)
 *     if pi.curr[0] == c">":
 *         pi.curr += 1  # move past '>'             # <<<<<<<<<<<<<<
 *         return PyBytes_FromStringAndSize(<const char*>data.const_data(), data.size())
 *     else:
 */
  __pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

  /* "openstep_plist/parser.pyx":489
 *     if pi.curr[0] == c">":
 *         pi.curr += 1  # move past '>'
 *         return PyBytes_FromStringAndSize(<const char*>data.const_data(), data.size())             # <<<<<<<<<<<<<<
 *     else:
 *         raise ParseError(
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromStringAndSize(((char const *)__pyx_v_data.data()), __pyx_v_data.size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":487
 *     cdef vector[unsigned char] data
 *     get_data_bytes(pi, data)
 *     if pi.curr[0] == c">":             # <<<<<<<<<<<<<<
 *         pi.curr += 1  # move past '>'
 *         return PyBytes_FromStringAndSize(<const char*>data.const_data(), data.size())
 */
}

/* "openstep_plist/parser.pyx":491
 *         return PyBytes_FromStringAndSize(<const char*>data.const_data(), data.size())
 *     else:
 *         raise ParseError(             # <<<<<<<<<<<<<<
 *             "Expected terminating '>' for data at line %d"
 *             % line_number_strings(pi)
 */
/*else*/ {

  /* "openstep_plist/parser.pyx":493
 *         raise ParseError(
 *             "Expected terminating '>' for data at line %d"
 *             % line_number_strings(pi)             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_Expected_terminating_for_data_at, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "openstep_plist/parser.pyx":491
 *         return PyBytes_FromStringAndSize(<const char*>data.const_data(), data.size())
 *     else:
 *         raise ParseError(             # <<<<<<<<<<<<<<
 *             "Expected terminating '>' for data at line %d"
 *             % line_number_strings(pi)
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 491, __pyx_L1_error)
}

/* "openstep_plist/parser.pyx":484
 * 
 * 
 * cdef bytes parse_plist_data(ParseInfo *pi):             # <<<<<<<<<<<<<<
 *     cdef vector[unsigned char] data
 *     get_data_bytes(pi, data)
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_XDECREF(__pyx_t_4);
__Pyx_AddTraceback("openstep_plist.parser.parse_plist_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "openstep_plist/parser.pyx":497
 * 
 * 
 * cdef object parse_plist_object(ParseInfo *pi, bint required=True):             # <<<<<<<<<<<<<<
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):
 */

static PyObject *__pyx_f_14openstep_plist_6parser_parse_plist_object(__pyx_t_14openstep_plist_6parser_ParseInfo *__pyx_v_pi, struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_object *__pyx_optional_args) {
int __pyx_v_required = ((int)1);
Py_UNICODE __pyx_v_ch;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
Py_ssize_t __pyx_t_3;
Py_UCS4 __pyx_t_4;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("parse_plist_object", 0);
if (__pyx_optional_args) {
  if (__pyx_optional_args->__pyx_n > 0) {
    __pyx_v_required = __pyx_optional_args->required;
  }
}

/* "openstep_plist/parser.pyx":499
 * cdef object parse_plist_object(ParseInfo *pi, bint required=True):
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):             # <<<<<<<<<<<<<<
 *         if required:
 *             raise ParseError("Unexpected EOF while parsing plist")
 */
__pyx_t_1 = ((!(__pyx_f_14openstep_plist_6parser_advance_to_non_space(__pyx_v_pi) != 0)) != 0);
if (__pyx_t_1) {

  /* "openstep_plist/parser.pyx":500
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):
 *         if required:             # <<<<<<<<<<<<<<
 *             raise ParseError("Unexpected EOF while parsing plist")
 *     ch = pi.curr[0]
 */
  __pyx_t_1 = (__pyx_v_required != 0);
  if (unlikely(__pyx_t_1)) {

    /* "openstep_plist/parser.pyx":501
 *     if not advance_to_non_space(pi):
 *         if required:
 *             raise ParseError("Unexpected EOF while parsing plist")             # <<<<<<<<<<<<<<
 *     ch = pi.curr[0]
 *     pi.curr += 1
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 501, __pyx_L1_error)

    /* "openstep_plist/parser.pyx":500
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):
 *         if required:             # <<<<<<<<<<<<<<
 *             raise ParseError("Unexpected EOF while parsing plist")
 *     ch = pi.curr[0]
 */
  }

  /* "openstep_plist/parser.pyx":499
 * cdef object parse_plist_object(ParseInfo *pi, bint required=True):
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):             # <<<<<<<<<<<<<<
 *         if required:
 *             raise ParseError("Unexpected EOF while parsing plist")
 */
}

/* "openstep_plist/parser.pyx":502
 *         if required:
 *             raise ParseError("Unexpected EOF while parsing plist")
 *     ch = pi.curr[0]             # <<<<<<<<<<<<<<
 *     pi.curr += 1
 *     if ch == c'{':
 */
__pyx_v_ch = (__pyx_v_pi->curr[0]);

/* "openstep_plist/parser.pyx":503
 *             raise ParseError("Unexpected EOF while parsing plist")
 *     ch = pi.curr[0]
 *     pi.curr += 1             # <<<<<<<<<<<<<<
 *     if ch == c'{':
 *         return parse_plist_dict(pi)
 */
__pyx_v_pi->curr = (__pyx_v_pi->curr + 1);

/* "openstep_plist/parser.pyx":504
 *     ch = pi.curr[0]
 *     pi.curr += 1
 *     if ch == c'{':             # <<<<<<<<<<<<<<
 *         return parse_plist_dict(pi)
 *     elif ch == c'(':
 */
__pyx_t_1 = ((__pyx_v_ch == '{') != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":505
 *     pi.curr += 1
 *     if ch == c'{':
 *         return parse_plist_dict(pi)             # <<<<<<<<<<<<<<
 *     elif ch == c'(':
 *         return parse_plist_array(pi)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_14openstep_plist_6parser_parse_plist_dict(__pyx_v_pi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":504
 *     ch = pi.curr[0]
 *     pi.curr += 1
 *     if ch == c'{':             # <<<<<<<<<<<<<<
 *         return parse_plist_dict(pi)
 *     elif ch == c'(':
 */
  }

  /* "openstep_plist/parser.pyx":506
 *     if ch == c'{':
 *         return parse_plist_dict(pi)
 *     elif ch == c'(':             # <<<<<<<<<<<<<<
 *         return parse_plist_array(pi)
 *     elif ch == c'<':
 */
  __pyx_t_1 = ((__pyx_v_ch == '(') != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":507
 *         return parse_plist_dict(pi)
 *     elif ch == c'(':
 *         return parse_plist_array(pi)             # <<<<<<<<<<<<<<
 *     elif ch == c'<':
 *         return parse_plist_data(pi)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_14openstep_plist_6parser_parse_plist_array(__pyx_v_pi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":506
 *     if ch == c'{':
 *         return parse_plist_dict(pi)
 *     elif ch == c'(':             # <<<<<<<<<<<<<<
 *         return parse_plist_array(pi)
 *     elif ch == c'<':
 */
  }

  /* "openstep_plist/parser.pyx":508
 *     elif ch == c'(':
 *         return parse_plist_array(pi)
 *     elif ch == c'<':             # <<<<<<<<<<<<<<
 *         return parse_plist_data(pi)
 *     elif ch == c'\'' or ch == c'"':
 */
  __pyx_t_1 = ((__pyx_v_ch == '<') != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":509
 *         return parse_plist_array(pi)
 *     elif ch == c'<':
 *         return parse_plist_data(pi)             # <<<<<<<<<<<<<<
 *     elif ch == c'\'' or ch == c'"':
 *         return parse_quoted_plist_string(pi, ch)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_14openstep_plist_6parser_parse_plist_data(__pyx_v_pi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":508
 *     elif ch == c'(':
 *         return parse_plist_array(pi)
 *     elif ch == c'<':             # <<<<<<<<<<<<<<
 *         return parse_plist_data(pi)
 *     elif ch == c'\'' or ch == c'"':
 */
  }

  /* "openstep_plist/parser.pyx":510
 *     elif ch == c'<':
 *         return parse_plist_data(pi)
 *     elif ch == c'\'' or ch == c'"':             # <<<<<<<<<<<<<<
 *         return parse_quoted_plist_string(pi, ch)
 *     elif is_valid_unquoted_string_char(ch):
 */
  switch (__pyx_v_ch) {
    case '\'':
    case '"':
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":511
 *         return parse_plist_data(pi)
 *     elif ch == c'\'' or ch == c'"':
 *         return parse_quoted_plist_string(pi, ch)             # <<<<<<<<<<<<<<
 *     elif is_valid_unquoted_string_char(ch):
 *         pi.curr -= 1
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_14openstep_plist_6parser_parse_quoted_plist_string(__pyx_v_pi, __pyx_v_ch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":510
 *     elif ch == c'<':
 *         return parse_plist_data(pi)
 *     elif ch == c'\'' or ch == c'"':             # <<<<<<<<<<<<<<
 *         return parse_quoted_plist_string(pi, ch)
 *     elif is_valid_unquoted_string_char(ch):
 */
  }

  /* "openstep_plist/parser.pyx":512
 *     elif ch == c'\'' or ch == c'"':
 *         return parse_quoted_plist_string(pi, ch)
 *     elif is_valid_unquoted_string_char(ch):             # <<<<<<<<<<<<<<
 *         pi.curr -= 1
 *         return parse_unquoted_plist_string(pi)
 */
  __pyx_t_1 = (__pyx_f_14openstep_plist_4util_is_valid_unquoted_string_char(__pyx_v_ch) != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/parser.pyx":513
 *         return parse_quoted_plist_string(pi, ch)
 *     elif is_valid_unquoted_string_char(ch):
 *         pi.curr -= 1             # <<<<<<<<<<<<<<
 *         return parse_unquoted_plist_string(pi)
 *     else:
 */
    __pyx_v_pi->curr = (__pyx_v_pi->curr - 1);

    /* "openstep_plist/parser.pyx":514
 *     elif is_valid_unquoted_string_char(ch):
 *         pi.curr -= 1
 *         return parse_unquoted_plist_string(pi)             # <<<<<<<<<<<<<<
 *     else:
 *         pi.curr -= 1  # must back off the character we just read
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_14openstep_plist_6parser_parse_unquoted_plist_string(__pyx_v_pi, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "openstep_plist/parser.pyx":512
 *     elif ch == c'\'' or ch == c'"':
 *         return parse_quoted_plist_string(pi, ch)
 *     elif is_valid_unquoted_string_char(ch):             # <<<<<<<<<<<<<<
 *         pi.curr -= 1
 *         return parse_unquoted_plist_string(pi)
 */
  }

  /* "openstep_plist/parser.pyx":516
 *         return parse_unquoted_plist_string(pi)
 *     else:
 *         pi.curr -= 1  # must back off the character we just read             # <<<<<<<<<<<<<<
 *         if required:
 *             raise ParseError(
 */
  /*else*/ {
    __pyx_v_pi->curr = (__pyx_v_pi->curr - 1);

    /* "openstep_plist/parser.pyx":517
 *     else:
 *         pi.curr -= 1  # must back off the character we just read
 *         if required:             # <<<<<<<<<<<<<<
 *             raise ParseError(
 *                 "Unexpected character at line %d: %r"
 */
    __pyx_t_1 = (__pyx_v_required != 0);
    if (unlikely(__pyx_t_1)) {

      /* "openstep_plist/parser.pyx":519
 *         if required:
 *             raise ParseError(
 *                 "Unexpected character at line %d: %r"             # <<<<<<<<<<<<<<
 *                 % (line_number_strings(pi), ch)
 *             )
 */
      __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_4 = 127;
      __Pyx_INCREF(__pyx_kp_u_Unexpected_character_at_line);
      __pyx_t_3 += 29;
      __Pyx_GIVEREF(__pyx_kp_u_Unexpected_character_at_line);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Unexpected_character_at_line);

      /* "openstep_plist/parser.pyx":520
 *             raise ParseError(
 *                 "Unexpected character at line %d: %r"
 *                 % (line_number_strings(pi), ch)             # <<<<<<<<<<<<<<
 *             )
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings(__pyx_v_pi)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_5), __pyx_n_u_d); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 520, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_4;
      __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__3);
      __pyx_t_3 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__3);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__3);
      __pyx_t_6 = PyUnicode_FromOrdinal(__pyx_v_ch); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 520, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_6), __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
      __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "openstep_plist/parser.pyx":519
 *         if required:
 *             raise ParseError(
 *                 "Unexpected character at line %d: %r"             # <<<<<<<<<<<<<<
 *                 % (line_number_strings(pi), ch)
 *             )
 */
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "openstep_plist/parser.pyx":518
 *         pi.curr -= 1  # must back off the character we just read
 *         if required:
 *             raise ParseError(             # <<<<<<<<<<<<<<
 *                 "Unexpected character at line %d: %r"
 *                 % (line_number_strings(pi), ch)
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 518, __pyx_L1_error)

      /* "openstep_plist/parser.pyx":517
 *     else:
 *         pi.curr -= 1  # must back off the character we just read
 *         if required:             # <<<<<<<<<<<<<<
 *             raise ParseError(
 *                 "Unexpected character at line %d: %r"
 */
    }
  }

  /* "openstep_plist/parser.pyx":497
 * 
 * 
 * cdef object parse_plist_object(ParseInfo *pi, bint required=True):             # <<<<<<<<<<<<<<
 *     cdef Py_UNICODE ch
 *     if not advance_to_non_space(pi):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("openstep_plist.parser.parse_plist_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":524
 * 
 * 
 * def loads(string, dict_type=dict, bint use_numbers=False):             # <<<<<<<<<<<<<<
 *     cdef unicode s = tounicode(string)
 *     cdef Py_ssize_t length = PyUnicode_GET_SIZE(s)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14openstep_plist_6parser_3loads(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14openstep_plist_6parser_2loads[] = "loads(string, dict_type=dict, bool use_numbers=False)";
static PyMethodDef __pyx_mdef_14openstep_plist_6parser_3loads = {"loads", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14openstep_plist_6parser_3loads, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14openstep_plist_6parser_2loads};
static PyObject *__pyx_pw_14openstep_plist_6parser_3loads(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_dict_type = 0;
  int __pyx_v_use_numbers;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loads (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_dict_type,&__pyx_n_s_use_numbers,0};
    PyObject* values[3] = {0,0,0};
    values[1] = __pyx_k__5;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dict_type);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_numbers);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "loads") < 0)) __PYX_ERR(0, 524, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string = values[0];
    __pyx_v_dict_type = values[1];
    if (values[2]) {
      __pyx_v_use_numbers = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_use_numbers == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L3_error)
    } else {
      __pyx_v_use_numbers = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loads", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 524, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openstep_plist.parser.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14openstep_plist_6parser_2loads(__pyx_self, __pyx_v_string, __pyx_v_dict_type, __pyx_v_use_numbers);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14openstep_plist_6parser_2loads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_string, PyObject *__pyx_v_dict_type, int __pyx_v_use_numbers) {
  PyObject *__pyx_v_s = 0;
  Py_ssize_t __pyx_v_length;
  Py_UNICODE *__pyx_v_buf;
  __pyx_t_14openstep_plist_6parser_ParseInfo __pyx_v_pi;
  Py_UNICODE const *__pyx_v_begin;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_14openstep_plist_6parser_ParseInfo __pyx_t_2;
  Py_UNICODE const *__pyx_t_3;
  int __pyx_t_4;
  struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_object __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loads", 0);

  /* "openstep_plist/parser.pyx":525
 * 
 * def loads(string, dict_type=dict, bint use_numbers=False):
 *     cdef unicode s = tounicode(string)             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = PyUnicode_GET_SIZE(s)
 *     cdef Py_UNICODE* buf = PyUnicode_AS_UNICODE(s)
 */
  __pyx_t_1 = __pyx_f_14openstep_plist_4util_tounicode(__pyx_v_string, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openstep_plist/parser.pyx":526
 * def loads(string, dict_type=dict, bint use_numbers=False):
 *     cdef unicode s = tounicode(string)
 *     cdef Py_ssize_t length = PyUnicode_GET_SIZE(s)             # <<<<<<<<<<<<<<
 *     cdef Py_UNICODE* buf = PyUnicode_AS_UNICODE(s)
 * 
 */
  __pyx_v_length = PyUnicode_GET_SIZE(__pyx_v_s);

  /* "openstep_plist/parser.pyx":527
 *     cdef unicode s = tounicode(string)
 *     cdef Py_ssize_t length = PyUnicode_GET_SIZE(s)
 *     cdef Py_UNICODE* buf = PyUnicode_AS_UNICODE(s)             # <<<<<<<<<<<<<<
 * 
 *     cdef ParseInfo pi = ParseInfo(
 */
  __pyx_v_buf = PyUnicode_AS_UNICODE(__pyx_v_s);

  /* "openstep_plist/parser.pyx":530
 * 
 *     cdef ParseInfo pi = ParseInfo(
 *         begin=buf,             # <<<<<<<<<<<<<<
 *         curr=buf,
 *         end=buf + length,
 */
  __pyx_t_2.begin = __pyx_v_buf;

  /* "openstep_plist/parser.pyx":531
 *     cdef ParseInfo pi = ParseInfo(
 *         begin=buf,
 *         curr=buf,             # <<<<<<<<<<<<<<
 *         end=buf + length,
 *         dict_type=<void *>dict_type,
 */
  __pyx_t_2.curr = __pyx_v_buf;

  /* "openstep_plist/parser.pyx":532
 *         begin=buf,
 *         curr=buf,
 *         end=buf + length,             # <<<<<<<<<<<<<<
 *         dict_type=<void *>dict_type,
 *         use_numbers=use_numbers,
 */
  __pyx_t_2.end = (__pyx_v_buf + __pyx_v_length);

  /* "openstep_plist/parser.pyx":533
 *         curr=buf,
 *         end=buf + length,
 *         dict_type=<void *>dict_type,             # <<<<<<<<<<<<<<
 *         use_numbers=use_numbers,
 *     )
 */
  __pyx_t_2.dict_type = ((void *)__pyx_v_dict_type);

  /* "openstep_plist/parser.pyx":534
 *         end=buf + length,
 *         dict_type=<void *>dict_type,
 *         use_numbers=use_numbers,             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_2.use_numbers = __pyx_v_use_numbers;
  __pyx_v_pi = __pyx_t_2;

  /* "openstep_plist/parser.pyx":537
 *     )
 * 
 *     cdef const Py_UNICODE *begin = pi.curr             # <<<<<<<<<<<<<<
 *     cdef object result = None
 *     if not advance_to_non_space(&pi):
 */
  __pyx_t_3 = __pyx_v_pi.curr;
  __pyx_v_begin = __pyx_t_3;

  /* "openstep_plist/parser.pyx":538
 * 
 *     cdef const Py_UNICODE *begin = pi.curr
 *     cdef object result = None             # <<<<<<<<<<<<<<
 *     if not advance_to_non_space(&pi):
 *         # a file consisting of only whitespace or empty is defined as an
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_result = Py_None;

  /* "openstep_plist/parser.pyx":539
 *     cdef const Py_UNICODE *begin = pi.curr
 *     cdef object result = None
 *     if not advance_to_non_space(&pi):             # <<<<<<<<<<<<<<
 *         # a file consisting of only whitespace or empty is defined as an
 *         # empty dictionary
 */
  __pyx_t_4 = ((!(__pyx_f_14openstep_plist_6parser_advance_to_non_space((&__pyx_v_pi)) != 0)) != 0);
  if (__pyx_t_4) {

    /* "openstep_plist/parser.pyx":542
 *         # a file consisting of only whitespace or empty is defined as an
 *         # empty dictionary
 *         result = {}             # <<<<<<<<<<<<<<
 *     else:
 *         result = parse_plist_object(&pi, required=True)
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "openstep_plist/parser.pyx":539
 *     cdef const Py_UNICODE *begin = pi.curr
 *     cdef object result = None
 *     if not advance_to_non_space(&pi):             # <<<<<<<<<<<<<<
 *         # a file consisting of only whitespace or empty is defined as an
 *         # empty dictionary
 */
    goto __pyx_L3;
  }

  /* "openstep_plist/parser.pyx":544
 *         result = {}
 *     else:
 *         result = parse_plist_object(&pi, required=True)             # <<<<<<<<<<<<<<
 *         if result:
 *             if advance_to_non_space(&pi):
 */
  /*else*/ {
    __pyx_t_5.__pyx_n = 1;
    __pyx_t_5.required = 1;
    __pyx_t_1 = __pyx_f_14openstep_plist_6parser_parse_plist_object((&__pyx_v_pi), &__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "openstep_plist/parser.pyx":545
 *     else:
 *         result = parse_plist_object(&pi, required=True)
 *         if result:             # <<<<<<<<<<<<<<
 *             if advance_to_non_space(&pi):
 *                 if not isinstance(result, unicode):
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_result); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 545, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "openstep_plist/parser.pyx":546
 *         result = parse_plist_object(&pi, required=True)
 *         if result:
 *             if advance_to_non_space(&pi):             # <<<<<<<<<<<<<<
 *                 if not isinstance(result, unicode):
 *                     raise ParseError(
 */
      __pyx_t_4 = (__pyx_f_14openstep_plist_6parser_advance_to_non_space((&__pyx_v_pi)) != 0);
      if (__pyx_t_4) {

        /* "openstep_plist/parser.pyx":547
 *         if result:
 *             if advance_to_non_space(&pi):
 *                 if not isinstance(result, unicode):             # <<<<<<<<<<<<<<
 *                     raise ParseError(
 *                         "Junk after plist at line %d" % line_number_strings(&pi)
 */
        __pyx_t_4 = PyUnicode_Check(__pyx_v_result); 
        __pyx_t_6 = ((!(__pyx_t_4 != 0)) != 0);
        if (unlikely(__pyx_t_6)) {

          /* "openstep_plist/parser.pyx":549
 *                 if not isinstance(result, unicode):
 *                     raise ParseError(
 *                         "Junk after plist at line %d" % line_number_strings(&pi)             # <<<<<<<<<<<<<<
 *                     )
 *                 else:
 */
          __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_f_14openstep_plist_6parser_line_number_strings((&__pyx_v_pi))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_Junk_after_plist_at_line_d, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 549, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "openstep_plist/parser.pyx":548
 *             if advance_to_non_space(&pi):
 *                 if not isinstance(result, unicode):
 *                     raise ParseError(             # <<<<<<<<<<<<<<
 *                         "Junk after plist at line %d" % line_number_strings(&pi)
 *                     )
 */
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_14openstep_plist_6parser_ParseError), __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(0, 548, __pyx_L1_error)

          /* "openstep_plist/parser.pyx":547
 *         if result:
 *             if advance_to_non_space(&pi):
 *                 if not isinstance(result, unicode):             # <<<<<<<<<<<<<<
 *                     raise ParseError(
 *                         "Junk after plist at line %d" % line_number_strings(&pi)
 */
        }

        /* "openstep_plist/parser.pyx":554
 *                     # keep parsing for a 'strings resource' file: it looks like
 *                     # a dictionary without the opening/closing curly braces
 *                     pi.curr = begin             # <<<<<<<<<<<<<<
 *                     result = parse_plist_dict_content(&pi)
 * 
 */
        /*else*/ {
          __pyx_v_pi.curr = __pyx_v_begin;

          /* "openstep_plist/parser.pyx":555
 *                     # a dictionary without the opening/closing curly braces
 *                     pi.curr = begin
 *                     result = parse_plist_dict_content(&pi)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
          __pyx_t_1 = __pyx_f_14openstep_plist_6parser_parse_plist_dict_content((&__pyx_v_pi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
          __pyx_t_1 = 0;
        }

        /* "openstep_plist/parser.pyx":546
 *         result = parse_plist_object(&pi, required=True)
 *         if result:
 *             if advance_to_non_space(&pi):             # <<<<<<<<<<<<<<
 *                 if not isinstance(result, unicode):
 *                     raise ParseError(
 */
      }

      /* "openstep_plist/parser.pyx":545
 *     else:
 *         result = parse_plist_object(&pi, required=True)
 *         if result:             # <<<<<<<<<<<<<<
 *             if advance_to_non_space(&pi):
 *                 if not isinstance(result, unicode):
 */
    }
  }
  __pyx_L3:;

  /* "openstep_plist/parser.pyx":557
 *                     result = parse_plist_dict_content(&pi)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":524
 * 
 * 
 * def loads(string, dict_type=dict, bint use_numbers=False):             # <<<<<<<<<<<<<<
 *     cdef unicode s = tounicode(string)
 *     cdef Py_ssize_t length = PyUnicode_GET_SIZE(s)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("openstep_plist.parser.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/parser.pyx":560
 * 
 * 
 * def load(fp, dict_type=dict, use_numbers=False):             # <<<<<<<<<<<<<<
 *     return loads(fp.read(), dict_type=dict_type, use_numbers=use_numbers)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14openstep_plist_6parser_5load(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14openstep_plist_6parser_4load[] = "load(fp, dict_type=dict, use_numbers=False)";
static PyMethodDef __pyx_mdef_14openstep_plist_6parser_5load = {"load", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14openstep_plist_6parser_5load, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14openstep_plist_6parser_4load};
static PyObject *__pyx_pw_14openstep_plist_6parser_5load(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fp = 0;
  PyObject *__pyx_v_dict_type = 0;
  PyObject *__pyx_v_use_numbers = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fp,&__pyx_n_s_dict_type,&__pyx_n_s_use_numbers,0};
    PyObject* values[3] = {0,0,0};
    values[1] = __pyx_k__6;
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dict_type);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_numbers);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load") < 0)) __PYX_ERR(0, 560, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fp = values[0];
    __pyx_v_dict_type = values[1];
    __pyx_v_use_numbers = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 560, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openstep_plist.parser.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14openstep_plist_6parser_4load(__pyx_self, __pyx_v_fp, __pyx_v_dict_type, __pyx_v_use_numbers);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14openstep_plist_6parser_4load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fp, PyObject *__pyx_v_dict_type, PyObject *__pyx_v_use_numbers) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "openstep_plist/parser.pyx":561
 * 
 * def load(fp, dict_type=dict, use_numbers=False):
 *     return loads(fp.read(), dict_type=dict_type, use_numbers=use_numbers)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_loads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dict_type, __pyx_v_dict_type) < 0) __PYX_ERR(0, 561, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_use_numbers, __pyx_v_use_numbers) < 0) __PYX_ERR(0, 561, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "openstep_plist/parser.pyx":560
 * 
 * 
 * def load(fp, dict_type=dict, use_numbers=False):             # <<<<<<<<<<<<<<
 *     return loads(fp.read(), dict_type=dict_type, use_numbers=use_numbers)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openstep_plist.parser.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_14openstep_plist_6parser_ParseError(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (&((PyTypeObject*)PyExc_Exception)[0])->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_14openstep_plist_6parser_ParseError(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  (&((PyTypeObject*)PyExc_Exception)[0])->tp_dealloc(o);
}

static int __pyx_tp_traverse_14openstep_plist_6parser_ParseError(PyObject *o, visitproc v, void *a) {
  int e;
  if (!(&((PyTypeObject*)PyExc_Exception)[0])->tp_traverse); else { e = (&((PyTypeObject*)PyExc_Exception)[0])->tp_traverse(o,v,a); if (e) return e; }
  return 0;
}

static int __pyx_tp_clear_14openstep_plist_6parser_ParseError(PyObject *o) {
  if (!(&((PyTypeObject*)PyExc_Exception)[0])->tp_clear); else (&((PyTypeObject*)PyExc_Exception)[0])->tp_clear(o);
  return 0;
}

static PyTypeObject __pyx_type_14openstep_plist_6parser_ParseError = {
  PyVarObject_HEAD_INIT(0, 0)
  "openstep_plist.parser.ParseError", /*tp_name*/
  sizeof(struct __pyx_obj_14openstep_plist_6parser_ParseError), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14openstep_plist_6parser_ParseError, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14openstep_plist_6parser_ParseError, /*tp_traverse*/
  __pyx_tp_clear_14openstep_plist_6parser_ParseError, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14openstep_plist_6parser_ParseError, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_parser(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_parser},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "parser",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_Could_not_convert_string_to_floa, __pyx_k_Could_not_convert_string_to_floa, sizeof(__pyx_k_Could_not_convert_string_to_floa), 0, 1, 0, 0},
  {&__pyx_kp_u_Expected_terminating_for_array_a, __pyx_k_Expected_terminating_for_array_a, sizeof(__pyx_k_Expected_terminating_for_array_a), 0, 1, 0, 0},
  {&__pyx_kp_u_Expected_terminating_for_data_at, __pyx_k_Expected_terminating_for_data_at, sizeof(__pyx_k_Expected_terminating_for_data_at), 0, 1, 0, 0},
  {&__pyx_kp_u_Expected_terminating_for_diction, __pyx_k_Expected_terminating_for_diction, sizeof(__pyx_k_Expected_terminating_for_diction), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_string_character_at_line, __pyx_k_Invalid_string_character_at_line, sizeof(__pyx_k_Invalid_string_character_at_line), 0, 1, 0, 0},
  {&__pyx_kp_u_Junk_after_plist_at_line_d, __pyx_k_Junk_after_plist_at_line_d, sizeof(__pyx_k_Junk_after_plist_at_line_d), 0, 1, 0, 0},
  {&__pyx_kp_u_Malformed_data_byte_group_at_lin, __pyx_k_Malformed_data_byte_group_at_lin, sizeof(__pyx_k_Malformed_data_byte_group_at_lin), 0, 1, 0, 0},
  {&__pyx_kp_u_Malformed_data_byte_group_at_lin_2, __pyx_k_Malformed_data_byte_group_at_lin_2, sizeof(__pyx_k_Malformed_data_byte_group_at_lin_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Missing_for_array_at_line_d, __pyx_k_Missing_for_array_at_line_d, sizeof(__pyx_k_Missing_for_array_at_line_d), 0, 1, 0, 0},
  {&__pyx_kp_u_Missing_on_line_d, __pyx_k_Missing_on_line_d, sizeof(__pyx_k_Missing_on_line_d), 0, 1, 0, 0},
  {&__pyx_n_s_ParseError, __pyx_k_ParseError, sizeof(__pyx_k_ParseError), 0, 0, 1, 1},
  {&__pyx_kp_u_Unexpected_EOF, __pyx_k_Unexpected_EOF, sizeof(__pyx_k_Unexpected_EOF), 0, 1, 0, 0},
  {&__pyx_kp_u_Unexpected_EOF_while_parsing_pli, __pyx_k_Unexpected_EOF_while_parsing_pli, sizeof(__pyx_k_Unexpected_EOF_while_parsing_pli), 0, 1, 0, 0},
  {&__pyx_kp_u_Unexpected_EOF_while_parsing_str, __pyx_k_Unexpected_EOF_while_parsing_str, sizeof(__pyx_k_Unexpected_EOF_while_parsing_str), 0, 1, 0, 0},
  {&__pyx_kp_u_Unexpected_character_after_key_a, __pyx_k_Unexpected_character_after_key_a, sizeof(__pyx_k_Unexpected_character_after_key_a), 0, 1, 0, 0},
  {&__pyx_kp_u_Unexpected_character_at_line, __pyx_k_Unexpected_character_at_line, sizeof(__pyx_k_Unexpected_character_at_line), 0, 1, 0, 0},
  {&__pyx_kp_u_Unterminated_quoted_string_start, __pyx_k_Unterminated_quoted_string_start, sizeof(__pyx_k_Unterminated_quoted_string_start), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_n_s_begin, __pyx_k_begin, sizeof(__pyx_k_begin), 0, 0, 1, 1},
  {&__pyx_n_s_buf, __pyx_k_buf, sizeof(__pyx_k_buf), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_curr, __pyx_k_curr, sizeof(__pyx_k_curr), 0, 0, 1, 1},
  {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
  {&__pyx_n_s_dict_type, __pyx_k_dict_type, sizeof(__pyx_k_dict_type), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_fp, __pyx_k_fp, sizeof(__pyx_k_fp), 0, 0, 1, 1},
  {&__pyx_kp_u_invalid_hex_digit, __pyx_k_invalid_hex_digit, sizeof(__pyx_k_invalid_hex_digit), 0, 1, 0, 0},
  {&__pyx_n_s_kind, __pyx_k_kind, sizeof(__pyx_k_kind), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_openstep_plist_parser, __pyx_k_openstep_plist_parser, sizeof(__pyx_k_openstep_plist_parser), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_required, __pyx_k_required, sizeof(__pyx_k_required), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_s_src_openstep_plist_parser_pyx, __pyx_k_src_openstep_plist_parser_pyx, sizeof(__pyx_k_src_openstep_plist_parser_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
  {&__pyx_n_s_string_to_number, __pyx_k_string_to_number, sizeof(__pyx_k_string_to_number), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_use_numbers, __pyx_k_use_numbers, sizeof(__pyx_k_use_numbers), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 286, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "openstep_plist/parser.pyx":329
 *         return s
 * 
 *     raise ParseError("Unexpected EOF")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Unexpected_EOF); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "openstep_plist/parser.pyx":336
 *     if not advance_to_non_space(pi):
 *         if required:
 *             raise ParseError("Unexpected EOF while parsing string")             # <<<<<<<<<<<<<<
 *     ch = pi.curr[0]
 *     if ch == c'\'' or ch == c'"':
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_EOF_while_parsing_str); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "openstep_plist/parser.pyx":501
 *     if not advance_to_non_space(pi):
 *         if required:
 *             raise ParseError("Unexpected EOF while parsing plist")             # <<<<<<<<<<<<<<
 *     ch = pi.curr[0]
 *     pi.curr += 1
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_EOF_while_parsing_pli); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "openstep_plist/parser.pyx":234
 * 
 * 
 * def string_to_number(unicode s not None, bint required=True):             # <<<<<<<<<<<<<<
 *     """Convert string s to either int or float.
 *     Raises ValueError if the string is not a number.
 */
  __pyx_tuple__7 = PyTuple_Pack(6, __pyx_n_s_s, __pyx_n_s_required, __pyx_n_s_c, __pyx_n_s_buf, __pyx_n_s_length, __pyx_n_s_kind); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_openstep_plist_parser_pyx, __pyx_n_s_string_to_number, 234, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 234, __pyx_L1_error)

  /* "openstep_plist/parser.pyx":524
 * 
 * 
 * def loads(string, dict_type=dict, bint use_numbers=False):             # <<<<<<<<<<<<<<
 *     cdef unicode s = tounicode(string)
 *     cdef Py_ssize_t length = PyUnicode_GET_SIZE(s)
 */
  __pyx_tuple__9 = PyTuple_Pack(9, __pyx_n_s_string, __pyx_n_s_dict_type, __pyx_n_s_use_numbers, __pyx_n_s_s, __pyx_n_s_length, __pyx_n_s_buf, __pyx_n_s_pi, __pyx_n_s_begin, __pyx_n_s_result); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_openstep_plist_parser_pyx, __pyx_n_s_loads, 524, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 524, __pyx_L1_error)

  /* "openstep_plist/parser.pyx":560
 * 
 * 
 * def load(fp, dict_type=dict, use_numbers=False):             # <<<<<<<<<<<<<<
 *     return loads(fp.read(), dict_type=dict_type, use_numbers=use_numbers)
 */
  __pyx_tuple__11 = PyTuple_Pack(3, __pyx_n_s_fp, __pyx_n_s_dict_type, __pyx_n_s_use_numbers); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_openstep_plist_parser_pyx, __pyx_n_s_load, 560, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("line_number_strings", (void (*)(void))__pyx_f_14openstep_plist_6parser_line_number_strings, "uint32_t (__pyx_t_14openstep_plist_6parser_ParseInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("advance_to_non_space", (void (*)(void))__pyx_f_14openstep_plist_6parser_advance_to_non_space, "int (__pyx_t_14openstep_plist_6parser_ParseInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("get_slashed_char", (void (*)(void))__pyx_f_14openstep_plist_6parser_get_slashed_char, "Py_UNICODE (__pyx_t_14openstep_plist_6parser_ParseInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("parse_quoted_plist_string", (void (*)(void))__pyx_f_14openstep_plist_6parser_parse_quoted_plist_string, "PyObject *(__pyx_t_14openstep_plist_6parser_ParseInfo *, Py_UNICODE)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("get_unquoted_string_type", (void (*)(void))__pyx_f_14openstep_plist_6parser_get_unquoted_string_type, "enum __pyx_t_14openstep_plist_6parser_UnquotedType (Py_UNICODE const *, Py_ssize_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("parse_unquoted_plist_string", (void (*)(void))__pyx_f_14openstep_plist_6parser_parse_unquoted_plist_string, "PyObject *(__pyx_t_14openstep_plist_6parser_ParseInfo *, struct __pyx_opt_args_14openstep_plist_6parser_parse_unquoted_plist_string *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("parse_plist_string", (void (*)(void))__pyx_f_14openstep_plist_6parser_parse_plist_string, "PyObject *(__pyx_t_14openstep_plist_6parser_ParseInfo *, struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_string *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("parse_plist_array", (void (*)(void))__pyx_f_14openstep_plist_6parser_parse_plist_array, "PyObject *(__pyx_t_14openstep_plist_6parser_ParseInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("parse_plist_dict_content", (void (*)(void))__pyx_f_14openstep_plist_6parser_parse_plist_dict_content, "PyObject *(__pyx_t_14openstep_plist_6parser_ParseInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("parse_plist_dict", (void (*)(void))__pyx_f_14openstep_plist_6parser_parse_plist_dict, "PyObject *(__pyx_t_14openstep_plist_6parser_ParseInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("from_hex_digit", (void (*)(void))__pyx_f_14openstep_plist_6parser_from_hex_digit, "unsigned char (unsigned char)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("get_data_bytes", (void (*)(void))__pyx_f_14openstep_plist_6parser_get_data_bytes, "int (__pyx_t_14openstep_plist_6parser_ParseInfo *, std::vector<unsigned char>  &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("parse_plist_data", (void (*)(void))__pyx_f_14openstep_plist_6parser_parse_plist_data, "PyObject *(__pyx_t_14openstep_plist_6parser_ParseInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("parse_plist_object", (void (*)(void))__pyx_f_14openstep_plist_6parser_parse_plist_object, "PyObject *(__pyx_t_14openstep_plist_6parser_ParseInfo *, struct __pyx_opt_args_14openstep_plist_6parser_parse_plist_object *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_type_14openstep_plist_6parser_ParseError.tp_base = (&((PyTypeObject*)PyExc_Exception)[0]);
  if (PyType_Ready(&__pyx_type_14openstep_plist_6parser_ParseError) < 0) __PYX_ERR(1, 15, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14openstep_plist_6parser_ParseError.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14openstep_plist_6parser_ParseError.tp_dictoffset && __pyx_type_14openstep_plist_6parser_ParseError.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14openstep_plist_6parser_ParseError.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ParseError, (PyObject *)&__pyx_type_14openstep_plist_6parser_ParseError) < 0) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_ptype_14openstep_plist_6parser_ParseError = &__pyx_type_14openstep_plist_6parser_ParseError;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("openstep_plist.util"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "PY_NARROW_UNICODE", (void **)&__pyx_vp_14openstep_plist_4util_PY_NARROW_UNICODE, "int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("openstep_plist.util"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "tounicode", (void (**)(void))&__pyx_f_14openstep_plist_4util_tounicode, "PyObject *(PyObject *, struct __pyx_opt_args_14openstep_plist_4util_tounicode *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "tostr", (void (**)(void))&__pyx_f_14openstep_plist_4util_tostr, "PyObject *(PyObject *, struct __pyx_opt_args_14openstep_plist_4util_tostr *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "is_valid_unquoted_string_char", (void (**)(void))&__pyx_f_14openstep_plist_4util_is_valid_unquoted_string_char, "int (Py_UNICODE)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "is_high_surrogate", (void (**)(void))&__pyx_f_14openstep_plist_4util_is_high_surrogate, "int (uint32_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "is_low_surrogate", (void (**)(void))&__pyx_f_14openstep_plist_4util_is_low_surrogate, "int (uint32_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "unicode_scalar_from_surrogates", (void (**)(void))&__pyx_f_14openstep_plist_4util_unicode_scalar_from_surrogates, "uint32_t (uint16_t, uint16_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initparser(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initparser(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_parser(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_parser(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_parser(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  static unsigned short __pyx_t_1[128];
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'parser' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_parser(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("parser", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_openstep_plist__parser) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "openstep_plist.parser")) {
      if (unlikely(PyDict_SetItemString(modules, "openstep_plist.parser", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_variable_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "openstep_plist/parser.pyx":93
 * # and Unicode, the table only maps NextStep range from 0x80 - 0xFF.
 * # Source: ftp://ftp.unicode.org/Public/MAPPINGS/VENDORS/NEXT/NEXTSTEP.TXT
 * cdef unsigned short* NEXT_STEP_DECODING_TABLE = [             # <<<<<<<<<<<<<<
 *     0xA0, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC7, 0xC8, 0xC9,
 *     0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3,
 */
  __pyx_t_1[0] = 0xA0;
  __pyx_t_1[1] = 0xC0;
  __pyx_t_1[2] = 0xC1;
  __pyx_t_1[3] = 0xC2;
  __pyx_t_1[4] = 0xC3;
  __pyx_t_1[5] = 0xC4;
  __pyx_t_1[6] = 0xC5;
  __pyx_t_1[7] = 0xC7;
  __pyx_t_1[8] = 0xC8;
  __pyx_t_1[9] = 0xC9;
  __pyx_t_1[10] = 0xCA;
  __pyx_t_1[11] = 0xCB;
  __pyx_t_1[12] = 0xCC;
  __pyx_t_1[13] = 0xCD;
  __pyx_t_1[14] = 0xCE;
  __pyx_t_1[15] = 0xCF;
  __pyx_t_1[16] = 0xD0;
  __pyx_t_1[17] = 0xD1;
  __pyx_t_1[18] = 0xD2;
  __pyx_t_1[19] = 0xD3;
  __pyx_t_1[20] = 0xD4;
  __pyx_t_1[21] = 0xD5;
  __pyx_t_1[22] = 0xD6;
  __pyx_t_1[23] = 0xD9;
  __pyx_t_1[24] = 0xDA;
  __pyx_t_1[25] = 0xDB;
  __pyx_t_1[26] = 0xDC;
  __pyx_t_1[27] = 0xDD;
  __pyx_t_1[28] = 0xDE;
  __pyx_t_1[29] = 0xB5;
  __pyx_t_1[30] = 0xD7;
  __pyx_t_1[31] = 0xF7;
  __pyx_t_1[32] = 0xA9;
  __pyx_t_1[33] = 0xA1;
  __pyx_t_1[34] = 0xA2;
  __pyx_t_1[35] = 0xA3;
  __pyx_t_1[36] = 0x2044;
  __pyx_t_1[37] = 0xA5;
  __pyx_t_1[38] = 0x192;
  __pyx_t_1[39] = 0xA7;
  __pyx_t_1[40] = 0xA4;
  __pyx_t_1[41] = 0x2019;
  __pyx_t_1[42] = 0x201C;
  __pyx_t_1[43] = 0xAB;
  __pyx_t_1[44] = 0x2039;
  __pyx_t_1[45] = 0x203A;
  __pyx_t_1[46] = 0xFB01;
  __pyx_t_1[47] = 0xFB02;
  __pyx_t_1[48] = 0xAE;
  __pyx_t_1[49] = 0x2013;
  __pyx_t_1[50] = 0x2020;
  __pyx_t_1[51] = 0x2021;
  __pyx_t_1[52] = 0xB7;
  __pyx_t_1[53] = 0xA6;
  __pyx_t_1[54] = 0xB6;
  __pyx_t_1[55] = 0x2022;
  __pyx_t_1[56] = 0x201A;
  __pyx_t_1[57] = 0x201E;
  __pyx_t_1[58] = 0x201D;
  __pyx_t_1[59] = 0xBB;
  __pyx_t_1[60] = 0x2026;
  __pyx_t_1[61] = 0x2030;
  __pyx_t_1[62] = 0xAC;
  __pyx_t_1[63] = 0xBF;
  __pyx_t_1[64] = 0xB9;
  __pyx_t_1[65] = 0x2CB;
  __pyx_t_1[66] = 0xB4;
  __pyx_t_1[67] = 0x2C6;
  __pyx_t_1[68] = 0x2DC;
  __pyx_t_1[69] = 0xAF;
  __pyx_t_1[70] = 0x2D8;
  __pyx_t_1[71] = 0x2D9;
  __pyx_t_1[72] = 0xA8;
  __pyx_t_1[73] = 0xB2;
  __pyx_t_1[74] = 0x2DA;
  __pyx_t_1[75] = 0xB8;
  __pyx_t_1[76] = 0xB3;
  __pyx_t_1[77] = 0x2DD;
  __pyx_t_1[78] = 0x2DB;
  __pyx_t_1[79] = 0x2C7;
  __pyx_t_1[80] = 0x2014;
  __pyx_t_1[81] = 0xB1;
  __pyx_t_1[82] = 0xBC;
  __pyx_t_1[83] = 0xBD;
  __pyx_t_1[84] = 0xBE;
  __pyx_t_1[85] = 0xE0;
  __pyx_t_1[86] = 0xE1;
  __pyx_t_1[87] = 0xE2;
  __pyx_t_1[88] = 0xE3;
  __pyx_t_1[89] = 0xE4;
  __pyx_t_1[90] = 0xE5;
  __pyx_t_1[91] = 0xE7;
  __pyx_t_1[92] = 0xE8;
  __pyx_t_1[93] = 0xE9;
  __pyx_t_1[94] = 0xEA;
  __pyx_t_1[95] = 0xEB;
  __pyx_t_1[96] = 0xEC;
  __pyx_t_1[97] = 0xC6;
  __pyx_t_1[98] = 0xED;
  __pyx_t_1[99] = 0xAA;
  __pyx_t_1[100] = 0xEE;
  __pyx_t_1[101] = 0xEF;
  __pyx_t_1[102] = 0xF0;
  __pyx_t_1[103] = 0xF1;
  __pyx_t_1[104] = 0x141;
  __pyx_t_1[105] = 0xD8;
  __pyx_t_1[106] = 0x152;
  __pyx_t_1[107] = 0xBA;
  __pyx_t_1[108] = 0xF2;
  __pyx_t_1[109] = 0xF3;
  __pyx_t_1[110] = 0xF4;
  __pyx_t_1[111] = 0xF5;
  __pyx_t_1[112] = 0xF6;
  __pyx_t_1[113] = 0xE6;
  __pyx_t_1[114] = 0xF9;
  __pyx_t_1[115] = 0xFA;
  __pyx_t_1[116] = 0xFB;
  __pyx_t_1[117] = 0x131;
  __pyx_t_1[118] = 0xFC;
  __pyx_t_1[119] = 0xFD;
  __pyx_t_1[120] = 0x142;
  __pyx_t_1[121] = 0xF8;
  __pyx_t_1[122] = 0x153;
  __pyx_t_1[123] = 0xDF;
  __pyx_t_1[124] = 0xFE;
  __pyx_t_1[125] = 0xFF;
  __pyx_t_1[126] = 0xFFFD;
  __pyx_t_1[127] = 0xFFFD;
  __pyx_v_14openstep_plist_6parser_NEXT_STEP_DECODING_TABLE = __pyx_t_1;

  /* "openstep_plist/parser.pyx":234
 * 
 * 
 * def string_to_number(unicode s not None, bint required=True):             # <<<<<<<<<<<<<<
 *     """Convert string s to either int or float.
 *     Raises ValueError if the string is not a number.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_14openstep_plist_6parser_1string_to_number, NULL, __pyx_n_s_openstep_plist_parser); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_to_number, __pyx_t_2) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/parser.pyx":524
 * 
 * 
 * def loads(string, dict_type=dict, bint use_numbers=False):             # <<<<<<<<<<<<<<
 *     cdef unicode s = tounicode(string)
 *     cdef Py_ssize_t length = PyUnicode_GET_SIZE(s)
 */
  __Pyx_INCREF(((PyObject *)(&PyDict_Type)));
  __pyx_k__5 = ((PyObject *)(&PyDict_Type));
  __Pyx_GIVEREF((&PyDict_Type));
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_14openstep_plist_6parser_3loads, NULL, __pyx_n_s_openstep_plist_parser); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_loads, __pyx_t_2) < 0) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/parser.pyx":560
 * 
 * 
 * def load(fp, dict_type=dict, use_numbers=False):             # <<<<<<<<<<<<<<
 *     return loads(fp.read(), dict_type=dict_type, use_numbers=use_numbers)
 */
  __Pyx_INCREF(((PyObject *)(&PyDict_Type)));
  __pyx_k__6 = ((PyObject *)(&PyDict_Type));
  __Pyx_GIVEREF((&PyDict_Type));
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_14openstep_plist_6parser_5load, NULL, __pyx_n_s_openstep_plist_parser); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_load, __pyx_t_2) < 0) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/parser.pyx":1
 * #cython: language_level=3             # <<<<<<<<<<<<<<
 * #distutils: define_macros=CYTHON_TRACE_NOGIL=1
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init openstep_plist.parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init openstep_plist.parser");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* VoidPtrImport */
#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
