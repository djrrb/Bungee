/* Generated by Cython 0.29.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "CYTHON_TRACE_NOGIL",
                "1"
            ]
        ],
        "depends": [],
        "extra_compile_args": [
            "-std=c++11"
        ],
        "language": "c++",
        "name": "openstep_plist.writer",
        "sources": [
            "src/openstep_plist/writer.pyx"
        ]
    },
    "module_name": "openstep_plist.writer"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_24"
#define CYTHON_HEX_VERSION 0x001D18F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__openstep_plist__writer
#define __PYX_HAVE_API__openstep_plist__writer
/* Early includes */
#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <iterator>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <stdint.h>
#include <ctype.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/openstep_plist/writer.pyx",
  "stringsource",
  "type.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_14openstep_plist_6writer_Writer;
struct __pyx_opt_args_14openstep_plist_4util_tounicode;
struct __pyx_opt_args_14openstep_plist_4util_tostr;

/* "util.pxd":12
 * 
 * 
 * cdef unicode tounicode(s, encoding=*, errors=*)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_14openstep_plist_4util_tounicode {
  int __pyx_n;
  PyObject *encoding;
  PyObject *errors;
};

/* "util.pxd":15
 * 
 * 
 * cdef tostr(s, encoding=*, errors=*)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_14openstep_plist_4util_tostr {
  int __pyx_n;
  PyObject *encoding;
  PyObject *errors;
};

/* "openstep_plist/writer.pyx":110
 * 
 * @cython.final
 * cdef class Writer:             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Py_UNICODE] *dest
 */
struct __pyx_obj_14openstep_plist_6writer_Writer {
  PyObject_HEAD
  struct __pyx_vtabstruct_14openstep_plist_6writer_Writer *__pyx_vtab;
  std::vector<Py_UNICODE>  *dest;
  int unicode_escape;
  int float_precision;
  PyObject *indent;
  int current_indent_level;
  int single_line_tuples;
};



struct __pyx_vtabstruct_14openstep_plist_6writer_Writer {
  Py_ssize_t (*extend_buffer)(struct __pyx_obj_14openstep_plist_6writer_Writer *, Py_UNICODE const *, Py_ssize_t);
  PyObject *(*_getvalue)(struct __pyx_obj_14openstep_plist_6writer_Writer *);
  Py_ssize_t (*write_object)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
  Py_ssize_t (*write_quoted_string)(struct __pyx_obj_14openstep_plist_6writer_Writer *, Py_UNICODE const *, Py_ssize_t);
  Py_ssize_t (*write_unquoted_string)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
  Py_ssize_t (*write_string)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
  Py_ssize_t (*write_short_float_repr)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
  Py_ssize_t (*write_data)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
  Py_ssize_t (*write_array_from_list)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
  Py_ssize_t (*write_array_from_tuple)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
  Py_ssize_t (*write_dict)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
  Py_ssize_t (*write_ordered_dict)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
};
static struct __pyx_vtabstruct_14openstep_plist_6writer_Writer *__pyx_vtabptr_14openstep_plist_6writer_Writer;
static CYTHON_INLINE Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(struct __pyx_obj_14openstep_plist_6writer_Writer *, Py_UNICODE const *, Py_ssize_t);
static CYTHON_INLINE PyObject *__pyx_f_14openstep_plist_6writer_6Writer__getvalue(struct __pyx_obj_14openstep_plist_6writer_Writer *);
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_object(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_quoted_string(struct __pyx_obj_14openstep_plist_6writer_Writer *, Py_UNICODE const *, Py_ssize_t);
static CYTHON_INLINE Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_string(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_short_float_repr(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_data(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_array_from_list(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_array_from_tuple(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_dict(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_ordered_dict(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_Unicode.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))
#else
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Unicode(obj))
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* None.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, Py_UNICODE const *__pyx_v_s, Py_ssize_t __pyx_v_length); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_14openstep_plist_6writer_6Writer__getvalue(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self); /* proto*/
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_object(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_quoted_string(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, Py_UNICODE const *__pyx_v_s, Py_ssize_t __pyx_v_length); /* proto*/
static CYTHON_INLINE Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_string); /* proto*/
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_string(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_string); /* proto*/
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_short_float_repr(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_py_float); /* proto*/
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_data(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_data); /* proto*/
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_array_from_list(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_seq); /* proto*/
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_array_from_tuple(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_seq); /* proto*/
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_dict(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_d); /* proto*/
static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_ordered_dict(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_d); /* proto*/

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.algorithm' */

/* Module declarations from 'libcpp.iterator' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'cython' */

/* Module declarations from 'openstep_plist.util' */
static int *__pyx_vp_14openstep_plist_4util_PY_NARROW_UNICODE = 0;
#define __pyx_v_14openstep_plist_4util_PY_NARROW_UNICODE (*__pyx_vp_14openstep_plist_4util_PY_NARROW_UNICODE)
static PyObject *(*__pyx_f_14openstep_plist_4util_tounicode)(PyObject *, struct __pyx_opt_args_14openstep_plist_4util_tounicode *__pyx_optional_args); /*proto*/
static uint16_t (*__pyx_f_14openstep_plist_4util_high_surrogate_from_unicode_scalar)(uint32_t); /*proto*/
static uint16_t (*__pyx_f_14openstep_plist_4util_low_surrogate_from_unicode_scalar)(uint32_t); /*proto*/

/* Module declarations from 'openstep_plist.writer' */
static PyTypeObject *__pyx_ptype_14openstep_plist_6writer_Writer = 0;
static Py_UNICODE *__pyx_v_14openstep_plist_6writer_HEX_MAP;
static Py_UNICODE *__pyx_v_14openstep_plist_6writer_ARRAY_SEP_NO_INDENT;
static Py_UNICODE *__pyx_v_14openstep_plist_6writer_DICT_KEY_VALUE_SEP;
static Py_UNICODE *__pyx_v_14openstep_plist_6writer_DICT_ITEM_SEP_NO_INDENT;
static int *__pyx_v_14openstep_plist_6writer_VALID_UNQUOTED_CHARS;
static int __pyx_f_14openstep_plist_6writer_string_needs_quotes(Py_UNICODE const *, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_14openstep_plist_6writer_escape_unicode(uint16_t, Py_UNICODE *); /*proto*/
#define __Pyx_MODULE_NAME "openstep_plist.writer"
extern int __pyx_module_is_main_openstep_plist__writer;
int __pyx_module_is_main_openstep_plist__writer = 0;

/* Implementation of 'openstep_plist.writer' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_enumerate;
static const char __pyx_k_[] = " ";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_w[] = "w";
static const char __pyx_k__2[] = "";
static const char __pyx_k__3[] = ".";
static const char __pyx_k__4[] = "\n";
static const char __pyx_k_fp[] = "fp";
static const char __pyx_k_nil[] = "(nil)";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_dump[] = "dump";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_dumps[] = "dumps";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_Writer[] = "Writer";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_indent[] = "indent";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_getvalue[] = "getvalue";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_Object_of_type[] = "Object of type ";
static const char __pyx_k_unicode_escape[] = "unicode_escape";
static const char __pyx_k_float_precision[] = "float_precision";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_single_line_tuples[] = "single_line_tuples";
static const char __pyx_k_openstep_plist_writer[] = "openstep_plist.writer";
static const char __pyx_k_is_not_PLIST_serializable[] = " is not PLIST serializable";
static const char __pyx_k_src_openstep_plist_writer_pyx[] = "src/openstep_plist/writer.pyx";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_u_Object_of_type;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_Writer;
static PyObject *__pyx_kp_b__2;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_dump;
static PyObject *__pyx_n_s_dumps;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_u_f;
static PyObject *__pyx_n_s_float_precision;
static PyObject *__pyx_n_s_fp;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_getvalue;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_indent;
static PyObject *__pyx_kp_u_is_not_PLIST_serializable;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_nil;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_openstep_plist_writer;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_single_line_tuples;
static PyObject *__pyx_kp_s_src_openstep_plist_writer_pyx;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_unicode_escape;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_write;
static int __pyx_pf_14openstep_plist_6writer_6Writer___cinit__(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, int __pyx_v_unicode_escape, int __pyx_v_float_precision, PyObject *__pyx_v_indent, int __pyx_v_single_line_tuples); /* proto */
static void __pyx_pf_14openstep_plist_6writer_6Writer_2__dealloc__(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14openstep_plist_6writer_6Writer_4getvalue(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14openstep_plist_6writer_6Writer_6dump(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_file); /* proto */
static PyObject *__pyx_pf_14openstep_plist_6writer_6Writer_8write(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_14openstep_plist_6writer_6Writer_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14openstep_plist_6writer_6Writer_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14openstep_plist_6writer_dumps(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, int __pyx_v_unicode_escape, int __pyx_v_float_precision, PyObject *__pyx_v_indent, PyObject *__pyx_v_single_line_tuples); /* proto */
static PyObject *__pyx_pf_14openstep_plist_6writer_2dump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_fp, int __pyx_v_unicode_escape, int __pyx_v_float_precision, PyObject *__pyx_v_indent, PyObject *__pyx_v_single_line_tuples); /* proto */
static PyObject *__pyx_tp_new_14openstep_plist_6writer_Writer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
/* Late includes */

/* "openstep_plist/writer.pyx":61
 * 
 * 
 * cdef bint string_needs_quotes(const Py_UNICODE *a, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     # empty string is always quoted
 *     if length == 0:
 */

static int __pyx_f_14openstep_plist_6writer_string_needs_quotes(Py_UNICODE const *__pyx_v_a, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_i;
  Py_UNICODE __pyx_v_ch;
  int __pyx_v_is_number;
  int __pyx_v_seen_period;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("string_needs_quotes", 0);

  /* "openstep_plist/writer.pyx":63
 * cdef bint string_needs_quotes(const Py_UNICODE *a, Py_ssize_t length):
 *     # empty string is always quoted
 *     if length == 0:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_1 = ((__pyx_v_length == 0) != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/writer.pyx":64
 *     # empty string is always quoted
 *     if length == 0:
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":63
 * cdef bint string_needs_quotes(const Py_UNICODE *a, Py_ssize_t length):
 *     # empty string is always quoted
 *     if length == 0:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "openstep_plist/writer.pyx":69
 *         Py_ssize_t i
 *         Py_UNICODE ch
 *         bint is_number = True             # <<<<<<<<<<<<<<
 *         bint seen_period = False
 * 
 */
  __pyx_v_is_number = 1;

  /* "openstep_plist/writer.pyx":70
 *         Py_UNICODE ch
 *         bint is_number = True
 *         bint seen_period = False             # <<<<<<<<<<<<<<
 * 
 *     for i in range(length):
 */
  __pyx_v_seen_period = 0;

  /* "openstep_plist/writer.pyx":72
 *         bint seen_period = False
 * 
 *     for i in range(length):             # <<<<<<<<<<<<<<
 *         ch = a[i]
 *         # if non-ASCII or contains any invalid unquoted characters,
 */
  __pyx_t_2 = __pyx_v_length;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "openstep_plist/writer.pyx":73
 * 
 *     for i in range(length):
 *         ch = a[i]             # <<<<<<<<<<<<<<
 *         # if non-ASCII or contains any invalid unquoted characters,
 *         # we must write it with quotes
 */
    __pyx_v_ch = (__pyx_v_a[__pyx_v_i]);

    /* "openstep_plist/writer.pyx":76
 *         # if non-ASCII or contains any invalid unquoted characters,
 *         # we must write it with quotes
 *         if ch > 0x7F or not VALID_UNQUOTED_CHARS[ch]:             # <<<<<<<<<<<<<<
 *             return True
 *         elif is_number:
 */
    __pyx_t_5 = ((__pyx_v_ch > 0x7F) != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_5 = ((!((__pyx_v_14openstep_plist_6writer_VALID_UNQUOTED_CHARS[__pyx_v_ch]) != 0)) != 0);
    __pyx_t_1 = __pyx_t_5;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_1) {

      /* "openstep_plist/writer.pyx":77
 *         # we must write it with quotes
 *         if ch > 0x7F or not VALID_UNQUOTED_CHARS[ch]:
 *             return True             # <<<<<<<<<<<<<<
 *         elif is_number:
 *             # check if the string could be confused with an integer or float;
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "openstep_plist/writer.pyx":76
 *         # if non-ASCII or contains any invalid unquoted characters,
 *         # we must write it with quotes
 *         if ch > 0x7F or not VALID_UNQUOTED_CHARS[ch]:             # <<<<<<<<<<<<<<
 *             return True
 *         elif is_number:
 */
    }

    /* "openstep_plist/writer.pyx":78
 *         if ch > 0x7F or not VALID_UNQUOTED_CHARS[ch]:
 *             return True
 *         elif is_number:             # <<<<<<<<<<<<<<
 *             # check if the string could be confused with an integer or float;
 *             # if so we write it with quotes to disambiguate its type
 */
    __pyx_t_1 = (__pyx_v_is_number != 0);
    if (__pyx_t_1) {

      /* "openstep_plist/writer.pyx":81
 *             # check if the string could be confused with an integer or float;
 *             # if so we write it with quotes to disambiguate its type
 *             if isdigit(ch):             # <<<<<<<<<<<<<<
 *                 continue
 *             elif ch == c".":
 */
      __pyx_t_1 = (isdigit(__pyx_v_ch) != 0);
      if (__pyx_t_1) {

        /* "openstep_plist/writer.pyx":82
 *             # if so we write it with quotes to disambiguate its type
 *             if isdigit(ch):
 *                 continue             # <<<<<<<<<<<<<<
 *             elif ch == c".":
 *                 if not seen_period:
 */
        goto __pyx_L4_continue;

        /* "openstep_plist/writer.pyx":81
 *             # check if the string could be confused with an integer or float;
 *             # if so we write it with quotes to disambiguate its type
 *             if isdigit(ch):             # <<<<<<<<<<<<<<
 *                 continue
 *             elif ch == c".":
 */
      }

      /* "openstep_plist/writer.pyx":83
 *             if isdigit(ch):
 *                 continue
 *             elif ch == c".":             # <<<<<<<<<<<<<<
 *                 if not seen_period:
 *                     seen_period = True
 */
      __pyx_t_1 = ((__pyx_v_ch == '.') != 0);
      if (__pyx_t_1) {

        /* "openstep_plist/writer.pyx":84
 *                 continue
 *             elif ch == c".":
 *                 if not seen_period:             # <<<<<<<<<<<<<<
 *                     seen_period = True
 *                 else:
 */
        __pyx_t_1 = ((!(__pyx_v_seen_period != 0)) != 0);
        if (__pyx_t_1) {

          /* "openstep_plist/writer.pyx":85
 *             elif ch == c".":
 *                 if not seen_period:
 *                     seen_period = True             # <<<<<<<<<<<<<<
 *                 else:
 *                     # if it contains two '.', it can't be a number
 */
          __pyx_v_seen_period = 1;

          /* "openstep_plist/writer.pyx":84
 *                 continue
 *             elif ch == c".":
 *                 if not seen_period:             # <<<<<<<<<<<<<<
 *                     seen_period = True
 *                 else:
 */
          goto __pyx_L10;
        }

        /* "openstep_plist/writer.pyx":88
 *                 else:
 *                     # if it contains two '.', it can't be a number
 *                     is_number = False             # <<<<<<<<<<<<<<
 *             else:
 *                 # if any characters not in ".0123456789", it's not a number
 */
        /*else*/ {
          __pyx_v_is_number = 0;
        }
        __pyx_L10:;

        /* "openstep_plist/writer.pyx":83
 *             if isdigit(ch):
 *                 continue
 *             elif ch == c".":             # <<<<<<<<<<<<<<
 *                 if not seen_period:
 *                     seen_period = True
 */
        goto __pyx_L9;
      }

      /* "openstep_plist/writer.pyx":91
 *             else:
 *                 # if any characters not in ".0123456789", it's not a number
 *                 is_number = False             # <<<<<<<<<<<<<<
 * 
 *     return is_number
 */
      /*else*/ {
        __pyx_v_is_number = 0;
      }
      __pyx_L9:;

      /* "openstep_plist/writer.pyx":78
 *         if ch > 0x7F or not VALID_UNQUOTED_CHARS[ch]:
 *             return True
 *         elif is_number:             # <<<<<<<<<<<<<<
 *             # check if the string could be confused with an integer or float;
 *             # if so we write it with quotes to disambiguate its type
 */
    }
    __pyx_L4_continue:;
  }

  /* "openstep_plist/writer.pyx":93
 *                 is_number = False
 * 
 *     return is_number             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_is_number;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":61
 * 
 * 
 * cdef bint string_needs_quotes(const Py_UNICODE *a, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     # empty string is always quoted
 *     if length == 0:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":96
 * 
 * 
 * cdef inline void escape_unicode(uint16_t ch, Py_UNICODE *dest):             # <<<<<<<<<<<<<<
 *     # caller must ensure 'dest' has rooms for 6 more Py_UNICODE
 *     dest[0] = c'\\'
 */

static CYTHON_INLINE void __pyx_f_14openstep_plist_6writer_escape_unicode(uint16_t __pyx_v_ch, Py_UNICODE *__pyx_v_dest) {
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("escape_unicode", 0);

  /* "openstep_plist/writer.pyx":98
 * cdef inline void escape_unicode(uint16_t ch, Py_UNICODE *dest):
 *     # caller must ensure 'dest' has rooms for 6 more Py_UNICODE
 *     dest[0] = c'\\'             # <<<<<<<<<<<<<<
 *     dest[1] = c'U'
 *     dest[5] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 */
  (__pyx_v_dest[0]) = '\\';

  /* "openstep_plist/writer.pyx":99
 *     # caller must ensure 'dest' has rooms for 6 more Py_UNICODE
 *     dest[0] = c'\\'
 *     dest[1] = c'U'             # <<<<<<<<<<<<<<
 *     dest[5] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 *     ch >>= 4
 */
  (__pyx_v_dest[1]) = 'U';

  /* "openstep_plist/writer.pyx":100
 *     dest[0] = c'\\'
 *     dest[1] = c'U'
 *     dest[5] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48             # <<<<<<<<<<<<<<
 *     ch >>= 4
 *     dest[4] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 */
  if ((((__pyx_v_ch & 15) > 9) != 0)) {
    __pyx_t_1 = ((__pyx_v_ch & 15) + 55);
  } else {
    __pyx_t_1 = ((__pyx_v_ch & 15) + 48);
  }
  (__pyx_v_dest[5]) = __pyx_t_1;

  /* "openstep_plist/writer.pyx":101
 *     dest[1] = c'U'
 *     dest[5] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 *     ch >>= 4             # <<<<<<<<<<<<<<
 *     dest[4] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 *     ch >>= 4
 */
  __pyx_v_ch = (__pyx_v_ch >> 4);

  /* "openstep_plist/writer.pyx":102
 *     dest[5] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 *     ch >>= 4
 *     dest[4] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48             # <<<<<<<<<<<<<<
 *     ch >>= 4
 *     dest[3] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 */
  if ((((__pyx_v_ch & 15) > 9) != 0)) {
    __pyx_t_1 = ((__pyx_v_ch & 15) + 55);
  } else {
    __pyx_t_1 = ((__pyx_v_ch & 15) + 48);
  }
  (__pyx_v_dest[4]) = __pyx_t_1;

  /* "openstep_plist/writer.pyx":103
 *     ch >>= 4
 *     dest[4] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 *     ch >>= 4             # <<<<<<<<<<<<<<
 *     dest[3] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 *     ch >>= 4
 */
  __pyx_v_ch = (__pyx_v_ch >> 4);

  /* "openstep_plist/writer.pyx":104
 *     dest[4] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 *     ch >>= 4
 *     dest[3] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48             # <<<<<<<<<<<<<<
 *     ch >>= 4
 *     dest[2] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 */
  if ((((__pyx_v_ch & 15) > 9) != 0)) {
    __pyx_t_1 = ((__pyx_v_ch & 15) + 55);
  } else {
    __pyx_t_1 = ((__pyx_v_ch & 15) + 48);
  }
  (__pyx_v_dest[3]) = __pyx_t_1;

  /* "openstep_plist/writer.pyx":105
 *     ch >>= 4
 *     dest[3] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 *     ch >>= 4             # <<<<<<<<<<<<<<
 *     dest[2] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 * 
 */
  __pyx_v_ch = (__pyx_v_ch >> 4);

  /* "openstep_plist/writer.pyx":106
 *     dest[3] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48
 *     ch >>= 4
 *     dest[2] = (ch & 15) + 55 if (ch & 15) > 9 else (ch & 15) + 48             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if ((((__pyx_v_ch & 15) > 9) != 0)) {
    __pyx_t_1 = ((__pyx_v_ch & 15) + 55);
  } else {
    __pyx_t_1 = ((__pyx_v_ch & 15) + 48);
  }
  (__pyx_v_dest[2]) = __pyx_t_1;

  /* "openstep_plist/writer.pyx":96
 * 
 * 
 * cdef inline void escape_unicode(uint16_t ch, Py_UNICODE *dest):             # <<<<<<<<<<<<<<
 *     # caller must ensure 'dest' has rooms for 6 more Py_UNICODE
 *     dest[0] = c'\\'
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "openstep_plist/writer.pyx":119
 *     cdef bint single_line_tuples
 * 
 *     def __cinit__(             # <<<<<<<<<<<<<<
 *         self,
 *         bint unicode_escape=True,
 */

/* Python wrapper */
static int __pyx_pw_14openstep_plist_6writer_6Writer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14openstep_plist_6writer_6Writer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_unicode_escape;
  int __pyx_v_float_precision;
  PyObject *__pyx_v_indent = 0;
  int __pyx_v_single_line_tuples;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_unicode_escape,&__pyx_n_s_float_precision,&__pyx_n_s_indent,&__pyx_n_s_single_line_tuples,0};
    PyObject* values[4] = {0,0,0,0};

    /* "openstep_plist/writer.pyx":123
 *         bint unicode_escape=True,
 *         int float_precision=6,
 *         indent=None,             # <<<<<<<<<<<<<<
 *         bint single_line_tuples=False,
 *     ):
 */
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unicode_escape);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_float_precision);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indent);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_single_line_tuples);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 119, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_unicode_escape = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_unicode_escape == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 121, __pyx_L3_error)
    } else {

      /* "openstep_plist/writer.pyx":121
 *     def __cinit__(
 *         self,
 *         bint unicode_escape=True,             # <<<<<<<<<<<<<<
 *         int float_precision=6,
 *         indent=None,
 */
      __pyx_v_unicode_escape = ((int)1);
    }
    if (values[1]) {
      __pyx_v_float_precision = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_float_precision == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L3_error)
    } else {
      __pyx_v_float_precision = ((int)6);
    }
    __pyx_v_indent = values[2];
    if (values[3]) {
      __pyx_v_single_line_tuples = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_single_line_tuples == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L3_error)
    } else {

      /* "openstep_plist/writer.pyx":124
 *         int float_precision=6,
 *         indent=None,
 *         bint single_line_tuples=False,             # <<<<<<<<<<<<<<
 *     ):
 *         self.dest = new vector[Py_UNICODE]()
 */
      __pyx_v_single_line_tuples = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 119, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openstep_plist.writer.Writer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14openstep_plist_6writer_6Writer___cinit__(((struct __pyx_obj_14openstep_plist_6writer_Writer *)__pyx_v_self), __pyx_v_unicode_escape, __pyx_v_float_precision, __pyx_v_indent, __pyx_v_single_line_tuples);

  /* "openstep_plist/writer.pyx":119
 *     cdef bint single_line_tuples
 * 
 *     def __cinit__(             # <<<<<<<<<<<<<<
 *         self,
 *         bint unicode_escape=True,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14openstep_plist_6writer_6Writer___cinit__(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, int __pyx_v_unicode_escape, int __pyx_v_float_precision, PyObject *__pyx_v_indent, int __pyx_v_single_line_tuples) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<Py_UNICODE>  *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "openstep_plist/writer.pyx":126
 *         bint single_line_tuples=False,
 *     ):
 *         self.dest = new vector[Py_UNICODE]()             # <<<<<<<<<<<<<<
 *         self.unicode_escape = unicode_escape
 *         self.float_precision = float_precision
 */
  try {
    __pyx_t_1 = new std::vector<Py_UNICODE> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 126, __pyx_L1_error)
  }
  __pyx_v_self->dest = __pyx_t_1;

  /* "openstep_plist/writer.pyx":127
 *     ):
 *         self.dest = new vector[Py_UNICODE]()
 *         self.unicode_escape = unicode_escape             # <<<<<<<<<<<<<<
 *         self.float_precision = float_precision
 * 
 */
  __pyx_v_self->unicode_escape = __pyx_v_unicode_escape;

  /* "openstep_plist/writer.pyx":128
 *         self.dest = new vector[Py_UNICODE]()
 *         self.unicode_escape = unicode_escape
 *         self.float_precision = float_precision             # <<<<<<<<<<<<<<
 * 
 *         if indent is not None:
 */
  __pyx_v_self->float_precision = __pyx_v_float_precision;

  /* "openstep_plist/writer.pyx":130
 *         self.float_precision = float_precision
 * 
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             if isinstance(indent, basestring):
 *                 self.indent = tounicode(indent)
 */
  __pyx_t_2 = (__pyx_v_indent != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "openstep_plist/writer.pyx":131
 * 
 *         if indent is not None:
 *             if isinstance(indent, basestring):             # <<<<<<<<<<<<<<
 *                 self.indent = tounicode(indent)
 *             else:
 */
    __pyx_t_3 = __Pyx_PyBaseString_Check(__pyx_v_indent); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "openstep_plist/writer.pyx":132
 *         if indent is not None:
 *             if isinstance(indent, basestring):
 *                 self.indent = tounicode(indent)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.indent = ' ' * indent
 */
      __pyx_t_4 = __pyx_f_14openstep_plist_4util_tounicode(__pyx_v_indent, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_v_self->indent);
      __Pyx_DECREF(__pyx_v_self->indent);
      __pyx_v_self->indent = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "openstep_plist/writer.pyx":131
 * 
 *         if indent is not None:
 *             if isinstance(indent, basestring):             # <<<<<<<<<<<<<<
 *                 self.indent = tounicode(indent)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "openstep_plist/writer.pyx":134
 *                 self.indent = tounicode(indent)
 *             else:
 *                 self.indent = ' ' * indent             # <<<<<<<<<<<<<<
 *         else:
 *             self.indent = None
 */
    /*else*/ {
      __pyx_t_4 = PyNumber_Multiply(__pyx_kp_u_, __pyx_v_indent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_v_self->indent);
      __Pyx_DECREF(__pyx_v_self->indent);
      __pyx_v_self->indent = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;
    }
    __pyx_L4:;

    /* "openstep_plist/writer.pyx":130
 *         self.float_precision = float_precision
 * 
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             if isinstance(indent, basestring):
 *                 self.indent = tounicode(indent)
 */
    goto __pyx_L3;
  }

  /* "openstep_plist/writer.pyx":136
 *                 self.indent = ' ' * indent
 *         else:
 *             self.indent = None             # <<<<<<<<<<<<<<
 *         self.single_line_tuples = single_line_tuples
 *         self.current_indent_level = 0
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->indent);
    __Pyx_DECREF(__pyx_v_self->indent);
    __pyx_v_self->indent = ((PyObject*)Py_None);
  }
  __pyx_L3:;

  /* "openstep_plist/writer.pyx":137
 *         else:
 *             self.indent = None
 *         self.single_line_tuples = single_line_tuples             # <<<<<<<<<<<<<<
 *         self.current_indent_level = 0
 * 
 */
  __pyx_v_self->single_line_tuples = __pyx_v_single_line_tuples;

  /* "openstep_plist/writer.pyx":138
 *             self.indent = None
 *         self.single_line_tuples = single_line_tuples
 *         self.current_indent_level = 0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->current_indent_level = 0;

  /* "openstep_plist/writer.pyx":119
 *     cdef bint single_line_tuples
 * 
 *     def __cinit__(             # <<<<<<<<<<<<<<
 *         self,
 *         bint unicode_escape=True,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":140
 *         self.current_indent_level = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.dest
 * 
 */

/* Python wrapper */
static void __pyx_pw_14openstep_plist_6writer_6Writer_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14openstep_plist_6writer_6Writer_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14openstep_plist_6writer_6Writer_2__dealloc__(((struct __pyx_obj_14openstep_plist_6writer_Writer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14openstep_plist_6writer_6Writer_2__dealloc__(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "openstep_plist/writer.pyx":141
 * 
 *     def __dealloc__(self):
 *         del self.dest             # <<<<<<<<<<<<<<
 * 
 *     def getvalue(self):
 */
  delete __pyx_v_self->dest;

  /* "openstep_plist/writer.pyx":140
 *         self.current_indent_level = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.dest
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "openstep_plist/writer.pyx":143
 *         del self.dest
 * 
 *     def getvalue(self):             # <<<<<<<<<<<<<<
 *         return self._getvalue()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14openstep_plist_6writer_6Writer_5getvalue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14openstep_plist_6writer_6Writer_4getvalue[] = "Writer.getvalue(self)";
static PyObject *__pyx_pw_14openstep_plist_6writer_6Writer_5getvalue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getvalue (wrapper)", 0);
  __pyx_r = __pyx_pf_14openstep_plist_6writer_6Writer_4getvalue(((struct __pyx_obj_14openstep_plist_6writer_Writer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14openstep_plist_6writer_6Writer_4getvalue(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getvalue", 0);

  /* "openstep_plist/writer.pyx":144
 * 
 *     def getvalue(self):
 *         return self._getvalue()             # <<<<<<<<<<<<<<
 * 
 *     def dump(self, file):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14openstep_plist_6writer_6Writer__getvalue(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":143
 *         del self.dest
 * 
 *     def getvalue(self):             # <<<<<<<<<<<<<<
 *         return self._getvalue()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.getvalue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":146
 *         return self._getvalue()
 * 
 *     def dump(self, file):             # <<<<<<<<<<<<<<
 *         cdef unicode s = self._getvalue()
 *         # figure out whether file object expects bytes or unicodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_14openstep_plist_6writer_6Writer_7dump(PyObject *__pyx_v_self, PyObject *__pyx_v_file); /*proto*/
static char __pyx_doc_14openstep_plist_6writer_6Writer_6dump[] = "Writer.dump(self, file)";
static PyObject *__pyx_pw_14openstep_plist_6writer_6Writer_7dump(PyObject *__pyx_v_self, PyObject *__pyx_v_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  __pyx_r = __pyx_pf_14openstep_plist_6writer_6Writer_6dump(((struct __pyx_obj_14openstep_plist_6writer_Writer *)__pyx_v_self), ((PyObject *)__pyx_v_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14openstep_plist_6writer_6Writer_6dump(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_file) {
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);

  /* "openstep_plist/writer.pyx":147
 * 
 *     def dump(self, file):
 *         cdef unicode s = self._getvalue()             # <<<<<<<<<<<<<<
 *         # figure out whether file object expects bytes or unicodes
 *         try:
 */
  __pyx_t_1 = __pyx_f_14openstep_plist_6writer_6Writer__getvalue(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openstep_plist/writer.pyx":149
 *         cdef unicode s = self._getvalue()
 *         # figure out whether file object expects bytes or unicodes
 *         try:             # <<<<<<<<<<<<<<
 *             file.write(b"")
 *         except TypeError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "openstep_plist/writer.pyx":150
 *         # figure out whether file object expects bytes or unicodes
 *         try:
 *             file.write(b"")             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             file.write("")  # this better not fail...
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 150, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_kp_b__2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_b__2);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "openstep_plist/writer.pyx":149
 *         cdef unicode s = self._getvalue()
 *         # figure out whether file object expects bytes or unicodes
 *         try:             # <<<<<<<<<<<<<<
 *             file.write(b"")
 *         except TypeError:
 */
    }

    /* "openstep_plist/writer.pyx":157
 *         else:
 *             # file expects bytes; always encode as UTF-8
 *             file.write(PyUnicode_AsUTF8String(s))             # <<<<<<<<<<<<<<
 * 
 *     def write(self, object obj):
 */
    /*else:*/ {
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 157, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyUnicode_AsUTF8String(__pyx_v_s); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 157, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "openstep_plist/writer.pyx":151
 *         try:
 *             file.write(b"")
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             file.write("")  # this better not fail...
 *             # file already accepts unicodes; use it directly
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("openstep_plist.writer.Writer.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 151, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "openstep_plist/writer.pyx":152
 *             file.write(b"")
 *         except TypeError:
 *             file.write("")  # this better not fail...             # <<<<<<<<<<<<<<
 *             # file already accepts unicodes; use it directly
 *             file.write(s)
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 152, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_kp_u__2) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_u__2);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 152, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "openstep_plist/writer.pyx":154
 *             file.write("")  # this better not fail...
 *             # file already accepts unicodes; use it directly
 *             file.write(s)             # <<<<<<<<<<<<<<
 *         else:
 *             # file expects bytes; always encode as UTF-8
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 154, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_v_s) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_s);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "openstep_plist/writer.pyx":149
 *         cdef unicode s = self._getvalue()
 *         # figure out whether file object expects bytes or unicodes
 *         try:             # <<<<<<<<<<<<<<
 *             file.write(b"")
 *         except TypeError:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    __pyx_L8_try_end:;
  }

  /* "openstep_plist/writer.pyx":146
 *         return self._getvalue()
 * 
 *     def dump(self, file):             # <<<<<<<<<<<<<<
 *         cdef unicode s = self._getvalue()
 *         # figure out whether file object expects bytes or unicodes
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":159
 *             file.write(PyUnicode_AsUTF8String(s))
 * 
 *     def write(self, object obj):             # <<<<<<<<<<<<<<
 *         return self.write_object(obj)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14openstep_plist_6writer_6Writer_9write(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static char __pyx_doc_14openstep_plist_6writer_6Writer_8write[] = "Writer.write(self, obj)";
static PyObject *__pyx_pw_14openstep_plist_6writer_6Writer_9write(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_14openstep_plist_6writer_6Writer_8write(((struct __pyx_obj_14openstep_plist_6writer_Writer *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14openstep_plist_6writer_6Writer_8write(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "openstep_plist/writer.pyx":160
 * 
 *     def write(self, object obj):
 *         return self.write_object(obj)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline Py_ssize_t extend_buffer(
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14openstep_plist_6writer_6Writer_write_object(__pyx_v_self, __pyx_v_obj); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 160, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":159
 *             file.write(PyUnicode_AsUTF8String(s))
 * 
 *     def write(self, object obj):             # <<<<<<<<<<<<<<
 *         return self.write_object(obj)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":162
 *         return self.write_object(obj)
 * 
 *     cdef inline Py_ssize_t extend_buffer(             # <<<<<<<<<<<<<<
 *         self, const Py_UNICODE *s, Py_ssize_t length
 *     ) except +:
 */

static CYTHON_INLINE Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, Py_UNICODE const *__pyx_v_s, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "openstep_plist/writer.pyx":165
 *         self, const Py_UNICODE *s, Py_ssize_t length
 *     ) except +:
 *         self.dest.reserve(self.dest.size() + length)             # <<<<<<<<<<<<<<
 *         copy(s, s + length, back_inserter(self.dest[0]))
 *         return length
 */
  __pyx_v_self->dest->reserve((__pyx_v_self->dest->size() + __pyx_v_length));

  /* "openstep_plist/writer.pyx":166
 *     ) except +:
 *         self.dest.reserve(self.dest.size() + length)
 *         copy(s, s + length, back_inserter(self.dest[0]))             # <<<<<<<<<<<<<<
 *         return length
 * 
 */
  (void)(std::copy<Py_UNICODE const *,std::back_insert_iterator<std::vector<Py_UNICODE> > >(__pyx_v_s, (__pyx_v_s + __pyx_v_length), std::back_inserter<std::vector<Py_UNICODE> >((__pyx_v_self->dest[0]))));

  /* "openstep_plist/writer.pyx":167
 *         self.dest.reserve(self.dest.size() + length)
 *         copy(s, s + length, back_inserter(self.dest[0]))
 *         return length             # <<<<<<<<<<<<<<
 * 
 *     cdef inline unicode _getvalue(self):
 */
  __pyx_r = __pyx_v_length;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":162
 *         return self.write_object(obj)
 * 
 *     cdef inline Py_ssize_t extend_buffer(             # <<<<<<<<<<<<<<
 *         self, const Py_UNICODE *s, Py_ssize_t length
 *     ) except +:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":169
 *         return length
 * 
 *     cdef inline unicode _getvalue(self):             # <<<<<<<<<<<<<<
 *         return PyUnicode_FromUnicode(
 *             <const Py_UNICODE*>self.dest.const_data(), self.dest.size()
 */

static CYTHON_INLINE PyObject *__pyx_f_14openstep_plist_6writer_6Writer__getvalue(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getvalue", 0);

  /* "openstep_plist/writer.pyx":170
 * 
 *     cdef inline unicode _getvalue(self):
 *         return PyUnicode_FromUnicode(             # <<<<<<<<<<<<<<
 *             <const Py_UNICODE*>self.dest.const_data(), self.dest.size()
 *         )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "openstep_plist/writer.pyx":171
 *     cdef inline unicode _getvalue(self):
 *         return PyUnicode_FromUnicode(
 *             <const Py_UNICODE*>self.dest.const_data(), self.dest.size()             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_1 = PyUnicode_FromUnicode(((Py_UNICODE const *)__pyx_v_self->dest->data()), __pyx_v_self->dest->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":169
 *         return length
 * 
 *     cdef inline unicode _getvalue(self):             # <<<<<<<<<<<<<<
 *         return PyUnicode_FromUnicode(
 *             <const Py_UNICODE*>self.dest.const_data(), self.dest.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openstep_plist.writer.Writer._getvalue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":174
 *         )
 * 
 *     cdef Py_ssize_t write_object(self, object obj) except -1:             # <<<<<<<<<<<<<<
 *         if obj is None:
 *             return self.write_string("(nil)")
 */

static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_object(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_obj) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char __pyx_t_5;
  int __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_object", 0);

  /* "openstep_plist/writer.pyx":175
 * 
 *     cdef Py_ssize_t write_object(self, object obj) except -1:
 *         if obj is None:             # <<<<<<<<<<<<<<
 *             return self.write_string("(nil)")
 *         if isinstance(obj, unicode):
 */
  __pyx_t_1 = (__pyx_v_obj == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openstep_plist/writer.pyx":176
 *     cdef Py_ssize_t write_object(self, object obj) except -1:
 *         if obj is None:
 *             return self.write_string("(nil)")             # <<<<<<<<<<<<<<
 *         if isinstance(obj, unicode):
 *             return self.write_string(obj)
 */
    __pyx_t_3 = __pyx_f_14openstep_plist_6writer_6Writer_write_string(__pyx_v_self, __pyx_kp_u_nil); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 176, __pyx_L1_error)
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":175
 * 
 *     cdef Py_ssize_t write_object(self, object obj) except -1:
 *         if obj is None:             # <<<<<<<<<<<<<<
 *             return self.write_string("(nil)")
 *         if isinstance(obj, unicode):
 */
  }

  /* "openstep_plist/writer.pyx":177
 *         if obj is None:
 *             return self.write_string("(nil)")
 *         if isinstance(obj, unicode):             # <<<<<<<<<<<<<<
 *             return self.write_string(obj)
 *         elif isinstance(obj, bool):
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_obj); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/writer.pyx":178
 *             return self.write_string("(nil)")
 *         if isinstance(obj, unicode):
 *             return self.write_string(obj)             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, bool):
 *             self.dest.push_back(c'1' if obj else c'0')
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_obj))||((__pyx_v_obj) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_obj)->tp_name), 0))) __PYX_ERR(0, 178, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_14openstep_plist_6writer_6Writer_write_string(__pyx_v_self, ((PyObject*)__pyx_v_obj)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 178, __pyx_L1_error)
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":177
 *         if obj is None:
 *             return self.write_string("(nil)")
 *         if isinstance(obj, unicode):             # <<<<<<<<<<<<<<
 *             return self.write_string(obj)
 *         elif isinstance(obj, bool):
 */
  }

  /* "openstep_plist/writer.pyx":179
 *         if isinstance(obj, unicode):
 *             return self.write_string(obj)
 *         elif isinstance(obj, bool):             # <<<<<<<<<<<<<<
 *             self.dest.push_back(c'1' if obj else c'0')
 *             return 1
 */
  __pyx_t_4 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_obj, __pyx_t_4); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openstep_plist/writer.pyx":180
 *             return self.write_string(obj)
 *         elif isinstance(obj, bool):
 *             self.dest.push_back(c'1' if obj else c'0')             # <<<<<<<<<<<<<<
 *             return 1
 *         elif isinstance(obj, float):
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
    if (__pyx_t_2) {
      __pyx_t_5 = '1';
    } else {
      __pyx_t_5 = '0';
    }
    try {
      __pyx_v_self->dest->push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 180, __pyx_L1_error)
    }

    /* "openstep_plist/writer.pyx":181
 *         elif isinstance(obj, bool):
 *             self.dest.push_back(c'1' if obj else c'0')
 *             return 1             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, float):
 *             return self.write_short_float_repr(obj)
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":179
 *         if isinstance(obj, unicode):
 *             return self.write_string(obj)
 *         elif isinstance(obj, bool):             # <<<<<<<<<<<<<<
 *             self.dest.push_back(c'1' if obj else c'0')
 *             return 1
 */
  }

  /* "openstep_plist/writer.pyx":182
 *             self.dest.push_back(c'1' if obj else c'0')
 *             return 1
 *         elif isinstance(obj, float):             # <<<<<<<<<<<<<<
 *             return self.write_short_float_repr(obj)
 *         elif isinstance(obj, (int, long)):
 */
  __pyx_t_2 = PyFloat_Check(__pyx_v_obj); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/writer.pyx":183
 *             return 1
 *         elif isinstance(obj, float):
 *             return self.write_short_float_repr(obj)             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, (int, long)):
 *             return self.write_unquoted_string(unicode(obj))
 */
    __pyx_t_3 = __pyx_f_14openstep_plist_6writer_6Writer_write_short_float_repr(__pyx_v_self, __pyx_v_obj); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 183, __pyx_L1_error)
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":182
 *             self.dest.push_back(c'1' if obj else c'0')
 *             return 1
 *         elif isinstance(obj, float):             # <<<<<<<<<<<<<<
 *             return self.write_short_float_repr(obj)
 *         elif isinstance(obj, (int, long)):
 */
  }

  /* "openstep_plist/writer.pyx":184
 *         elif isinstance(obj, float):
 *             return self.write_short_float_repr(obj)
 *         elif isinstance(obj, (int, long)):             # <<<<<<<<<<<<<<
 *             return self.write_unquoted_string(unicode(obj))
 *         elif isinstance(obj, list):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_obj); 
  __pyx_t_6 = (__pyx_t_2 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = PyLong_Check(__pyx_v_obj); 
  __pyx_t_2 = (__pyx_t_6 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openstep_plist/writer.pyx":185
 *             return self.write_short_float_repr(obj)
 *         elif isinstance(obj, (int, long)):
 *             return self.write_unquoted_string(unicode(obj))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, list):
 *             return self.write_array_from_list(obj)
 */
    __pyx_t_4 = __Pyx_PyObject_Unicode(__pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, ((PyObject*)__pyx_t_4)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":184
 *         elif isinstance(obj, float):
 *             return self.write_short_float_repr(obj)
 *         elif isinstance(obj, (int, long)):             # <<<<<<<<<<<<<<
 *             return self.write_unquoted_string(unicode(obj))
 *         elif isinstance(obj, list):
 */
  }

  /* "openstep_plist/writer.pyx":186
 *         elif isinstance(obj, (int, long)):
 *             return self.write_unquoted_string(unicode(obj))
 *         elif isinstance(obj, list):             # <<<<<<<<<<<<<<
 *             return self.write_array_from_list(obj)
 *         elif isinstance(obj, tuple):
 */
  __pyx_t_2 = PyList_Check(__pyx_v_obj); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/writer.pyx":187
 *             return self.write_unquoted_string(unicode(obj))
 *         elif isinstance(obj, list):
 *             return self.write_array_from_list(obj)             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, tuple):
 *             return self.write_array_from_tuple(obj)
 */
    if (!(likely(PyList_CheckExact(__pyx_v_obj))||((__pyx_v_obj) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_obj)->tp_name), 0))) __PYX_ERR(0, 187, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_14openstep_plist_6writer_6Writer_write_array_from_list(__pyx_v_self, ((PyObject*)__pyx_v_obj)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 187, __pyx_L1_error)
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":186
 *         elif isinstance(obj, (int, long)):
 *             return self.write_unquoted_string(unicode(obj))
 *         elif isinstance(obj, list):             # <<<<<<<<<<<<<<
 *             return self.write_array_from_list(obj)
 *         elif isinstance(obj, tuple):
 */
  }

  /* "openstep_plist/writer.pyx":188
 *         elif isinstance(obj, list):
 *             return self.write_array_from_list(obj)
 *         elif isinstance(obj, tuple):             # <<<<<<<<<<<<<<
 *             return self.write_array_from_tuple(obj)
 *         elif isinstance(obj, OrderedDict):
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_obj); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openstep_plist/writer.pyx":189
 *             return self.write_array_from_list(obj)
 *         elif isinstance(obj, tuple):
 *             return self.write_array_from_tuple(obj)             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, OrderedDict):
 *             return self.write_ordered_dict(obj)
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v_obj))||((__pyx_v_obj) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_obj)->tp_name), 0))) __PYX_ERR(0, 189, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_14openstep_plist_6writer_6Writer_write_array_from_tuple(__pyx_v_self, ((PyObject*)__pyx_v_obj)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 189, __pyx_L1_error)
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":188
 *         elif isinstance(obj, list):
 *             return self.write_array_from_list(obj)
 *         elif isinstance(obj, tuple):             # <<<<<<<<<<<<<<
 *             return self.write_array_from_tuple(obj)
 *         elif isinstance(obj, OrderedDict):
 */
  }

  /* "openstep_plist/writer.pyx":190
 *         elif isinstance(obj, tuple):
 *             return self.write_array_from_tuple(obj)
 *         elif isinstance(obj, OrderedDict):             # <<<<<<<<<<<<<<
 *             return self.write_ordered_dict(obj)
 *         elif isinstance(obj, dict):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_obj, __pyx_t_4); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/writer.pyx":191
 *             return self.write_array_from_tuple(obj)
 *         elif isinstance(obj, OrderedDict):
 *             return self.write_ordered_dict(obj)             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, dict):
 *             return self.write_dict(obj)
 */
    __pyx_t_3 = __pyx_f_14openstep_plist_6writer_6Writer_write_ordered_dict(__pyx_v_self, __pyx_v_obj); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 191, __pyx_L1_error)
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":190
 *         elif isinstance(obj, tuple):
 *             return self.write_array_from_tuple(obj)
 *         elif isinstance(obj, OrderedDict):             # <<<<<<<<<<<<<<
 *             return self.write_ordered_dict(obj)
 *         elif isinstance(obj, dict):
 */
  }

  /* "openstep_plist/writer.pyx":192
 *         elif isinstance(obj, OrderedDict):
 *             return self.write_ordered_dict(obj)
 *         elif isinstance(obj, dict):             # <<<<<<<<<<<<<<
 *             return self.write_dict(obj)
 *         elif isinstance(obj, bytes):
 */
  __pyx_t_1 = PyDict_Check(__pyx_v_obj); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openstep_plist/writer.pyx":193
 *             return self.write_ordered_dict(obj)
 *         elif isinstance(obj, dict):
 *             return self.write_dict(obj)             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, bytes):
 *             return self.write_data(obj)
 */
    if (!(likely(PyDict_CheckExact(__pyx_v_obj))||((__pyx_v_obj) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_obj)->tp_name), 0))) __PYX_ERR(0, 193, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_14openstep_plist_6writer_6Writer_write_dict(__pyx_v_self, ((PyObject*)__pyx_v_obj)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 193, __pyx_L1_error)
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":192
 *         elif isinstance(obj, OrderedDict):
 *             return self.write_ordered_dict(obj)
 *         elif isinstance(obj, dict):             # <<<<<<<<<<<<<<
 *             return self.write_dict(obj)
 *         elif isinstance(obj, bytes):
 */
  }

  /* "openstep_plist/writer.pyx":194
 *         elif isinstance(obj, dict):
 *             return self.write_dict(obj)
 *         elif isinstance(obj, bytes):             # <<<<<<<<<<<<<<
 *             return self.write_data(obj)
 *         else:
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_obj); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "openstep_plist/writer.pyx":195
 *             return self.write_dict(obj)
 *         elif isinstance(obj, bytes):
 *             return self.write_data(obj)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError(
 */
    if (!(likely(PyBytes_CheckExact(__pyx_v_obj))||((__pyx_v_obj) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_obj)->tp_name), 0))) __PYX_ERR(0, 195, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_14openstep_plist_6writer_6Writer_write_data(__pyx_v_self, ((PyObject*)__pyx_v_obj)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 195, __pyx_L1_error)
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":194
 *         elif isinstance(obj, dict):
 *             return self.write_dict(obj)
 *         elif isinstance(obj, bytes):             # <<<<<<<<<<<<<<
 *             return self.write_data(obj)
 *         else:
 */
  }

  /* "openstep_plist/writer.pyx":197
 *             return self.write_data(obj)
 *         else:
 *             raise TypeError(             # <<<<<<<<<<<<<<
 *                 f"Object of type {type(obj).__name__} is not PLIST serializable"
 *             )
 */
  /*else*/ {

    /* "openstep_plist/writer.pyx":198
 *         else:
 *             raise TypeError(
 *                 f"Object of type {type(obj).__name__} is not PLIST serializable"             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Object_of_type);
    __pyx_t_3 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_Object_of_type);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Object_of_type);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_v_obj)), __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_not_PLIST_serializable);
    __pyx_t_3 += 26;
    __Pyx_GIVEREF(__pyx_kp_u_is_not_PLIST_serializable);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_is_not_PLIST_serializable);
    __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "openstep_plist/writer.pyx":197
 *             return self.write_data(obj)
 *         else:
 *             raise TypeError(             # <<<<<<<<<<<<<<
 *                 f"Object of type {type(obj).__name__} is not PLIST serializable"
 *             )
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 197, __pyx_L1_error)
  }

  /* "openstep_plist/writer.pyx":174
 *         )
 * 
 *     cdef Py_ssize_t write_object(self, object obj) except -1:             # <<<<<<<<<<<<<<
 *         if obj is None:
 *             return self.write_string("(nil)")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":201
 *             )
 * 
 *     cdef Py_ssize_t write_quoted_string(             # <<<<<<<<<<<<<<
 *         self, const Py_UNICODE *s, Py_ssize_t length
 *     ) except -1:
 */

static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_quoted_string(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, Py_UNICODE const *__pyx_v_s, Py_ssize_t __pyx_v_length) {
  std::vector<Py_UNICODE>  *__pyx_v_dest;
  int __pyx_v_unicode_escape;
  Py_UNICODE const *__pyx_v_curr;
  Py_UNICODE const *__pyx_v_end;
  Py_UNICODE *__pyx_v_ptr;
  unsigned long __pyx_v_ch;
  Py_ssize_t __pyx_v_base_length;
  Py_ssize_t __pyx_v_new_length;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<Py_UNICODE>  *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_quoted_string", 0);

  /* "openstep_plist/writer.pyx":206
 * 
 *         cdef:
 *             vector[Py_UNICODE] *dest = self.dest             # <<<<<<<<<<<<<<
 *             bint unicode_escape = self.unicode_escape
 *             const Py_UNICODE *curr = s
 */
  __pyx_t_1 = __pyx_v_self->dest;
  __pyx_v_dest = __pyx_t_1;

  /* "openstep_plist/writer.pyx":207
 *         cdef:
 *             vector[Py_UNICODE] *dest = self.dest
 *             bint unicode_escape = self.unicode_escape             # <<<<<<<<<<<<<<
 *             const Py_UNICODE *curr = s
 *             const Py_UNICODE *end = &s[length]
 */
  __pyx_t_2 = __pyx_v_self->unicode_escape;
  __pyx_v_unicode_escape = __pyx_t_2;

  /* "openstep_plist/writer.pyx":208
 *             vector[Py_UNICODE] *dest = self.dest
 *             bint unicode_escape = self.unicode_escape
 *             const Py_UNICODE *curr = s             # <<<<<<<<<<<<<<
 *             const Py_UNICODE *end = &s[length]
 *             Py_UNICODE *ptr
 */
  __pyx_v_curr = __pyx_v_s;

  /* "openstep_plist/writer.pyx":209
 *             bint unicode_escape = self.unicode_escape
 *             const Py_UNICODE *curr = s
 *             const Py_UNICODE *end = &s[length]             # <<<<<<<<<<<<<<
 *             Py_UNICODE *ptr
 *             unsigned long ch
 */
  __pyx_v_end = (&(__pyx_v_s[__pyx_v_length]));

  /* "openstep_plist/writer.pyx":212
 *             Py_UNICODE *ptr
 *             unsigned long ch
 *             Py_ssize_t base_length = dest.size()             # <<<<<<<<<<<<<<
 *             Py_ssize_t new_length = 0
 * 
 */
  __pyx_v_base_length = __pyx_v_dest->size();

  /* "openstep_plist/writer.pyx":213
 *             unsigned long ch
 *             Py_ssize_t base_length = dest.size()
 *             Py_ssize_t new_length = 0             # <<<<<<<<<<<<<<
 * 
 *         while curr < end:
 */
  __pyx_v_new_length = 0;

  /* "openstep_plist/writer.pyx":215
 *             Py_ssize_t new_length = 0
 * 
 *         while curr < end:             # <<<<<<<<<<<<<<
 *             ch = curr[0]
 *             if ch == c'\t' or ch == c' ':
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_curr < __pyx_v_end) != 0);
    if (!__pyx_t_2) break;

    /* "openstep_plist/writer.pyx":216
 * 
 *         while curr < end:
 *             ch = curr[0]             # <<<<<<<<<<<<<<
 *             if ch == c'\t' or ch == c' ':
 *                 new_length += 1
 */
    __pyx_v_ch = (__pyx_v_curr[0]);

    /* "openstep_plist/writer.pyx":217
 *         while curr < end:
 *             ch = curr[0]
 *             if ch == c'\t' or ch == c' ':             # <<<<<<<<<<<<<<
 *                 new_length += 1
 *             elif (
 */
    switch (__pyx_v_ch) {
      case '\t':
      case ' ':

      /* "openstep_plist/writer.pyx":218
 *             ch = curr[0]
 *             if ch == c'\t' or ch == c' ':
 *                 new_length += 1             # <<<<<<<<<<<<<<
 *             elif (
 *                 ch == c'\n' or ch == c'\\' or ch == c'"' or ch == c'\a'
 */
      __pyx_v_new_length = (__pyx_v_new_length + 1);

      /* "openstep_plist/writer.pyx":217
 *         while curr < end:
 *             ch = curr[0]
 *             if ch == c'\t' or ch == c' ':             # <<<<<<<<<<<<<<
 *                 new_length += 1
 *             elif (
 */
      break;
      case '\n':

      /* "openstep_plist/writer.pyx":220
 *                 new_length += 1
 *             elif (
 *                 ch == c'\n' or ch == c'\\' or ch == c'"' or ch == c'\a'             # <<<<<<<<<<<<<<
 *                 or ch == c'\b' or ch == c'\v' or ch == c'\f' or ch == c'\r'
 *             ):
 */
      case '\\':
      case '"':
      case '\x07':
      case '\x08':

      /* "openstep_plist/writer.pyx":221
 *             elif (
 *                 ch == c'\n' or ch == c'\\' or ch == c'"' or ch == c'\a'
 *                 or ch == c'\b' or ch == c'\v' or ch == c'\f' or ch == c'\r'             # <<<<<<<<<<<<<<
 *             ):
 *                 new_length += 2
 */
      case '\x0B':
      case '\x0C':
      case '\r':

      /* "openstep_plist/writer.pyx":223
 *                 or ch == c'\b' or ch == c'\v' or ch == c'\f' or ch == c'\r'
 *             ):
 *                 new_length += 2             # <<<<<<<<<<<<<<
 *             else:
 *                 if ch < 128:
 */
      __pyx_v_new_length = (__pyx_v_new_length + 2);

      /* "openstep_plist/writer.pyx":219
 *             if ch == c'\t' or ch == c' ':
 *                 new_length += 1
 *             elif (             # <<<<<<<<<<<<<<
 *                 ch == c'\n' or ch == c'\\' or ch == c'"' or ch == c'\a'
 *                 or ch == c'\b' or ch == c'\v' or ch == c'\f' or ch == c'\r'
 */
      break;
      default:

      /* "openstep_plist/writer.pyx":225
 *                 new_length += 2
 *             else:
 *                 if ch < 128:             # <<<<<<<<<<<<<<
 *                     if isprint(ch):
 *                         new_length += 1
 */
      __pyx_t_2 = ((__pyx_v_ch < 0x80) != 0);
      if (__pyx_t_2) {

        /* "openstep_plist/writer.pyx":226
 *             else:
 *                 if ch < 128:
 *                     if isprint(ch):             # <<<<<<<<<<<<<<
 *                         new_length += 1
 *                     else:
 */
        __pyx_t_2 = (isprint(__pyx_v_ch) != 0);
        if (__pyx_t_2) {

          /* "openstep_plist/writer.pyx":227
 *                 if ch < 128:
 *                     if isprint(ch):
 *                         new_length += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         new_length += 4
 */
          __pyx_v_new_length = (__pyx_v_new_length + 1);

          /* "openstep_plist/writer.pyx":226
 *             else:
 *                 if ch < 128:
 *                     if isprint(ch):             # <<<<<<<<<<<<<<
 *                         new_length += 1
 *                     else:
 */
          goto __pyx_L6;
        }

        /* "openstep_plist/writer.pyx":229
 *                         new_length += 1
 *                     else:
 *                         new_length += 4             # <<<<<<<<<<<<<<
 *                 elif unicode_escape:
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:
 */
        /*else*/ {
          __pyx_v_new_length = (__pyx_v_new_length + 4);
        }
        __pyx_L6:;

        /* "openstep_plist/writer.pyx":225
 *                 new_length += 2
 *             else:
 *                 if ch < 128:             # <<<<<<<<<<<<<<
 *                     if isprint(ch):
 *                         new_length += 1
 */
        goto __pyx_L5;
      }

      /* "openstep_plist/writer.pyx":230
 *                     else:
 *                         new_length += 4
 *                 elif unicode_escape:             # <<<<<<<<<<<<<<
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:
 *                         new_length += 12
 */
      __pyx_t_2 = (__pyx_v_unicode_escape != 0);
      if (__pyx_t_2) {

        /* "openstep_plist/writer.pyx":231
 *                         new_length += 4
 *                 elif unicode_escape:
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:             # <<<<<<<<<<<<<<
 *                         new_length += 12
 *                     else:
 */
        __pyx_t_3 = ((__pyx_v_ch > 0xFFFF) != 0);
        if (__pyx_t_3) {
        } else {
          __pyx_t_2 = __pyx_t_3;
          goto __pyx_L8_bool_binop_done;
        }
        __pyx_t_3 = ((!(__pyx_v_14openstep_plist_4util_PY_NARROW_UNICODE != 0)) != 0);
        __pyx_t_2 = __pyx_t_3;
        __pyx_L8_bool_binop_done:;
        if (__pyx_t_2) {

          /* "openstep_plist/writer.pyx":232
 *                 elif unicode_escape:
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:
 *                         new_length += 12             # <<<<<<<<<<<<<<
 *                     else:
 *                         new_length += 6
 */
          __pyx_v_new_length = (__pyx_v_new_length + 12);

          /* "openstep_plist/writer.pyx":231
 *                         new_length += 4
 *                 elif unicode_escape:
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:             # <<<<<<<<<<<<<<
 *                         new_length += 12
 *                     else:
 */
          goto __pyx_L7;
        }

        /* "openstep_plist/writer.pyx":234
 *                         new_length += 12
 *                     else:
 *                         new_length += 6             # <<<<<<<<<<<<<<
 *                 else:
 *                     new_length += 1
 */
        /*else*/ {
          __pyx_v_new_length = (__pyx_v_new_length + 6);
        }
        __pyx_L7:;

        /* "openstep_plist/writer.pyx":230
 *                     else:
 *                         new_length += 4
 *                 elif unicode_escape:             # <<<<<<<<<<<<<<
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:
 *                         new_length += 12
 */
        goto __pyx_L5;
      }

      /* "openstep_plist/writer.pyx":236
 *                         new_length += 6
 *                 else:
 *                     new_length += 1             # <<<<<<<<<<<<<<
 *             curr += 1
 * 
 */
      /*else*/ {
        __pyx_v_new_length = (__pyx_v_new_length + 1);
      }
      __pyx_L5:;
      break;
    }

    /* "openstep_plist/writer.pyx":237
 *                 else:
 *                     new_length += 1
 *             curr += 1             # <<<<<<<<<<<<<<
 * 
 *         dest.resize(base_length + new_length + 2)
 */
    __pyx_v_curr = (__pyx_v_curr + 1);
  }

  /* "openstep_plist/writer.pyx":239
 *             curr += 1
 * 
 *         dest.resize(base_length + new_length + 2)             # <<<<<<<<<<<<<<
 *         ptr = <Py_UNICODE*>dest.data() + base_length
 *         ptr[0] = '"'
 */
  try {
    __pyx_v_dest->resize(((__pyx_v_base_length + __pyx_v_new_length) + 2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 239, __pyx_L1_error)
  }

  /* "openstep_plist/writer.pyx":240
 * 
 *         dest.resize(base_length + new_length + 2)
 *         ptr = <Py_UNICODE*>dest.data() + base_length             # <<<<<<<<<<<<<<
 *         ptr[0] = '"'
 *         ptr += 1
 */
  __pyx_v_ptr = (((Py_UNICODE *)__pyx_v_dest->data()) + __pyx_v_base_length);

  /* "openstep_plist/writer.pyx":241
 *         dest.resize(base_length + new_length + 2)
 *         ptr = <Py_UNICODE*>dest.data() + base_length
 *         ptr[0] = '"'             # <<<<<<<<<<<<<<
 *         ptr += 1
 * 
 */
  (__pyx_v_ptr[0]) = 34;

  /* "openstep_plist/writer.pyx":242
 *         ptr = <Py_UNICODE*>dest.data() + base_length
 *         ptr[0] = '"'
 *         ptr += 1             # <<<<<<<<<<<<<<
 * 
 *         curr = s
 */
  __pyx_v_ptr = (__pyx_v_ptr + 1);

  /* "openstep_plist/writer.pyx":244
 *         ptr += 1
 * 
 *         curr = s             # <<<<<<<<<<<<<<
 *         while curr < end:
 *             ch = curr[0]
 */
  __pyx_v_curr = __pyx_v_s;

  /* "openstep_plist/writer.pyx":245
 * 
 *         curr = s
 *         while curr < end:             # <<<<<<<<<<<<<<
 *             ch = curr[0]
 *             if ch == c'\t' or ch == c' ':
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_curr < __pyx_v_end) != 0);
    if (!__pyx_t_2) break;

    /* "openstep_plist/writer.pyx":246
 *         curr = s
 *         while curr < end:
 *             ch = curr[0]             # <<<<<<<<<<<<<<
 *             if ch == c'\t' or ch == c' ':
 *                 ptr[0] = ch
 */
    __pyx_v_ch = (__pyx_v_curr[0]);

    /* "openstep_plist/writer.pyx":247
 *         while curr < end:
 *             ch = curr[0]
 *             if ch == c'\t' or ch == c' ':             # <<<<<<<<<<<<<<
 *                 ptr[0] = ch
 *                 ptr += 1
 */
    switch (__pyx_v_ch) {
      case '\t':
      case ' ':

      /* "openstep_plist/writer.pyx":248
 *             ch = curr[0]
 *             if ch == c'\t' or ch == c' ':
 *                 ptr[0] = ch             # <<<<<<<<<<<<<<
 *                 ptr += 1
 *             elif ch == c'\n':
 */
      (__pyx_v_ptr[0]) = __pyx_v_ch;

      /* "openstep_plist/writer.pyx":249
 *             if ch == c'\t' or ch == c' ':
 *                 ptr[0] = ch
 *                 ptr += 1             # <<<<<<<<<<<<<<
 *             elif ch == c'\n':
 *                 ptr[0] = c'\\'; ptr[1] = c'n'; ptr += 2
 */
      __pyx_v_ptr = (__pyx_v_ptr + 1);

      /* "openstep_plist/writer.pyx":247
 *         while curr < end:
 *             ch = curr[0]
 *             if ch == c'\t' or ch == c' ':             # <<<<<<<<<<<<<<
 *                 ptr[0] = ch
 *                 ptr += 1
 */
      break;
      case '\n':

      /* "openstep_plist/writer.pyx":251
 *                 ptr += 1
 *             elif ch == c'\n':
 *                 ptr[0] = c'\\'; ptr[1] = c'n'; ptr += 2             # <<<<<<<<<<<<<<
 *             elif ch == c'\a':
 *                 ptr[0] = c'\\'; ptr[1] = c'a'; ptr += 2
 */
      (__pyx_v_ptr[0]) = '\\';
      (__pyx_v_ptr[1]) = 'n';
      __pyx_v_ptr = (__pyx_v_ptr + 2);

      /* "openstep_plist/writer.pyx":250
 *                 ptr[0] = ch
 *                 ptr += 1
 *             elif ch == c'\n':             # <<<<<<<<<<<<<<
 *                 ptr[0] = c'\\'; ptr[1] = c'n'; ptr += 2
 *             elif ch == c'\a':
 */
      break;
      case '\x07':

      /* "openstep_plist/writer.pyx":253
 *                 ptr[0] = c'\\'; ptr[1] = c'n'; ptr += 2
 *             elif ch == c'\a':
 *                 ptr[0] = c'\\'; ptr[1] = c'a'; ptr += 2             # <<<<<<<<<<<<<<
 *             elif ch == c'\b':
 *                 ptr[0] = c'\\'; ptr[1] = c'b'; ptr += 2
 */
      (__pyx_v_ptr[0]) = '\\';
      (__pyx_v_ptr[1]) = 'a';
      __pyx_v_ptr = (__pyx_v_ptr + 2);

      /* "openstep_plist/writer.pyx":252
 *             elif ch == c'\n':
 *                 ptr[0] = c'\\'; ptr[1] = c'n'; ptr += 2
 *             elif ch == c'\a':             # <<<<<<<<<<<<<<
 *                 ptr[0] = c'\\'; ptr[1] = c'a'; ptr += 2
 *             elif ch == c'\b':
 */
      break;
      case '\x08':

      /* "openstep_plist/writer.pyx":255
 *                 ptr[0] = c'\\'; ptr[1] = c'a'; ptr += 2
 *             elif ch == c'\b':
 *                 ptr[0] = c'\\'; ptr[1] = c'b'; ptr += 2             # <<<<<<<<<<<<<<
 *             elif ch == c'\v':
 *                 ptr[0] = c'\\'; ptr[1] = c'v'; ptr += 2
 */
      (__pyx_v_ptr[0]) = '\\';
      (__pyx_v_ptr[1]) = 'b';
      __pyx_v_ptr = (__pyx_v_ptr + 2);

      /* "openstep_plist/writer.pyx":254
 *             elif ch == c'\a':
 *                 ptr[0] = c'\\'; ptr[1] = c'a'; ptr += 2
 *             elif ch == c'\b':             # <<<<<<<<<<<<<<
 *                 ptr[0] = c'\\'; ptr[1] = c'b'; ptr += 2
 *             elif ch == c'\v':
 */
      break;
      case '\x0B':

      /* "openstep_plist/writer.pyx":257
 *                 ptr[0] = c'\\'; ptr[1] = c'b'; ptr += 2
 *             elif ch == c'\v':
 *                 ptr[0] = c'\\'; ptr[1] = c'v'; ptr += 2             # <<<<<<<<<<<<<<
 *             elif ch == c'\f':
 *                 ptr[0] = c'\\'; ptr[1] = c'f'; ptr += 2
 */
      (__pyx_v_ptr[0]) = '\\';
      (__pyx_v_ptr[1]) = 'v';
      __pyx_v_ptr = (__pyx_v_ptr + 2);

      /* "openstep_plist/writer.pyx":256
 *             elif ch == c'\b':
 *                 ptr[0] = c'\\'; ptr[1] = c'b'; ptr += 2
 *             elif ch == c'\v':             # <<<<<<<<<<<<<<
 *                 ptr[0] = c'\\'; ptr[1] = c'v'; ptr += 2
 *             elif ch == c'\f':
 */
      break;
      case '\x0C':

      /* "openstep_plist/writer.pyx":259
 *                 ptr[0] = c'\\'; ptr[1] = c'v'; ptr += 2
 *             elif ch == c'\f':
 *                 ptr[0] = c'\\'; ptr[1] = c'f'; ptr += 2             # <<<<<<<<<<<<<<
 *             elif ch == c'\\':
 *                 ptr[0] = c'\\'; ptr[1] = c'\\'; ptr += 2
 */
      (__pyx_v_ptr[0]) = '\\';
      (__pyx_v_ptr[1]) = 'f';
      __pyx_v_ptr = (__pyx_v_ptr + 2);

      /* "openstep_plist/writer.pyx":258
 *             elif ch == c'\v':
 *                 ptr[0] = c'\\'; ptr[1] = c'v'; ptr += 2
 *             elif ch == c'\f':             # <<<<<<<<<<<<<<
 *                 ptr[0] = c'\\'; ptr[1] = c'f'; ptr += 2
 *             elif ch == c'\\':
 */
      break;
      case '\\':

      /* "openstep_plist/writer.pyx":261
 *                 ptr[0] = c'\\'; ptr[1] = c'f'; ptr += 2
 *             elif ch == c'\\':
 *                 ptr[0] = c'\\'; ptr[1] = c'\\'; ptr += 2             # <<<<<<<<<<<<<<
 *             elif ch == c'"':
 *                 ptr[0] = c'\\'; ptr[1] = c'"'; ptr += 2
 */
      (__pyx_v_ptr[0]) = '\\';
      (__pyx_v_ptr[1]) = '\\';
      __pyx_v_ptr = (__pyx_v_ptr + 2);

      /* "openstep_plist/writer.pyx":260
 *             elif ch == c'\f':
 *                 ptr[0] = c'\\'; ptr[1] = c'f'; ptr += 2
 *             elif ch == c'\\':             # <<<<<<<<<<<<<<
 *                 ptr[0] = c'\\'; ptr[1] = c'\\'; ptr += 2
 *             elif ch == c'"':
 */
      break;
      case '"':

      /* "openstep_plist/writer.pyx":263
 *                 ptr[0] = c'\\'; ptr[1] = c'\\'; ptr += 2
 *             elif ch == c'"':
 *                 ptr[0] = c'\\'; ptr[1] = c'"'; ptr += 2             # <<<<<<<<<<<<<<
 *             elif ch == c'\r':
 *                 ptr[0] = c'\\'; ptr[1] = c'r'; ptr += 2
 */
      (__pyx_v_ptr[0]) = '\\';
      (__pyx_v_ptr[1]) = '"';
      __pyx_v_ptr = (__pyx_v_ptr + 2);

      /* "openstep_plist/writer.pyx":262
 *             elif ch == c'\\':
 *                 ptr[0] = c'\\'; ptr[1] = c'\\'; ptr += 2
 *             elif ch == c'"':             # <<<<<<<<<<<<<<
 *                 ptr[0] = c'\\'; ptr[1] = c'"'; ptr += 2
 *             elif ch == c'\r':
 */
      break;
      case '\r':

      /* "openstep_plist/writer.pyx":265
 *                 ptr[0] = c'\\'; ptr[1] = c'"'; ptr += 2
 *             elif ch == c'\r':
 *                 ptr[0] = c'\\'; ptr[1] = c'r'; ptr += 2             # <<<<<<<<<<<<<<
 *             else:
 *                 if ch < 128:
 */
      (__pyx_v_ptr[0]) = '\\';
      (__pyx_v_ptr[1]) = 'r';
      __pyx_v_ptr = (__pyx_v_ptr + 2);

      /* "openstep_plist/writer.pyx":264
 *             elif ch == c'"':
 *                 ptr[0] = c'\\'; ptr[1] = c'"'; ptr += 2
 *             elif ch == c'\r':             # <<<<<<<<<<<<<<
 *                 ptr[0] = c'\\'; ptr[1] = c'r'; ptr += 2
 *             else:
 */
      break;
      default:

      /* "openstep_plist/writer.pyx":267
 *                 ptr[0] = c'\\'; ptr[1] = c'r'; ptr += 2
 *             else:
 *                 if ch < 128:             # <<<<<<<<<<<<<<
 *                     if isprint(ch):
 *                         ptr[0] = ch
 */
      __pyx_t_2 = ((__pyx_v_ch < 0x80) != 0);
      if (__pyx_t_2) {

        /* "openstep_plist/writer.pyx":268
 *             else:
 *                 if ch < 128:
 *                     if isprint(ch):             # <<<<<<<<<<<<<<
 *                         ptr[0] = ch
 *                         ptr += 1
 */
        __pyx_t_2 = (isprint(__pyx_v_ch) != 0);
        if (__pyx_t_2) {

          /* "openstep_plist/writer.pyx":269
 *                 if ch < 128:
 *                     if isprint(ch):
 *                         ptr[0] = ch             # <<<<<<<<<<<<<<
 *                         ptr += 1
 *                     else:
 */
          (__pyx_v_ptr[0]) = __pyx_v_ch;

          /* "openstep_plist/writer.pyx":270
 *                     if isprint(ch):
 *                         ptr[0] = ch
 *                         ptr += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         ptr[0] = c'\\'
 */
          __pyx_v_ptr = (__pyx_v_ptr + 1);

          /* "openstep_plist/writer.pyx":268
 *             else:
 *                 if ch < 128:
 *                     if isprint(ch):             # <<<<<<<<<<<<<<
 *                         ptr[0] = ch
 *                         ptr += 1
 */
          goto __pyx_L13;
        }

        /* "openstep_plist/writer.pyx":272
 *                         ptr += 1
 *                     else:
 *                         ptr[0] = c'\\'             # <<<<<<<<<<<<<<
 *                         ptr += 1
 *                         ptr[2] = (ch & 7) + c'0'
 */
        /*else*/ {
          (__pyx_v_ptr[0]) = '\\';

          /* "openstep_plist/writer.pyx":273
 *                     else:
 *                         ptr[0] = c'\\'
 *                         ptr += 1             # <<<<<<<<<<<<<<
 *                         ptr[2] = (ch & 7) + c'0'
 *                         ch >>= 3
 */
          __pyx_v_ptr = (__pyx_v_ptr + 1);

          /* "openstep_plist/writer.pyx":274
 *                         ptr[0] = c'\\'
 *                         ptr += 1
 *                         ptr[2] = (ch & 7) + c'0'             # <<<<<<<<<<<<<<
 *                         ch >>= 3
 *                         ptr[1] = (ch & 7) + c'0'
 */
          (__pyx_v_ptr[2]) = ((__pyx_v_ch & 7) + '0');

          /* "openstep_plist/writer.pyx":275
 *                         ptr += 1
 *                         ptr[2] = (ch & 7) + c'0'
 *                         ch >>= 3             # <<<<<<<<<<<<<<
 *                         ptr[1] = (ch & 7) + c'0'
 *                         ch >>= 3
 */
          __pyx_v_ch = (__pyx_v_ch >> 3);

          /* "openstep_plist/writer.pyx":276
 *                         ptr[2] = (ch & 7) + c'0'
 *                         ch >>= 3
 *                         ptr[1] = (ch & 7) + c'0'             # <<<<<<<<<<<<<<
 *                         ch >>= 3
 *                         ptr[0] = (ch & 7) + c'0'
 */
          (__pyx_v_ptr[1]) = ((__pyx_v_ch & 7) + '0');

          /* "openstep_plist/writer.pyx":277
 *                         ch >>= 3
 *                         ptr[1] = (ch & 7) + c'0'
 *                         ch >>= 3             # <<<<<<<<<<<<<<
 *                         ptr[0] = (ch & 7) + c'0'
 *                         ptr += 3
 */
          __pyx_v_ch = (__pyx_v_ch >> 3);

          /* "openstep_plist/writer.pyx":278
 *                         ptr[1] = (ch & 7) + c'0'
 *                         ch >>= 3
 *                         ptr[0] = (ch & 7) + c'0'             # <<<<<<<<<<<<<<
 *                         ptr += 3
 *                 elif unicode_escape:
 */
          (__pyx_v_ptr[0]) = ((__pyx_v_ch & 7) + '0');

          /* "openstep_plist/writer.pyx":279
 *                         ch >>= 3
 *                         ptr[0] = (ch & 7) + c'0'
 *                         ptr += 3             # <<<<<<<<<<<<<<
 *                 elif unicode_escape:
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:
 */
          __pyx_v_ptr = (__pyx_v_ptr + 3);
        }
        __pyx_L13:;

        /* "openstep_plist/writer.pyx":267
 *                 ptr[0] = c'\\'; ptr[1] = c'r'; ptr += 2
 *             else:
 *                 if ch < 128:             # <<<<<<<<<<<<<<
 *                     if isprint(ch):
 *                         ptr[0] = ch
 */
        goto __pyx_L12;
      }

      /* "openstep_plist/writer.pyx":280
 *                         ptr[0] = (ch & 7) + c'0'
 *                         ptr += 3
 *                 elif unicode_escape:             # <<<<<<<<<<<<<<
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:
 *                         escape_unicode(high_surrogate_from_unicode_scalar(ch), ptr)
 */
      __pyx_t_2 = (__pyx_v_unicode_escape != 0);
      if (__pyx_t_2) {

        /* "openstep_plist/writer.pyx":281
 *                         ptr += 3
 *                 elif unicode_escape:
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:             # <<<<<<<<<<<<<<
 *                         escape_unicode(high_surrogate_from_unicode_scalar(ch), ptr)
 *                         ptr += 6
 */
        __pyx_t_3 = ((__pyx_v_ch > 0xFFFF) != 0);
        if (__pyx_t_3) {
        } else {
          __pyx_t_2 = __pyx_t_3;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_3 = ((!(__pyx_v_14openstep_plist_4util_PY_NARROW_UNICODE != 0)) != 0);
        __pyx_t_2 = __pyx_t_3;
        __pyx_L15_bool_binop_done:;
        if (__pyx_t_2) {

          /* "openstep_plist/writer.pyx":282
 *                 elif unicode_escape:
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:
 *                         escape_unicode(high_surrogate_from_unicode_scalar(ch), ptr)             # <<<<<<<<<<<<<<
 *                         ptr += 6
 *                         escape_unicode(low_surrogate_from_unicode_scalar(ch), ptr)
 */
          __pyx_f_14openstep_plist_6writer_escape_unicode(__pyx_f_14openstep_plist_4util_high_surrogate_from_unicode_scalar(__pyx_v_ch), __pyx_v_ptr);

          /* "openstep_plist/writer.pyx":283
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:
 *                         escape_unicode(high_surrogate_from_unicode_scalar(ch), ptr)
 *                         ptr += 6             # <<<<<<<<<<<<<<
 *                         escape_unicode(low_surrogate_from_unicode_scalar(ch), ptr)
 *                         ptr += 6
 */
          __pyx_v_ptr = (__pyx_v_ptr + 6);

          /* "openstep_plist/writer.pyx":284
 *                         escape_unicode(high_surrogate_from_unicode_scalar(ch), ptr)
 *                         ptr += 6
 *                         escape_unicode(low_surrogate_from_unicode_scalar(ch), ptr)             # <<<<<<<<<<<<<<
 *                         ptr += 6
 *                     else:
 */
          __pyx_f_14openstep_plist_6writer_escape_unicode(__pyx_f_14openstep_plist_4util_low_surrogate_from_unicode_scalar(__pyx_v_ch), __pyx_v_ptr);

          /* "openstep_plist/writer.pyx":285
 *                         ptr += 6
 *                         escape_unicode(low_surrogate_from_unicode_scalar(ch), ptr)
 *                         ptr += 6             # <<<<<<<<<<<<<<
 *                     else:
 *                         escape_unicode(ch, ptr)
 */
          __pyx_v_ptr = (__pyx_v_ptr + 6);

          /* "openstep_plist/writer.pyx":281
 *                         ptr += 3
 *                 elif unicode_escape:
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:             # <<<<<<<<<<<<<<
 *                         escape_unicode(high_surrogate_from_unicode_scalar(ch), ptr)
 *                         ptr += 6
 */
          goto __pyx_L14;
        }

        /* "openstep_plist/writer.pyx":287
 *                         ptr += 6
 *                     else:
 *                         escape_unicode(ch, ptr)             # <<<<<<<<<<<<<<
 *                         ptr += 6
 *                 else:
 */
        /*else*/ {
          __pyx_f_14openstep_plist_6writer_escape_unicode(__pyx_v_ch, __pyx_v_ptr);

          /* "openstep_plist/writer.pyx":288
 *                     else:
 *                         escape_unicode(ch, ptr)
 *                         ptr += 6             # <<<<<<<<<<<<<<
 *                 else:
 *                     ptr[0] = ch
 */
          __pyx_v_ptr = (__pyx_v_ptr + 6);
        }
        __pyx_L14:;

        /* "openstep_plist/writer.pyx":280
 *                         ptr[0] = (ch & 7) + c'0'
 *                         ptr += 3
 *                 elif unicode_escape:             # <<<<<<<<<<<<<<
 *                     if ch > 0xFFFF and not PY_NARROW_UNICODE:
 *                         escape_unicode(high_surrogate_from_unicode_scalar(ch), ptr)
 */
        goto __pyx_L12;
      }

      /* "openstep_plist/writer.pyx":290
 *                         ptr += 6
 *                 else:
 *                     ptr[0] = ch             # <<<<<<<<<<<<<<
 *                     ptr += 1
 * 
 */
      /*else*/ {
        (__pyx_v_ptr[0]) = __pyx_v_ch;

        /* "openstep_plist/writer.pyx":291
 *                 else:
 *                     ptr[0] = ch
 *                     ptr += 1             # <<<<<<<<<<<<<<
 * 
 *             curr += 1
 */
        __pyx_v_ptr = (__pyx_v_ptr + 1);
      }
      __pyx_L12:;
      break;
    }

    /* "openstep_plist/writer.pyx":293
 *                     ptr += 1
 * 
 *             curr += 1             # <<<<<<<<<<<<<<
 * 
 *         ptr[0] = c'"'
 */
    __pyx_v_curr = (__pyx_v_curr + 1);
  }

  /* "openstep_plist/writer.pyx":295
 *             curr += 1
 * 
 *         ptr[0] = c'"'             # <<<<<<<<<<<<<<
 * 
 *         return new_length + 2
 */
  (__pyx_v_ptr[0]) = '"';

  /* "openstep_plist/writer.pyx":297
 *         ptr[0] = c'"'
 * 
 *         return new_length + 2             # <<<<<<<<<<<<<<
 * 
 *     cdef inline Py_ssize_t write_unquoted_string(self, unicode string) except -1:
 */
  __pyx_r = (__pyx_v_new_length + 2);
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":201
 *             )
 * 
 *     cdef Py_ssize_t write_quoted_string(             # <<<<<<<<<<<<<<
 *         self, const Py_UNICODE *s, Py_ssize_t length
 *     ) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write_quoted_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":299
 *         return new_length + 2
 * 
 *     cdef inline Py_ssize_t write_unquoted_string(self, unicode string) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)
 */

static CYTHON_INLINE Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_string) {
  Py_UNICODE const *__pyx_v_s;
  Py_ssize_t __pyx_v_length;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_unquoted_string", 0);

  /* "openstep_plist/writer.pyx":301
 *     cdef inline Py_ssize_t write_unquoted_string(self, unicode string) except -1:
 *         cdef:
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)             # <<<<<<<<<<<<<<
 *             Py_ssize_t length = PyUnicode_GET_SIZE(string)
 * 
 */
  __pyx_v_s = PyUnicode_AS_UNICODE(__pyx_v_string);

  /* "openstep_plist/writer.pyx":302
 *         cdef:
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)
 *             Py_ssize_t length = PyUnicode_GET_SIZE(string)             # <<<<<<<<<<<<<<
 * 
 *         return self.extend_buffer(s, length)
 */
  __pyx_v_length = PyUnicode_GET_SIZE(__pyx_v_string);

  /* "openstep_plist/writer.pyx":304
 *             Py_ssize_t length = PyUnicode_GET_SIZE(string)
 * 
 *         return self.extend_buffer(s, length)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t write_string(self, unicode string) except -1:
 */
  try {
    __pyx_t_1 = __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(__pyx_v_self, __pyx_v_s, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 304, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":299
 *         return new_length + 2
 * 
 *     cdef inline Py_ssize_t write_unquoted_string(self, unicode string) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write_unquoted_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":306
 *         return self.extend_buffer(s, length)
 * 
 *     cdef Py_ssize_t write_string(self, unicode string) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)
 */

static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_string(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_string) {
  Py_UNICODE const *__pyx_v_s;
  Py_ssize_t __pyx_v_length;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_string", 0);

  /* "openstep_plist/writer.pyx":308
 *     cdef Py_ssize_t write_string(self, unicode string) except -1:
 *         cdef:
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)             # <<<<<<<<<<<<<<
 *             Py_ssize_t length = PyUnicode_GET_SIZE(string)
 * 
 */
  __pyx_v_s = PyUnicode_AS_UNICODE(__pyx_v_string);

  /* "openstep_plist/writer.pyx":309
 *         cdef:
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)
 *             Py_ssize_t length = PyUnicode_GET_SIZE(string)             # <<<<<<<<<<<<<<
 * 
 *         if string_needs_quotes(s, length):
 */
  __pyx_v_length = PyUnicode_GET_SIZE(__pyx_v_string);

  /* "openstep_plist/writer.pyx":311
 *             Py_ssize_t length = PyUnicode_GET_SIZE(string)
 * 
 *         if string_needs_quotes(s, length):             # <<<<<<<<<<<<<<
 *             return self.write_quoted_string(s, length)
 *         else:
 */
  __pyx_t_1 = (__pyx_f_14openstep_plist_6writer_string_needs_quotes(__pyx_v_s, __pyx_v_length) != 0);
  if (__pyx_t_1) {

    /* "openstep_plist/writer.pyx":312
 * 
 *         if string_needs_quotes(s, length):
 *             return self.write_quoted_string(s, length)             # <<<<<<<<<<<<<<
 *         else:
 *             return self.extend_buffer(s, length)
 */
    __pyx_t_2 = __pyx_f_14openstep_plist_6writer_6Writer_write_quoted_string(__pyx_v_self, __pyx_v_s, __pyx_v_length); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 312, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":311
 *             Py_ssize_t length = PyUnicode_GET_SIZE(string)
 * 
 *         if string_needs_quotes(s, length):             # <<<<<<<<<<<<<<
 *             return self.write_quoted_string(s, length)
 *         else:
 */
  }

  /* "openstep_plist/writer.pyx":314
 *             return self.write_quoted_string(s, length)
 *         else:
 *             return self.extend_buffer(s, length)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t write_short_float_repr(self, object py_float) except -1:
 */
  /*else*/ {
    try {
      __pyx_t_2 = __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(__pyx_v_self, __pyx_v_s, __pyx_v_length);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 314, __pyx_L1_error)
    }
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;
  }

  /* "openstep_plist/writer.pyx":306
 *         return self.extend_buffer(s, length)
 * 
 *     cdef Py_ssize_t write_string(self, unicode string) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":316
 *             return self.extend_buffer(s, length)
 * 
 *     cdef Py_ssize_t write_short_float_repr(self, object py_float) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             unicode string = f"{py_float:.{self.float_precision}f}"
 */

static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_short_float_repr(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_py_float) {
  PyObject *__pyx_v_string = 0;
  Py_UNICODE const *__pyx_v_s;
  Py_ssize_t __pyx_v_length;
  Py_UNICODE __pyx_v_ch;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_short_float_repr", 0);

  /* "openstep_plist/writer.pyx":318
 *     cdef Py_ssize_t write_short_float_repr(self, object py_float) except -1:
 *         cdef:
 *             unicode string = f"{py_float:.{self.float_precision}f}"             # <<<<<<<<<<<<<<
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)
 *             Py_ssize_t length = PyUnicode_GET_SIZE(string)
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__3);
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_self->float_precision, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_n_u_f);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_n_u_f);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_n_u_f);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Format(__pyx_v_py_float, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_string = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openstep_plist/writer.pyx":319
 *         cdef:
 *             unicode string = f"{py_float:.{self.float_precision}f}"
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)             # <<<<<<<<<<<<<<
 *             Py_ssize_t length = PyUnicode_GET_SIZE(string)
 *             Py_UNICODE ch
 */
  __pyx_v_s = PyUnicode_AS_UNICODE(__pyx_v_string);

  /* "openstep_plist/writer.pyx":320
 *             unicode string = f"{py_float:.{self.float_precision}f}"
 *             const Py_UNICODE *s = PyUnicode_AS_UNICODE(string)
 *             Py_ssize_t length = PyUnicode_GET_SIZE(string)             # <<<<<<<<<<<<<<
 *             Py_UNICODE ch
 * 
 */
  __pyx_v_length = PyUnicode_GET_SIZE(__pyx_v_string);

  /* "openstep_plist/writer.pyx":325
 *         # read digits backwards, skipping all the '0's until either a
 *         # non-'0' or '.' is found
 *         while length > 0:             # <<<<<<<<<<<<<<
 *             ch = s[length-1]
 *             if ch == c'.':
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_length > 0) != 0);
    if (!__pyx_t_5) break;

    /* "openstep_plist/writer.pyx":326
 *         # non-'0' or '.' is found
 *         while length > 0:
 *             ch = s[length-1]             # <<<<<<<<<<<<<<
 *             if ch == c'.':
 *                 length -= 1  # skip the trailing dot
 */
    __pyx_v_ch = (__pyx_v_s[(__pyx_v_length - 1)]);

    /* "openstep_plist/writer.pyx":327
 *         while length > 0:
 *             ch = s[length-1]
 *             if ch == c'.':             # <<<<<<<<<<<<<<
 *                 length -= 1  # skip the trailing dot
 *                 break
 */
    __pyx_t_5 = ((__pyx_v_ch == '.') != 0);
    if (__pyx_t_5) {

      /* "openstep_plist/writer.pyx":328
 *             ch = s[length-1]
 *             if ch == c'.':
 *                 length -= 1  # skip the trailing dot             # <<<<<<<<<<<<<<
 *                 break
 *             elif ch != c'0':
 */
      __pyx_v_length = (__pyx_v_length - 1);

      /* "openstep_plist/writer.pyx":329
 *             if ch == c'.':
 *                 length -= 1  # skip the trailing dot
 *                 break             # <<<<<<<<<<<<<<
 *             elif ch != c'0':
 *                 break
 */
      goto __pyx_L4_break;

      /* "openstep_plist/writer.pyx":327
 *         while length > 0:
 *             ch = s[length-1]
 *             if ch == c'.':             # <<<<<<<<<<<<<<
 *                 length -= 1  # skip the trailing dot
 *                 break
 */
    }

    /* "openstep_plist/writer.pyx":330
 *                 length -= 1  # skip the trailing dot
 *                 break
 *             elif ch != c'0':             # <<<<<<<<<<<<<<
 *                 break
 *             length -= 1
 */
    __pyx_t_5 = ((__pyx_v_ch != '0') != 0);
    if (__pyx_t_5) {

      /* "openstep_plist/writer.pyx":331
 *                 break
 *             elif ch != c'0':
 *                 break             # <<<<<<<<<<<<<<
 *             length -= 1
 * 
 */
      goto __pyx_L4_break;

      /* "openstep_plist/writer.pyx":330
 *                 length -= 1  # skip the trailing dot
 *                 break
 *             elif ch != c'0':             # <<<<<<<<<<<<<<
 *                 break
 *             length -= 1
 */
    }

    /* "openstep_plist/writer.pyx":332
 *             elif ch != c'0':
 *                 break
 *             length -= 1             # <<<<<<<<<<<<<<
 * 
 *         return self.extend_buffer(s, length)
 */
    __pyx_v_length = (__pyx_v_length - 1);
  }
  __pyx_L4_break:;

  /* "openstep_plist/writer.pyx":334
 *             length -= 1
 * 
 *         return self.extend_buffer(s, length)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t write_data(self, bytes data) except -1:
 */
  try {
    __pyx_t_2 = __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(__pyx_v_self, __pyx_v_s, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 334, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":316
 *             return self.extend_buffer(s, length)
 * 
 *     cdef Py_ssize_t write_short_float_repr(self, object py_float) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             unicode string = f"{py_float:.{self.float_precision}f}"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write_short_float_repr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_string);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":336
 *         return self.extend_buffer(s, length)
 * 
 *     cdef Py_ssize_t write_data(self, bytes data) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector[Py_UNICODE] *dest = self.dest
 */

static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_data(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_data) {
  std::vector<Py_UNICODE>  *__pyx_v_dest;
  unsigned char const *__pyx_v_src;
  Py_UNICODE *__pyx_v_ptr;
  Py_ssize_t __pyx_v_length;
  Py_ssize_t __pyx_v_extra_length;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<Py_UNICODE>  *__pyx_t_1;
  unsigned char const *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_data", 0);

  /* "openstep_plist/writer.pyx":338
 *     cdef Py_ssize_t write_data(self, bytes data) except -1:
 *         cdef:
 *             vector[Py_UNICODE] *dest = self.dest             # <<<<<<<<<<<<<<
 *             const unsigned char *src = data
 *             Py_UNICODE *ptr
 */
  __pyx_t_1 = __pyx_v_self->dest;
  __pyx_v_dest = __pyx_t_1;

  /* "openstep_plist/writer.pyx":339
 *         cdef:
 *             vector[Py_UNICODE] *dest = self.dest
 *             const unsigned char *src = data             # <<<<<<<<<<<<<<
 *             Py_UNICODE *ptr
 *             Py_ssize_t length = PyBytes_GET_SIZE(data)
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 339, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsUString(__pyx_v_data); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 339, __pyx_L1_error)
  __pyx_v_src = __pyx_t_2;

  /* "openstep_plist/writer.pyx":341
 *             const unsigned char *src = data
 *             Py_UNICODE *ptr
 *             Py_ssize_t length = PyBytes_GET_SIZE(data)             # <<<<<<<<<<<<<<
 *             Py_ssize_t extra_length, i, j
 * 
 */
  __pyx_v_length = PyBytes_GET_SIZE(__pyx_v_data);

  /* "openstep_plist/writer.pyx":347
 *         # interleaving spaces between each group of 4 bytes; each byte
 *         # is encoded with two hexadecimal digit
 *         extra_length = 2 + 2*length + ((length - 1)//4 if length > 4 else 0)             # <<<<<<<<<<<<<<
 * 
 *         j = dest.size()
 */
  if (((__pyx_v_length > 4) != 0)) {
    __pyx_t_3 = __Pyx_div_Py_ssize_t((__pyx_v_length - 1), 4);
  } else {
    __pyx_t_3 = 0;
  }
  __pyx_v_extra_length = ((2 + (2 * __pyx_v_length)) + __pyx_t_3);

  /* "openstep_plist/writer.pyx":349
 *         extra_length = 2 + 2*length + ((length - 1)//4 if length > 4 else 0)
 * 
 *         j = dest.size()             # <<<<<<<<<<<<<<
 *         dest.resize(j + extra_length)
 *         ptr = <Py_UNICODE*>dest.data()
 */
  __pyx_v_j = __pyx_v_dest->size();

  /* "openstep_plist/writer.pyx":350
 * 
 *         j = dest.size()
 *         dest.resize(j + extra_length)             # <<<<<<<<<<<<<<
 *         ptr = <Py_UNICODE*>dest.data()
 * 
 */
  try {
    __pyx_v_dest->resize((__pyx_v_j + __pyx_v_extra_length));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 350, __pyx_L1_error)
  }

  /* "openstep_plist/writer.pyx":351
 *         j = dest.size()
 *         dest.resize(j + extra_length)
 *         ptr = <Py_UNICODE*>dest.data()             # <<<<<<<<<<<<<<
 * 
 *         ptr[j] = c'<'
 */
  __pyx_v_ptr = ((Py_UNICODE *)__pyx_v_dest->data());

  /* "openstep_plist/writer.pyx":353
 *         ptr = <Py_UNICODE*>dest.data()
 * 
 *         ptr[j] = c'<'             # <<<<<<<<<<<<<<
 *         j += 1
 *         for i in range(length):
 */
  (__pyx_v_ptr[__pyx_v_j]) = '<';

  /* "openstep_plist/writer.pyx":354
 * 
 *         ptr[j] = c'<'
 *         j += 1             # <<<<<<<<<<<<<<
 *         for i in range(length):
 *             ptr[j] = HEX_MAP[(src[i] >> 4) & 0x0F]
 */
  __pyx_v_j = (__pyx_v_j + 1);

  /* "openstep_plist/writer.pyx":355
 *         ptr[j] = c'<'
 *         j += 1
 *         for i in range(length):             # <<<<<<<<<<<<<<
 *             ptr[j] = HEX_MAP[(src[i] >> 4) & 0x0F]
 *             j += 1
 */
  __pyx_t_3 = __pyx_v_length;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "openstep_plist/writer.pyx":356
 *         j += 1
 *         for i in range(length):
 *             ptr[j] = HEX_MAP[(src[i] >> 4) & 0x0F]             # <<<<<<<<<<<<<<
 *             j += 1
 *             ptr[j] = HEX_MAP[src[i] & 0x0F]
 */
    (__pyx_v_ptr[__pyx_v_j]) = (__pyx_v_14openstep_plist_6writer_HEX_MAP[(((__pyx_v_src[__pyx_v_i]) >> 4) & 0x0F)]);

    /* "openstep_plist/writer.pyx":357
 *         for i in range(length):
 *             ptr[j] = HEX_MAP[(src[i] >> 4) & 0x0F]
 *             j += 1             # <<<<<<<<<<<<<<
 *             ptr[j] = HEX_MAP[src[i] & 0x0F]
 *             if (i & 3) == 3 and i < length - 1:
 */
    __pyx_v_j = (__pyx_v_j + 1);

    /* "openstep_plist/writer.pyx":358
 *             ptr[j] = HEX_MAP[(src[i] >> 4) & 0x0F]
 *             j += 1
 *             ptr[j] = HEX_MAP[src[i] & 0x0F]             # <<<<<<<<<<<<<<
 *             if (i & 3) == 3 and i < length - 1:
 *                 # if we've just finished a 32-bit int, print a space
 */
    (__pyx_v_ptr[__pyx_v_j]) = (__pyx_v_14openstep_plist_6writer_HEX_MAP[((__pyx_v_src[__pyx_v_i]) & 0x0F)]);

    /* "openstep_plist/writer.pyx":359
 *             j += 1
 *             ptr[j] = HEX_MAP[src[i] & 0x0F]
 *             if (i & 3) == 3 and i < length - 1:             # <<<<<<<<<<<<<<
 *                 # if we've just finished a 32-bit int, print a space
 *                 j += 1
 */
    __pyx_t_7 = (((__pyx_v_i & 3) == 3) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_i < (__pyx_v_length - 1)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "openstep_plist/writer.pyx":361
 *             if (i & 3) == 3 and i < length - 1:
 *                 # if we've just finished a 32-bit int, print a space
 *                 j += 1             # <<<<<<<<<<<<<<
 *                 ptr[j] = c' '
 *             j += 1
 */
      __pyx_v_j = (__pyx_v_j + 1);

      /* "openstep_plist/writer.pyx":362
 *                 # if we've just finished a 32-bit int, print a space
 *                 j += 1
 *                 ptr[j] = c' '             # <<<<<<<<<<<<<<
 *             j += 1
 *         ptr[j] = c'>'
 */
      (__pyx_v_ptr[__pyx_v_j]) = ' ';

      /* "openstep_plist/writer.pyx":359
 *             j += 1
 *             ptr[j] = HEX_MAP[src[i] & 0x0F]
 *             if (i & 3) == 3 and i < length - 1:             # <<<<<<<<<<<<<<
 *                 # if we've just finished a 32-bit int, print a space
 *                 j += 1
 */
    }

    /* "openstep_plist/writer.pyx":363
 *                 j += 1
 *                 ptr[j] = c' '
 *             j += 1             # <<<<<<<<<<<<<<
 *         ptr[j] = c'>'
 * 
 */
    __pyx_v_j = (__pyx_v_j + 1);
  }

  /* "openstep_plist/writer.pyx":364
 *                 ptr[j] = c' '
 *             j += 1
 *         ptr[j] = c'>'             # <<<<<<<<<<<<<<
 * 
 *         return extra_length
 */
  (__pyx_v_ptr[__pyx_v_j]) = '>';

  /* "openstep_plist/writer.pyx":366
 *         ptr[j] = c'>'
 * 
 *         return extra_length             # <<<<<<<<<<<<<<
 * 
 *     # XXX The two write_array_* methods are identical apart from the type of
 */
  __pyx_r = __pyx_v_extra_length;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":336
 *         return self.extend_buffer(s, length)
 * 
 *     cdef Py_ssize_t write_data(self, bytes data) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector[Py_UNICODE] *dest = self.dest
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":374
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef Py_ssize_t write_array_from_list(self, list seq) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Py_ssize_t length = len(seq)
 */

static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_array_from_list(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_seq) {
  Py_ssize_t __pyx_v_length;
  Py_ssize_t __pyx_v_last;
  Py_ssize_t __pyx_v_count;
  Py_ssize_t __pyx_v_i;
  std::vector<Py_UNICODE>  *__pyx_v_dest;
  PyObject *__pyx_v_indent = 0;
  PyObject *__pyx_v_newline_indent = 0;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::vector<Py_UNICODE>  *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_array_from_list", 0);

  /* "openstep_plist/writer.pyx":376
 *     cdef Py_ssize_t write_array_from_list(self, list seq) except -1:
 *         cdef:
 *             Py_ssize_t length = len(seq)             # <<<<<<<<<<<<<<
 *             Py_ssize_t last
 *             Py_ssize_t count
 */
  if (unlikely(__pyx_v_seq == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 376, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_seq); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_v_length = __pyx_t_1;

  /* "openstep_plist/writer.pyx":380
 *             Py_ssize_t count
 *             Py_ssize_t i
 *             vector[Py_UNICODE] *dest = self.dest             # <<<<<<<<<<<<<<
 *             unicode indent, newline_indent = ""
 * 
 */
  __pyx_t_2 = __pyx_v_self->dest;
  __pyx_v_dest = __pyx_t_2;

  /* "openstep_plist/writer.pyx":381
 *             Py_ssize_t i
 *             vector[Py_UNICODE] *dest = self.dest
 *             unicode indent, newline_indent = ""             # <<<<<<<<<<<<<<
 * 
 *         if length == 0:
 */
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_v_newline_indent = __pyx_kp_u__2;

  /* "openstep_plist/writer.pyx":383
 *             unicode indent, newline_indent = ""
 * 
 *         if length == 0:             # <<<<<<<<<<<<<<
 *             dest.push_back(c'(')
 *             dest.push_back(c')')
 */
  __pyx_t_3 = ((__pyx_v_length == 0) != 0);
  if (__pyx_t_3) {

    /* "openstep_plist/writer.pyx":384
 * 
 *         if length == 0:
 *             dest.push_back(c'(')             # <<<<<<<<<<<<<<
 *             dest.push_back(c')')
 *             return 2
 */
    try {
      __pyx_v_dest->push_back('(');
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 384, __pyx_L1_error)
    }

    /* "openstep_plist/writer.pyx":385
 *         if length == 0:
 *             dest.push_back(c'(')
 *             dest.push_back(c')')             # <<<<<<<<<<<<<<
 *             return 2
 * 
 */
    try {
      __pyx_v_dest->push_back(')');
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 385, __pyx_L1_error)
    }

    /* "openstep_plist/writer.pyx":386
 *             dest.push_back(c'(')
 *             dest.push_back(c')')
 *             return 2             # <<<<<<<<<<<<<<
 * 
 *         dest.push_back(c'(')
 */
    __pyx_r = 2;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":383
 *             unicode indent, newline_indent = ""
 * 
 *         if length == 0:             # <<<<<<<<<<<<<<
 *             dest.push_back(c'(')
 *             dest.push_back(c')')
 */
  }

  /* "openstep_plist/writer.pyx":388
 *             return 2
 * 
 *         dest.push_back(c'(')             # <<<<<<<<<<<<<<
 *         count = 1
 * 
 */
  try {
    __pyx_v_dest->push_back('(');
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 388, __pyx_L1_error)
  }

  /* "openstep_plist/writer.pyx":389
 * 
 *         dest.push_back(c'(')
 *         count = 1             # <<<<<<<<<<<<<<
 * 
 *         indent = self.indent
 */
  __pyx_v_count = 1;

  /* "openstep_plist/writer.pyx":391
 *         count = 1
 * 
 *         indent = self.indent             # <<<<<<<<<<<<<<
 *         if indent is not None:
 *             self.current_indent_level += 1
 */
  __pyx_t_4 = __pyx_v_self->indent;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_indent = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "openstep_plist/writer.pyx":392
 * 
 *         indent = self.indent
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
  __pyx_t_3 = (__pyx_v_indent != ((PyObject*)Py_None));
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {

    /* "openstep_plist/writer.pyx":393
 *         indent = self.indent
 *         if indent is not None:
 *             self.current_indent_level += 1             # <<<<<<<<<<<<<<
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)
 */
    __pyx_v_self->current_indent_level = (__pyx_v_self->current_indent_level + 1);

    /* "openstep_plist/writer.pyx":394
 *         if indent is not None:
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent             # <<<<<<<<<<<<<<
 *             count += self.write_unquoted_string(newline_indent)
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->current_indent_level); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_v_indent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_u__4, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_newline_indent, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "openstep_plist/writer.pyx":395
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 * 
 *         last = length - 1
 */
    __pyx_t_1 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 395, __pyx_L1_error)
    __pyx_v_count = (__pyx_v_count + __pyx_t_1);

    /* "openstep_plist/writer.pyx":392
 * 
 *         indent = self.indent
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
  }

  /* "openstep_plist/writer.pyx":397
 *             count += self.write_unquoted_string(newline_indent)
 * 
 *         last = length - 1             # <<<<<<<<<<<<<<
 *         for i in range(length):
 *             count += self.write_object(seq[i])
 */
  __pyx_v_last = (__pyx_v_length - 1);

  /* "openstep_plist/writer.pyx":398
 * 
 *         last = length - 1
 *         for i in range(length):             # <<<<<<<<<<<<<<
 *             count += self.write_object(seq[i])
 *             if i != last:
 */
  __pyx_t_1 = __pyx_v_length;
  __pyx_t_7 = __pyx_t_1;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "openstep_plist/writer.pyx":399
 *         last = length - 1
 *         for i in range(length):
 *             count += self.write_object(seq[i])             # <<<<<<<<<<<<<<
 *             if i != last:
 *                 if indent is None:
 */
    if (unlikely(__pyx_v_seq == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 399, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_ITEM(__pyx_v_seq, __pyx_v_i);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_9 = __pyx_f_14openstep_plist_6writer_6Writer_write_object(__pyx_v_self, __pyx_t_4); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_count = (__pyx_v_count + __pyx_t_9);

    /* "openstep_plist/writer.pyx":400
 *         for i in range(length):
 *             count += self.write_object(seq[i])
 *             if i != last:             # <<<<<<<<<<<<<<
 *                 if indent is None:
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)
 */
    __pyx_t_5 = ((__pyx_v_i != __pyx_v_last) != 0);
    if (__pyx_t_5) {

      /* "openstep_plist/writer.pyx":401
 *             count += self.write_object(seq[i])
 *             if i != last:
 *                 if indent is None:             # <<<<<<<<<<<<<<
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)
 *                 else:
 */
      __pyx_t_5 = (__pyx_v_indent == ((PyObject*)Py_None));
      __pyx_t_3 = (__pyx_t_5 != 0);
      if (__pyx_t_3) {

        /* "openstep_plist/writer.pyx":402
 *             if i != last:
 *                 if indent is None:
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)             # <<<<<<<<<<<<<<
 *                 else:
 *                     dest.push_back(c',')
 */
        try {
          __pyx_t_9 = __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(__pyx_v_self, __pyx_v_14openstep_plist_6writer_ARRAY_SEP_NO_INDENT, 2);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 402, __pyx_L1_error)
        }
        __pyx_v_count = (__pyx_v_count + __pyx_t_9);

        /* "openstep_plist/writer.pyx":401
 *             count += self.write_object(seq[i])
 *             if i != last:
 *                 if indent is None:             # <<<<<<<<<<<<<<
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)
 *                 else:
 */
        goto __pyx_L8;
      }

      /* "openstep_plist/writer.pyx":404
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)
 *                 else:
 *                     dest.push_back(c',')             # <<<<<<<<<<<<<<
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 * 
 */
      /*else*/ {
        try {
          __pyx_v_dest->push_back(',');
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 404, __pyx_L1_error)
        }

        /* "openstep_plist/writer.pyx":405
 *                 else:
 *                     dest.push_back(c',')
 *                     count += 1 + self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 * 
 *         if indent is not None:
 */
        __pyx_t_9 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 405, __pyx_L1_error)
        __pyx_v_count = (__pyx_v_count + (1 + __pyx_t_9));
      }
      __pyx_L8:;

      /* "openstep_plist/writer.pyx":400
 *         for i in range(length):
 *             count += self.write_object(seq[i])
 *             if i != last:             # <<<<<<<<<<<<<<
 *                 if indent is None:
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)
 */
    }
  }

  /* "openstep_plist/writer.pyx":407
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 * 
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
  __pyx_t_3 = (__pyx_v_indent != ((PyObject*)Py_None));
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {

    /* "openstep_plist/writer.pyx":408
 * 
 *         if indent is not None:
 *             self.current_indent_level -= 1             # <<<<<<<<<<<<<<
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)
 */
    __pyx_v_self->current_indent_level = (__pyx_v_self->current_indent_level - 1);

    /* "openstep_plist/writer.pyx":409
 *         if indent is not None:
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent             # <<<<<<<<<<<<<<
 *             count += self.write_unquoted_string(newline_indent)
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->current_indent_level); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_v_indent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_u__4, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_newline_indent, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "openstep_plist/writer.pyx":410
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 * 
 *         dest.push_back(c')')
 */
    __pyx_t_1 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 410, __pyx_L1_error)
    __pyx_v_count = (__pyx_v_count + __pyx_t_1);

    /* "openstep_plist/writer.pyx":407
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 * 
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
  }

  /* "openstep_plist/writer.pyx":412
 *             count += self.write_unquoted_string(newline_indent)
 * 
 *         dest.push_back(c')')             # <<<<<<<<<<<<<<
 *         count += 1
 * 
 */
  try {
    __pyx_v_dest->push_back(')');
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 412, __pyx_L1_error)
  }

  /* "openstep_plist/writer.pyx":413
 * 
 *         dest.push_back(c')')
 *         count += 1             # <<<<<<<<<<<<<<
 * 
 *         return count
 */
  __pyx_v_count = (__pyx_v_count + 1);

  /* "openstep_plist/writer.pyx":415
 *         count += 1
 * 
 *         return count             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_count;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":374
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef Py_ssize_t write_array_from_list(self, list seq) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Py_ssize_t length = len(seq)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write_array_from_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indent);
  __Pyx_XDECREF(__pyx_v_newline_indent);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":419
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef Py_ssize_t write_array_from_tuple(self, tuple seq) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Py_ssize_t length = len(seq)
 */

static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_array_from_tuple(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_seq) {
  Py_ssize_t __pyx_v_length;
  Py_ssize_t __pyx_v_last;
  Py_ssize_t __pyx_v_count;
  Py_ssize_t __pyx_v_i;
  std::vector<Py_UNICODE>  *__pyx_v_dest;
  PyObject *__pyx_v_indent = 0;
  PyObject *__pyx_v_newline_indent = 0;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::vector<Py_UNICODE>  *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_array_from_tuple", 0);

  /* "openstep_plist/writer.pyx":421
 *     cdef Py_ssize_t write_array_from_tuple(self, tuple seq) except -1:
 *         cdef:
 *             Py_ssize_t length = len(seq)             # <<<<<<<<<<<<<<
 *             Py_ssize_t last
 *             Py_ssize_t count
 */
  if (unlikely(__pyx_v_seq == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 421, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_seq); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 421, __pyx_L1_error)
  __pyx_v_length = __pyx_t_1;

  /* "openstep_plist/writer.pyx":425
 *             Py_ssize_t count
 *             Py_ssize_t i
 *             vector[Py_UNICODE] *dest = self.dest             # <<<<<<<<<<<<<<
 *             unicode indent, newline_indent = ""
 * 
 */
  __pyx_t_2 = __pyx_v_self->dest;
  __pyx_v_dest = __pyx_t_2;

  /* "openstep_plist/writer.pyx":426
 *             Py_ssize_t i
 *             vector[Py_UNICODE] *dest = self.dest
 *             unicode indent, newline_indent = ""             # <<<<<<<<<<<<<<
 * 
 *         if length == 0:
 */
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_v_newline_indent = __pyx_kp_u__2;

  /* "openstep_plist/writer.pyx":428
 *             unicode indent, newline_indent = ""
 * 
 *         if length == 0:             # <<<<<<<<<<<<<<
 *             dest.push_back(c'(')
 *             dest.push_back(c')')
 */
  __pyx_t_3 = ((__pyx_v_length == 0) != 0);
  if (__pyx_t_3) {

    /* "openstep_plist/writer.pyx":429
 * 
 *         if length == 0:
 *             dest.push_back(c'(')             # <<<<<<<<<<<<<<
 *             dest.push_back(c')')
 *             return 2
 */
    try {
      __pyx_v_dest->push_back('(');
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 429, __pyx_L1_error)
    }

    /* "openstep_plist/writer.pyx":430
 *         if length == 0:
 *             dest.push_back(c'(')
 *             dest.push_back(c')')             # <<<<<<<<<<<<<<
 *             return 2
 * 
 */
    try {
      __pyx_v_dest->push_back(')');
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 430, __pyx_L1_error)
    }

    /* "openstep_plist/writer.pyx":431
 *             dest.push_back(c'(')
 *             dest.push_back(c')')
 *             return 2             # <<<<<<<<<<<<<<
 * 
 *         dest.push_back(c'(')
 */
    __pyx_r = 2;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":428
 *             unicode indent, newline_indent = ""
 * 
 *         if length == 0:             # <<<<<<<<<<<<<<
 *             dest.push_back(c'(')
 *             dest.push_back(c')')
 */
  }

  /* "openstep_plist/writer.pyx":433
 *             return 2
 * 
 *         dest.push_back(c'(')             # <<<<<<<<<<<<<<
 *         count = 1
 * 
 */
  try {
    __pyx_v_dest->push_back('(');
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 433, __pyx_L1_error)
  }

  /* "openstep_plist/writer.pyx":434
 * 
 *         dest.push_back(c'(')
 *         count = 1             # <<<<<<<<<<<<<<
 * 
 *         indent = self.indent
 */
  __pyx_v_count = 1;

  /* "openstep_plist/writer.pyx":436
 *         count = 1
 * 
 *         indent = self.indent             # <<<<<<<<<<<<<<
 *         if indent is not None and not self.single_line_tuples:
 *             self.current_indent_level += 1
 */
  __pyx_t_4 = __pyx_v_self->indent;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_indent = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "openstep_plist/writer.pyx":437
 * 
 *         indent = self.indent
 *         if indent is not None and not self.single_line_tuples:             # <<<<<<<<<<<<<<
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
  __pyx_t_5 = (__pyx_v_indent != ((PyObject*)Py_None));
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_3 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = ((!(__pyx_v_self->single_line_tuples != 0)) != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_3) {

    /* "openstep_plist/writer.pyx":438
 *         indent = self.indent
 *         if indent is not None and not self.single_line_tuples:
 *             self.current_indent_level += 1             # <<<<<<<<<<<<<<
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)
 */
    __pyx_v_self->current_indent_level = (__pyx_v_self->current_indent_level + 1);

    /* "openstep_plist/writer.pyx":439
 *         if indent is not None and not self.single_line_tuples:
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent             # <<<<<<<<<<<<<<
 *             count += self.write_unquoted_string(newline_indent)
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->current_indent_level); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_4, __pyx_v_indent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_u__4, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_newline_indent, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "openstep_plist/writer.pyx":440
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 * 
 *         last = length - 1
 */
    __pyx_t_1 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 440, __pyx_L1_error)
    __pyx_v_count = (__pyx_v_count + __pyx_t_1);

    /* "openstep_plist/writer.pyx":437
 * 
 *         indent = self.indent
 *         if indent is not None and not self.single_line_tuples:             # <<<<<<<<<<<<<<
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
  }

  /* "openstep_plist/writer.pyx":442
 *             count += self.write_unquoted_string(newline_indent)
 * 
 *         last = length - 1             # <<<<<<<<<<<<<<
 *         for i in range(length):
 *             count += self.write_object(seq[i])
 */
  __pyx_v_last = (__pyx_v_length - 1);

  /* "openstep_plist/writer.pyx":443
 * 
 *         last = length - 1
 *         for i in range(length):             # <<<<<<<<<<<<<<
 *             count += self.write_object(seq[i])
 *             if i != last:
 */
  __pyx_t_1 = __pyx_v_length;
  __pyx_t_8 = __pyx_t_1;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "openstep_plist/writer.pyx":444
 *         last = length - 1
 *         for i in range(length):
 *             count += self.write_object(seq[i])             # <<<<<<<<<<<<<<
 *             if i != last:
 *                 if indent is None:
 */
    if (unlikely(__pyx_v_seq == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 444, __pyx_L1_error)
    }
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_seq, __pyx_v_i);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_10 = __pyx_f_14openstep_plist_6writer_6Writer_write_object(__pyx_v_self, __pyx_t_4); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 444, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_count = (__pyx_v_count + __pyx_t_10);

    /* "openstep_plist/writer.pyx":445
 *         for i in range(length):
 *             count += self.write_object(seq[i])
 *             if i != last:             # <<<<<<<<<<<<<<
 *                 if indent is None:
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)
 */
    __pyx_t_3 = ((__pyx_v_i != __pyx_v_last) != 0);
    if (__pyx_t_3) {

      /* "openstep_plist/writer.pyx":446
 *             count += self.write_object(seq[i])
 *             if i != last:
 *                 if indent is None:             # <<<<<<<<<<<<<<
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)
 *                 else:
 */
      __pyx_t_3 = (__pyx_v_indent == ((PyObject*)Py_None));
      __pyx_t_6 = (__pyx_t_3 != 0);
      if (__pyx_t_6) {

        /* "openstep_plist/writer.pyx":447
 *             if i != last:
 *                 if indent is None:
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)             # <<<<<<<<<<<<<<
 *                 else:
 *                     dest.push_back(c',')
 */
        try {
          __pyx_t_10 = __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(__pyx_v_self, __pyx_v_14openstep_plist_6writer_ARRAY_SEP_NO_INDENT, 2);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 447, __pyx_L1_error)
        }
        __pyx_v_count = (__pyx_v_count + __pyx_t_10);

        /* "openstep_plist/writer.pyx":446
 *             count += self.write_object(seq[i])
 *             if i != last:
 *                 if indent is None:             # <<<<<<<<<<<<<<
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)
 *                 else:
 */
        goto __pyx_L10;
      }

      /* "openstep_plist/writer.pyx":449
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)
 *                 else:
 *                     dest.push_back(c',')             # <<<<<<<<<<<<<<
 *                     if self.single_line_tuples:
 *                         dest.push_back(c' ')
 */
      /*else*/ {
        try {
          __pyx_v_dest->push_back(',');
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 449, __pyx_L1_error)
        }

        /* "openstep_plist/writer.pyx":450
 *                 else:
 *                     dest.push_back(c',')
 *                     if self.single_line_tuples:             # <<<<<<<<<<<<<<
 *                         dest.push_back(c' ')
 *                         count += 1
 */
        __pyx_t_6 = (__pyx_v_self->single_line_tuples != 0);
        if (__pyx_t_6) {

          /* "openstep_plist/writer.pyx":451
 *                     dest.push_back(c',')
 *                     if self.single_line_tuples:
 *                         dest.push_back(c' ')             # <<<<<<<<<<<<<<
 *                         count += 1
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 */
          try {
            __pyx_v_dest->push_back(' ');
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 451, __pyx_L1_error)
          }

          /* "openstep_plist/writer.pyx":452
 *                     if self.single_line_tuples:
 *                         dest.push_back(c' ')
 *                         count += 1             # <<<<<<<<<<<<<<
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 * 
 */
          __pyx_v_count = (__pyx_v_count + 1);

          /* "openstep_plist/writer.pyx":450
 *                 else:
 *                     dest.push_back(c',')
 *                     if self.single_line_tuples:             # <<<<<<<<<<<<<<
 *                         dest.push_back(c' ')
 *                         count += 1
 */
        }

        /* "openstep_plist/writer.pyx":453
 *                         dest.push_back(c' ')
 *                         count += 1
 *                     count += 1 + self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 * 
 *         if indent is not None and not self.single_line_tuples:
 */
        __pyx_t_10 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 453, __pyx_L1_error)
        __pyx_v_count = (__pyx_v_count + (1 + __pyx_t_10));
      }
      __pyx_L10:;

      /* "openstep_plist/writer.pyx":445
 *         for i in range(length):
 *             count += self.write_object(seq[i])
 *             if i != last:             # <<<<<<<<<<<<<<
 *                 if indent is None:
 *                     count += self.extend_buffer(ARRAY_SEP_NO_INDENT, 2)
 */
    }
  }

  /* "openstep_plist/writer.pyx":455
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 * 
 *         if indent is not None and not self.single_line_tuples:             # <<<<<<<<<<<<<<
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
  __pyx_t_3 = (__pyx_v_indent != ((PyObject*)Py_None));
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_6 = __pyx_t_5;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_5 = ((!(__pyx_v_self->single_line_tuples != 0)) != 0);
  __pyx_t_6 = __pyx_t_5;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_6) {

    /* "openstep_plist/writer.pyx":456
 * 
 *         if indent is not None and not self.single_line_tuples:
 *             self.current_indent_level -= 1             # <<<<<<<<<<<<<<
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)
 */
    __pyx_v_self->current_indent_level = (__pyx_v_self->current_indent_level - 1);

    /* "openstep_plist/writer.pyx":457
 *         if indent is not None and not self.single_line_tuples:
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent             # <<<<<<<<<<<<<<
 *             count += self.write_unquoted_string(newline_indent)
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->current_indent_level); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_4, __pyx_v_indent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_u__4, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_newline_indent, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "openstep_plist/writer.pyx":458
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 * 
 *         dest.push_back(c')')
 */
    __pyx_t_1 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 458, __pyx_L1_error)
    __pyx_v_count = (__pyx_v_count + __pyx_t_1);

    /* "openstep_plist/writer.pyx":455
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 * 
 *         if indent is not None and not self.single_line_tuples:             # <<<<<<<<<<<<<<
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
  }

  /* "openstep_plist/writer.pyx":460
 *             count += self.write_unquoted_string(newline_indent)
 * 
 *         dest.push_back(c')')             # <<<<<<<<<<<<<<
 *         count += 1
 * 
 */
  try {
    __pyx_v_dest->push_back(')');
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 460, __pyx_L1_error)
  }

  /* "openstep_plist/writer.pyx":461
 * 
 *         dest.push_back(c')')
 *         count += 1             # <<<<<<<<<<<<<<
 * 
 *         return count
 */
  __pyx_v_count = (__pyx_v_count + 1);

  /* "openstep_plist/writer.pyx":463
 *         count += 1
 * 
 *         return count             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t write_dict(self, dict d) except -1:
 */
  __pyx_r = __pyx_v_count;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":419
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef Py_ssize_t write_array_from_tuple(self, tuple seq) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Py_ssize_t length = len(seq)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write_array_from_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indent);
  __Pyx_XDECREF(__pyx_v_newline_indent);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":465
 *         return count
 * 
 *     cdef Py_ssize_t write_dict(self, dict d) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             unicode indent
 */

static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_dict(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_v_indent = 0;
  PyObject *__pyx_v_newline_indent = 0;
  std::vector<Py_UNICODE>  *__pyx_v_dest;
  Py_ssize_t __pyx_v_last;
  Py_ssize_t __pyx_v_count;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<Py_UNICODE>  *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_dict", 0);

  /* "openstep_plist/writer.pyx":468
 *         cdef:
 *             unicode indent
 *             unicode newline_indent = ""             # <<<<<<<<<<<<<<
 *             vector[Py_UNICODE] *dest = self.dest
 *             Py_ssize_t last, count, i
 */
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_v_newline_indent = __pyx_kp_u__2;

  /* "openstep_plist/writer.pyx":469
 *             unicode indent
 *             unicode newline_indent = ""
 *             vector[Py_UNICODE] *dest = self.dest             # <<<<<<<<<<<<<<
 *             Py_ssize_t last, count, i
 * 
 */
  __pyx_t_1 = __pyx_v_self->dest;
  __pyx_v_dest = __pyx_t_1;

  /* "openstep_plist/writer.pyx":472
 *             Py_ssize_t last, count, i
 * 
 *         if not d:             # <<<<<<<<<<<<<<
 *             dest.push_back(c'{')
 *             dest.push_back(c'}')
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_d); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 472, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "openstep_plist/writer.pyx":473
 * 
 *         if not d:
 *             dest.push_back(c'{')             # <<<<<<<<<<<<<<
 *             dest.push_back(c'}')
 *             return 2
 */
    try {
      __pyx_v_dest->push_back('{');
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 473, __pyx_L1_error)
      }

      /* "openstep_plist/writer.pyx":474
 *         if not d:
 *             dest.push_back(c'{')
 *             dest.push_back(c'}')             # <<<<<<<<<<<<<<
 *             return 2
 * 
 */
      try {
      __pyx_v_dest->push_back('}');
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 474, __pyx_L1_error)
    }

    /* "openstep_plist/writer.pyx":475
 *             dest.push_back(c'{')
 *             dest.push_back(c'}')
 *             return 2             # <<<<<<<<<<<<<<
 * 
 *         dest.push_back(c'{')
 */
    __pyx_r = 2;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":472
 *             Py_ssize_t last, count, i
 * 
 *         if not d:             # <<<<<<<<<<<<<<
 *             dest.push_back(c'{')
 *             dest.push_back(c'}')
 */
  }

  /* "openstep_plist/writer.pyx":477
 *             return 2
 * 
 *         dest.push_back(c'{')             # <<<<<<<<<<<<<<
 *         count = 1
 * 
 */
  try {
    __pyx_v_dest->push_back('{');
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 477, __pyx_L1_error)
    }

    /* "openstep_plist/writer.pyx":478
 * 
 *         dest.push_back(c'{')
 *         count = 1             # <<<<<<<<<<<<<<
 * 
 *         indent = self.indent
 */
    __pyx_v_count = 1;

    /* "openstep_plist/writer.pyx":480
 *         count = 1
 * 
 *         indent = self.indent             # <<<<<<<<<<<<<<
 *         if indent is not None:
 *             self.current_indent_level += 1
 */
    __pyx_t_4 = __pyx_v_self->indent;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_indent = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "openstep_plist/writer.pyx":481
 * 
 *         indent = self.indent
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
    __pyx_t_3 = (__pyx_v_indent != ((PyObject*)Py_None));
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "openstep_plist/writer.pyx":482
 *         indent = self.indent
 *         if indent is not None:
 *             self.current_indent_level += 1             # <<<<<<<<<<<<<<
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)
 */
      __pyx_v_self->current_indent_level = (__pyx_v_self->current_indent_level + 1);

      /* "openstep_plist/writer.pyx":483
 *         if indent is not None:
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent             # <<<<<<<<<<<<<<
 *             count += self.write_unquoted_string(newline_indent)
 * 
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->current_indent_level); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_v_indent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_u__4, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 483, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_newline_indent, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "openstep_plist/writer.pyx":484
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 * 
 *         last = len(d) - 1
 */
      __pyx_t_6 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 484, __pyx_L1_error)
      __pyx_v_count = (__pyx_v_count + __pyx_t_6);

      /* "openstep_plist/writer.pyx":481
 * 
 *         indent = self.indent
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
    }

    /* "openstep_plist/writer.pyx":486
 *             count += self.write_unquoted_string(newline_indent)
 * 
 *         last = len(d) - 1             # <<<<<<<<<<<<<<
 *         for i, (key, value) in enumerate(sorted(d.items())):
 *             if not isinstance(key, unicode):
 */
    if (unlikely(__pyx_v_d == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 486, __pyx_L1_error)
    }
    __pyx_t_6 = PyDict_Size(__pyx_v_d); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 486, __pyx_L1_error)
    __pyx_v_last = (__pyx_t_6 - 1);

    /* "openstep_plist/writer.pyx":487
 * 
 *         last = len(d) - 1
 *         for i, (key, value) in enumerate(sorted(d.items())):             # <<<<<<<<<<<<<<
 *             if not isinstance(key, unicode):
 *                 key = unicode(key)
 */
    __pyx_t_6 = 0;
    if (unlikely(__pyx_v_d == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 487, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_Items(__pyx_v_d); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_8 = PyList_Sort(__pyx_t_4); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 487, __pyx_L1_error)
    __pyx_t_7 = __pyx_t_4; __Pyx_INCREF(__pyx_t_7); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_7)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 487, __pyx_L1_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 487, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_10);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 487, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 487, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_5)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 487, __pyx_L1_error)
        __pyx_L8_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_v_i = __pyx_t_6;
      __pyx_t_6 = (__pyx_t_6 + 1);

      /* "openstep_plist/writer.pyx":488
 *         last = len(d) - 1
 *         for i, (key, value) in enumerate(sorted(d.items())):
 *             if not isinstance(key, unicode):             # <<<<<<<<<<<<<<
 *                 key = unicode(key)
 *             count += self.write_string(key)
 */
      __pyx_t_2 = PyUnicode_Check(__pyx_v_key); 
      __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_3) {

        /* "openstep_plist/writer.pyx":489
 *         for i, (key, value) in enumerate(sorted(d.items())):
 *             if not isinstance(key, unicode):
 *                 key = unicode(key)             # <<<<<<<<<<<<<<
 *             count += self.write_string(key)
 * 
 */
        __pyx_t_4 = __Pyx_PyObject_Unicode(__pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "openstep_plist/writer.pyx":488
 *         last = len(d) - 1
 *         for i, (key, value) in enumerate(sorted(d.items())):
 *             if not isinstance(key, unicode):             # <<<<<<<<<<<<<<
 *                 key = unicode(key)
 *             count += self.write_string(key)
 */
      }

      /* "openstep_plist/writer.pyx":490
 *             if not isinstance(key, unicode):
 *                 key = unicode(key)
 *             count += self.write_string(key)             # <<<<<<<<<<<<<<
 * 
 *             count += self.extend_buffer(DICT_KEY_VALUE_SEP, 3)
 */
      if (!(likely(PyUnicode_CheckExact(__pyx_v_key))||((__pyx_v_key) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_key)->tp_name), 0))) __PYX_ERR(0, 490, __pyx_L1_error)
      __pyx_t_13 = __pyx_f_14openstep_plist_6writer_6Writer_write_string(__pyx_v_self, ((PyObject*)__pyx_v_key)); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 490, __pyx_L1_error)
      __pyx_v_count = (__pyx_v_count + __pyx_t_13);

      /* "openstep_plist/writer.pyx":492
 *             count += self.write_string(key)
 * 
 *             count += self.extend_buffer(DICT_KEY_VALUE_SEP, 3)             # <<<<<<<<<<<<<<
 * 
 *             count += self.write_object(value)
 */
      try {
        __pyx_t_13 = __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(__pyx_v_self, __pyx_v_14openstep_plist_6writer_DICT_KEY_VALUE_SEP, 3);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 492, __pyx_L1_error)
      }
      __pyx_v_count = (__pyx_v_count + __pyx_t_13);

      /* "openstep_plist/writer.pyx":494
 *             count += self.extend_buffer(DICT_KEY_VALUE_SEP, 3)
 * 
 *             count += self.write_object(value)             # <<<<<<<<<<<<<<
 * 
 *             if i != last:
 */
      __pyx_t_13 = __pyx_f_14openstep_plist_6writer_6Writer_write_object(__pyx_v_self, __pyx_v_value); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 494, __pyx_L1_error)
      __pyx_v_count = (__pyx_v_count + __pyx_t_13);

      /* "openstep_plist/writer.pyx":496
 *             count += self.write_object(value)
 * 
 *             if i != last:             # <<<<<<<<<<<<<<
 *                 if indent is None:
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)
 */
      __pyx_t_3 = ((__pyx_v_i != __pyx_v_last) != 0);
      if (__pyx_t_3) {

        /* "openstep_plist/writer.pyx":497
 * 
 *             if i != last:
 *                 if indent is None:             # <<<<<<<<<<<<<<
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)
 *                 else:
 */
        __pyx_t_3 = (__pyx_v_indent == ((PyObject*)Py_None));
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {

          /* "openstep_plist/writer.pyx":498
 *             if i != last:
 *                 if indent is None:
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)             # <<<<<<<<<<<<<<
 *                 else:
 *                     dest.push_back(c';')
 */
          try {
            __pyx_t_13 = __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(__pyx_v_self, __pyx_v_14openstep_plist_6writer_DICT_ITEM_SEP_NO_INDENT, 2);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 498, __pyx_L1_error)
          }
          __pyx_v_count = (__pyx_v_count + __pyx_t_13);

          /* "openstep_plist/writer.pyx":497
 * 
 *             if i != last:
 *                 if indent is None:             # <<<<<<<<<<<<<<
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)
 *                 else:
 */
          goto __pyx_L11;
        }

        /* "openstep_plist/writer.pyx":500
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)
 *                 else:
 *                     dest.push_back(c';')             # <<<<<<<<<<<<<<
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 *             else:
 */
        /*else*/ {
          try {
            __pyx_v_dest->push_back(';');
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 500, __pyx_L1_error)
          }

          /* "openstep_plist/writer.pyx":501
 *                 else:
 *                     dest.push_back(c';')
 *                     count += 1 + self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 *             else:
 *                 dest.push_back(c';')
 */
          __pyx_t_13 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 501, __pyx_L1_error)
          __pyx_v_count = (__pyx_v_count + (1 + __pyx_t_13));
        }
        __pyx_L11:;

        /* "openstep_plist/writer.pyx":496
 *             count += self.write_object(value)
 * 
 *             if i != last:             # <<<<<<<<<<<<<<
 *                 if indent is None:
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)
 */
        goto __pyx_L10;
      }

      /* "openstep_plist/writer.pyx":503
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 *             else:
 *                 dest.push_back(c';')             # <<<<<<<<<<<<<<
 *                 count += 1
 * 
 */
      /*else*/ {
        try {
          __pyx_v_dest->push_back(';');
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 503, __pyx_L1_error)
        }

        /* "openstep_plist/writer.pyx":504
 *             else:
 *                 dest.push_back(c';')
 *                 count += 1             # <<<<<<<<<<<<<<
 * 
 *         if indent is not None:
 */
        __pyx_v_count = (__pyx_v_count + 1);
      }
      __pyx_L10:;

      /* "openstep_plist/writer.pyx":487
 * 
 *         last = len(d) - 1
 *         for i, (key, value) in enumerate(sorted(d.items())):             # <<<<<<<<<<<<<<
 *             if not isinstance(key, unicode):
 *                 key = unicode(key)
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "openstep_plist/writer.pyx":506
 *                 count += 1
 * 
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
    __pyx_t_2 = (__pyx_v_indent != ((PyObject*)Py_None));
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "openstep_plist/writer.pyx":507
 * 
 *         if indent is not None:
 *             self.current_indent_level -= 1             # <<<<<<<<<<<<<<
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)
 */
      __pyx_v_self->current_indent_level = (__pyx_v_self->current_indent_level - 1);

      /* "openstep_plist/writer.pyx":508
 *         if indent is not None:
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent             # <<<<<<<<<<<<<<
 *             count += self.write_unquoted_string(newline_indent)
 * 
 */
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->current_indent_level); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 508, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyNumber_Multiply(__pyx_t_7, __pyx_v_indent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_kp_u__4, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 508, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 508, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_newline_indent, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "openstep_plist/writer.pyx":509
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 * 
 *         dest.push_back(c'}')
 */
      __pyx_t_6 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 509, __pyx_L1_error)
      __pyx_v_count = (__pyx_v_count + __pyx_t_6);

      /* "openstep_plist/writer.pyx":506
 *                 count += 1
 * 
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
    }

    /* "openstep_plist/writer.pyx":511
 *             count += self.write_unquoted_string(newline_indent)
 * 
 *         dest.push_back(c'}')             # <<<<<<<<<<<<<<
 *         count += 1
 * 
 */
    try {
    __pyx_v_dest->push_back('}');
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 511, __pyx_L1_error)
  }

  /* "openstep_plist/writer.pyx":512
 * 
 *         dest.push_back(c'}')
 *         count += 1             # <<<<<<<<<<<<<<
 * 
 *         return count
 */
  __pyx_v_count = (__pyx_v_count + 1);

  /* "openstep_plist/writer.pyx":514
 *         count += 1
 * 
 *         return count             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t write_ordered_dict(self, object d) except -1:
 */
  __pyx_r = __pyx_v_count;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":465
 *         return count
 * 
 *     cdef Py_ssize_t write_dict(self, dict d) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             unicode indent
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indent);
  __Pyx_XDECREF(__pyx_v_newline_indent);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":516
 *         return count
 * 
 *     cdef Py_ssize_t write_ordered_dict(self, object d) except -1:             # <<<<<<<<<<<<<<
 *         # This is the same as the write_dict method but doesn't sort the items.
 *         # Also, in `write_dict`, the type of `d` is `dict` so it uses optimized
 */

static Py_ssize_t __pyx_f_14openstep_plist_6writer_6Writer_write_ordered_dict(struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_v_indent = 0;
  PyObject *__pyx_v_newline_indent = 0;
  std::vector<Py_UNICODE>  *__pyx_v_dest;
  Py_ssize_t __pyx_v_last;
  Py_ssize_t __pyx_v_count;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<Py_UNICODE>  *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_ordered_dict", 0);

  /* "openstep_plist/writer.pyx":523
 *         cdef:
 *             unicode indent
 *             unicode newline_indent = ""             # <<<<<<<<<<<<<<
 *             vector[Py_UNICODE] *dest = self.dest
 *             Py_ssize_t last, count, i
 */
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_v_newline_indent = __pyx_kp_u__2;

  /* "openstep_plist/writer.pyx":524
 *             unicode indent
 *             unicode newline_indent = ""
 *             vector[Py_UNICODE] *dest = self.dest             # <<<<<<<<<<<<<<
 *             Py_ssize_t last, count, i
 * 
 */
  __pyx_t_1 = __pyx_v_self->dest;
  __pyx_v_dest = __pyx_t_1;

  /* "openstep_plist/writer.pyx":527
 *             Py_ssize_t last, count, i
 * 
 *         if not d:             # <<<<<<<<<<<<<<
 *             dest.push_back(c'{')
 *             dest.push_back(c'}')
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_d); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 527, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "openstep_plist/writer.pyx":528
 * 
 *         if not d:
 *             dest.push_back(c'{')             # <<<<<<<<<<<<<<
 *             dest.push_back(c'}')
 *             return 2
 */
    try {
      __pyx_v_dest->push_back('{');
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 528, __pyx_L1_error)
      }

      /* "openstep_plist/writer.pyx":529
 *         if not d:
 *             dest.push_back(c'{')
 *             dest.push_back(c'}')             # <<<<<<<<<<<<<<
 *             return 2
 * 
 */
      try {
      __pyx_v_dest->push_back('}');
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 529, __pyx_L1_error)
    }

    /* "openstep_plist/writer.pyx":530
 *             dest.push_back(c'{')
 *             dest.push_back(c'}')
 *             return 2             # <<<<<<<<<<<<<<
 * 
 *         dest.push_back(c'{')
 */
    __pyx_r = 2;
    goto __pyx_L0;

    /* "openstep_plist/writer.pyx":527
 *             Py_ssize_t last, count, i
 * 
 *         if not d:             # <<<<<<<<<<<<<<
 *             dest.push_back(c'{')
 *             dest.push_back(c'}')
 */
  }

  /* "openstep_plist/writer.pyx":532
 *             return 2
 * 
 *         dest.push_back(c'{')             # <<<<<<<<<<<<<<
 *         count = 1
 * 
 */
  try {
    __pyx_v_dest->push_back('{');
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 532, __pyx_L1_error)
    }

    /* "openstep_plist/writer.pyx":533
 * 
 *         dest.push_back(c'{')
 *         count = 1             # <<<<<<<<<<<<<<
 * 
 *         indent = self.indent
 */
    __pyx_v_count = 1;

    /* "openstep_plist/writer.pyx":535
 *         count = 1
 * 
 *         indent = self.indent             # <<<<<<<<<<<<<<
 *         if indent is not None:
 *             self.current_indent_level += 1
 */
    __pyx_t_4 = __pyx_v_self->indent;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_indent = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "openstep_plist/writer.pyx":536
 * 
 *         indent = self.indent
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
    __pyx_t_3 = (__pyx_v_indent != ((PyObject*)Py_None));
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "openstep_plist/writer.pyx":537
 *         indent = self.indent
 *         if indent is not None:
 *             self.current_indent_level += 1             # <<<<<<<<<<<<<<
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)
 */
      __pyx_v_self->current_indent_level = (__pyx_v_self->current_indent_level + 1);

      /* "openstep_plist/writer.pyx":538
 *         if indent is not None:
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent             # <<<<<<<<<<<<<<
 *             count += self.write_unquoted_string(newline_indent)
 * 
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->current_indent_level); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_v_indent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_u__4, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_newline_indent, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "openstep_plist/writer.pyx":539
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 * 
 *         last = len(d) - 1
 */
      __pyx_t_6 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 539, __pyx_L1_error)
      __pyx_v_count = (__pyx_v_count + __pyx_t_6);

      /* "openstep_plist/writer.pyx":536
 * 
 *         indent = self.indent
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level += 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
    }

    /* "openstep_plist/writer.pyx":541
 *             count += self.write_unquoted_string(newline_indent)
 * 
 *         last = len(d) - 1             # <<<<<<<<<<<<<<
 *         # we don't sort OrderedDict
 *         for i, (key, value) in enumerate(d.items()):
 */
    __pyx_t_6 = PyObject_Length(__pyx_v_d); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 541, __pyx_L1_error)
    __pyx_v_last = (__pyx_t_6 - 1);

    /* "openstep_plist/writer.pyx":543
 *         last = len(d) - 1
 *         # we don't sort OrderedDict
 *         for i, (key, value) in enumerate(d.items()):             # <<<<<<<<<<<<<<
 *             if not isinstance(key, unicode):
 *                 key = unicode(key)
 */
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    if (unlikely(__pyx_v_d == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 543, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_d, 0, __pyx_n_s_items, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
    while (1) {
      __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_8, &__pyx_t_7, &__pyx_t_5, &__pyx_t_10, NULL, __pyx_t_9);
      if (unlikely(__pyx_t_11 == 0)) break;
      if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_v_i = __pyx_t_6;
      __pyx_t_6 = (__pyx_t_6 + 1);

      /* "openstep_plist/writer.pyx":544
 *         # we don't sort OrderedDict
 *         for i, (key, value) in enumerate(d.items()):
 *             if not isinstance(key, unicode):             # <<<<<<<<<<<<<<
 *                 key = unicode(key)
 *             count += self.write_string(key)
 */
      __pyx_t_2 = PyUnicode_Check(__pyx_v_key); 
      __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_3) {

        /* "openstep_plist/writer.pyx":545
 *         for i, (key, value) in enumerate(d.items()):
 *             if not isinstance(key, unicode):
 *                 key = unicode(key)             # <<<<<<<<<<<<<<
 *             count += self.write_string(key)
 * 
 */
        __pyx_t_10 = __Pyx_PyObject_Unicode(__pyx_v_key); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 545, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "openstep_plist/writer.pyx":544
 *         # we don't sort OrderedDict
 *         for i, (key, value) in enumerate(d.items()):
 *             if not isinstance(key, unicode):             # <<<<<<<<<<<<<<
 *                 key = unicode(key)
 *             count += self.write_string(key)
 */
      }

      /* "openstep_plist/writer.pyx":546
 *             if not isinstance(key, unicode):
 *                 key = unicode(key)
 *             count += self.write_string(key)             # <<<<<<<<<<<<<<
 * 
 *             count += self.extend_buffer(DICT_KEY_VALUE_SEP, 3)
 */
      if (!(likely(PyUnicode_CheckExact(__pyx_v_key))||((__pyx_v_key) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_key)->tp_name), 0))) __PYX_ERR(0, 546, __pyx_L1_error)
      __pyx_t_12 = __pyx_f_14openstep_plist_6writer_6Writer_write_string(__pyx_v_self, ((PyObject*)__pyx_v_key)); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 546, __pyx_L1_error)
      __pyx_v_count = (__pyx_v_count + __pyx_t_12);

      /* "openstep_plist/writer.pyx":548
 *             count += self.write_string(key)
 * 
 *             count += self.extend_buffer(DICT_KEY_VALUE_SEP, 3)             # <<<<<<<<<<<<<<
 * 
 *             count += self.write_object(value)
 */
      try {
        __pyx_t_12 = __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(__pyx_v_self, __pyx_v_14openstep_plist_6writer_DICT_KEY_VALUE_SEP, 3);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 548, __pyx_L1_error)
      }
      __pyx_v_count = (__pyx_v_count + __pyx_t_12);

      /* "openstep_plist/writer.pyx":550
 *             count += self.extend_buffer(DICT_KEY_VALUE_SEP, 3)
 * 
 *             count += self.write_object(value)             # <<<<<<<<<<<<<<
 * 
 *             if i != last:
 */
      __pyx_t_12 = __pyx_f_14openstep_plist_6writer_6Writer_write_object(__pyx_v_self, __pyx_v_value); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 550, __pyx_L1_error)
      __pyx_v_count = (__pyx_v_count + __pyx_t_12);

      /* "openstep_plist/writer.pyx":552
 *             count += self.write_object(value)
 * 
 *             if i != last:             # <<<<<<<<<<<<<<
 *                 if indent is None:
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)
 */
      __pyx_t_3 = ((__pyx_v_i != __pyx_v_last) != 0);
      if (__pyx_t_3) {

        /* "openstep_plist/writer.pyx":553
 * 
 *             if i != last:
 *                 if indent is None:             # <<<<<<<<<<<<<<
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)
 *                 else:
 */
        __pyx_t_3 = (__pyx_v_indent == ((PyObject*)Py_None));
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {

          /* "openstep_plist/writer.pyx":554
 *             if i != last:
 *                 if indent is None:
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)             # <<<<<<<<<<<<<<
 *                 else:
 *                     dest.push_back(c';')
 */
          try {
            __pyx_t_12 = __pyx_f_14openstep_plist_6writer_6Writer_extend_buffer(__pyx_v_self, __pyx_v_14openstep_plist_6writer_DICT_ITEM_SEP_NO_INDENT, 2);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 554, __pyx_L1_error)
          }
          __pyx_v_count = (__pyx_v_count + __pyx_t_12);

          /* "openstep_plist/writer.pyx":553
 * 
 *             if i != last:
 *                 if indent is None:             # <<<<<<<<<<<<<<
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)
 *                 else:
 */
          goto __pyx_L9;
        }

        /* "openstep_plist/writer.pyx":556
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)
 *                 else:
 *                     dest.push_back(c';')             # <<<<<<<<<<<<<<
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 *             else:
 */
        /*else*/ {
          try {
            __pyx_v_dest->push_back(';');
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 556, __pyx_L1_error)
          }

          /* "openstep_plist/writer.pyx":557
 *                 else:
 *                     dest.push_back(c';')
 *                     count += 1 + self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 *             else:
 *                 dest.push_back(c';')
 */
          __pyx_t_12 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 557, __pyx_L1_error)
          __pyx_v_count = (__pyx_v_count + (1 + __pyx_t_12));
        }
        __pyx_L9:;

        /* "openstep_plist/writer.pyx":552
 *             count += self.write_object(value)
 * 
 *             if i != last:             # <<<<<<<<<<<<<<
 *                 if indent is None:
 *                     count += self.extend_buffer(DICT_ITEM_SEP_NO_INDENT, 2)
 */
        goto __pyx_L8;
      }

      /* "openstep_plist/writer.pyx":559
 *                     count += 1 + self.write_unquoted_string(newline_indent)
 *             else:
 *                 dest.push_back(c';')             # <<<<<<<<<<<<<<
 *                 count += 1
 * 
 */
      /*else*/ {
        try {
          __pyx_v_dest->push_back(';');
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 559, __pyx_L1_error)
        }

        /* "openstep_plist/writer.pyx":560
 *             else:
 *                 dest.push_back(c';')
 *                 count += 1             # <<<<<<<<<<<<<<
 * 
 *         if indent is not None:
 */
        __pyx_v_count = (__pyx_v_count + 1);
      }
      __pyx_L8:;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "openstep_plist/writer.pyx":562
 *                 count += 1
 * 
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
    __pyx_t_2 = (__pyx_v_indent != ((PyObject*)Py_None));
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "openstep_plist/writer.pyx":563
 * 
 *         if indent is not None:
 *             self.current_indent_level -= 1             # <<<<<<<<<<<<<<
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)
 */
      __pyx_v_self->current_indent_level = (__pyx_v_self->current_indent_level - 1);

      /* "openstep_plist/writer.pyx":564
 *         if indent is not None:
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent             # <<<<<<<<<<<<<<
 *             count += self.write_unquoted_string(newline_indent)
 * 
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->current_indent_level); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = PyNumber_Multiply(__pyx_t_4, __pyx_v_indent); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_u__4, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_newline_indent, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "openstep_plist/writer.pyx":565
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 *             count += self.write_unquoted_string(newline_indent)             # <<<<<<<<<<<<<<
 * 
 *         dest.push_back(c'}')
 */
      __pyx_t_6 = __pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string(__pyx_v_self, __pyx_v_newline_indent); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 565, __pyx_L1_error)
      __pyx_v_count = (__pyx_v_count + __pyx_t_6);

      /* "openstep_plist/writer.pyx":562
 *                 count += 1
 * 
 *         if indent is not None:             # <<<<<<<<<<<<<<
 *             self.current_indent_level -= 1
 *             newline_indent = '\n' + self.current_indent_level * indent
 */
    }

    /* "openstep_plist/writer.pyx":567
 *             count += self.write_unquoted_string(newline_indent)
 * 
 *         dest.push_back(c'}')             # <<<<<<<<<<<<<<
 *         count += 1
 * 
 */
    try {
    __pyx_v_dest->push_back('}');
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 567, __pyx_L1_error)
  }

  /* "openstep_plist/writer.pyx":568
 * 
 *         dest.push_back(c'}')
 *         count += 1             # <<<<<<<<<<<<<<
 * 
 *         return count
 */
  __pyx_v_count = (__pyx_v_count + 1);

  /* "openstep_plist/writer.pyx":570
 *         count += 1
 * 
 *         return count             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_count;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":516
 *         return count
 * 
 *     cdef Py_ssize_t write_ordered_dict(self, object d) except -1:             # <<<<<<<<<<<<<<
 *         # This is the same as the write_dict method but doesn't sort the items.
 *         # Also, in `write_dict`, the type of `d` is `dict` so it uses optimized
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.write_ordered_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indent);
  __Pyx_XDECREF(__pyx_v_newline_indent);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14openstep_plist_6writer_6Writer_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14openstep_plist_6writer_6Writer_10__reduce_cython__[] = "Writer.__reduce_cython__(self)";
static PyObject *__pyx_pw_14openstep_plist_6writer_6Writer_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14openstep_plist_6writer_6Writer_10__reduce_cython__(((struct __pyx_obj_14openstep_plist_6writer_Writer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14openstep_plist_6writer_6Writer_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14openstep_plist_6writer_6Writer_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_14openstep_plist_6writer_6Writer_12__setstate_cython__[] = "Writer.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_14openstep_plist_6writer_6Writer_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14openstep_plist_6writer_6Writer_12__setstate_cython__(((struct __pyx_obj_14openstep_plist_6writer_Writer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14openstep_plist_6writer_6Writer_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openstep_plist.writer.Writer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":573
 * 
 * 
 * def dumps(obj, bint unicode_escape=True, int float_precision=6, indent=None,             # <<<<<<<<<<<<<<
 *           single_line_tuples=False):
 *     w = Writer(
 */

/* Python wrapper */
static PyObject *__pyx_pw_14openstep_plist_6writer_1dumps(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14openstep_plist_6writer_dumps[] = "dumps(obj, bool unicode_escape=True, int float_precision=6, indent=None, single_line_tuples=False)";
static PyMethodDef __pyx_mdef_14openstep_plist_6writer_1dumps = {"dumps", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14openstep_plist_6writer_1dumps, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14openstep_plist_6writer_dumps};
static PyObject *__pyx_pw_14openstep_plist_6writer_1dumps(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_unicode_escape;
  int __pyx_v_float_precision;
  PyObject *__pyx_v_indent = 0;
  PyObject *__pyx_v_single_line_tuples = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dumps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_unicode_escape,&__pyx_n_s_float_precision,&__pyx_n_s_indent,&__pyx_n_s_single_line_tuples,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);

    /* "openstep_plist/writer.pyx":574
 * 
 * def dumps(obj, bint unicode_escape=True, int float_precision=6, indent=None,
 *           single_line_tuples=False):             # <<<<<<<<<<<<<<
 *     w = Writer(
 *         unicode_escape=unicode_escape,
 */
    values[4] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unicode_escape);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_float_precision);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indent);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_single_line_tuples);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dumps") < 0)) __PYX_ERR(0, 573, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    if (values[1]) {
      __pyx_v_unicode_escape = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_unicode_escape == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L3_error)
    } else {

      /* "openstep_plist/writer.pyx":573
 * 
 * 
 * def dumps(obj, bint unicode_escape=True, int float_precision=6, indent=None,             # <<<<<<<<<<<<<<
 *           single_line_tuples=False):
 *     w = Writer(
 */
      __pyx_v_unicode_escape = ((int)1);
    }
    if (values[2]) {
      __pyx_v_float_precision = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_float_precision == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L3_error)
    } else {
      __pyx_v_float_precision = ((int)6);
    }
    __pyx_v_indent = values[3];
    __pyx_v_single_line_tuples = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dumps", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 573, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openstep_plist.writer.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14openstep_plist_6writer_dumps(__pyx_self, __pyx_v_obj, __pyx_v_unicode_escape, __pyx_v_float_precision, __pyx_v_indent, __pyx_v_single_line_tuples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14openstep_plist_6writer_dumps(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, int __pyx_v_unicode_escape, int __pyx_v_float_precision, PyObject *__pyx_v_indent, PyObject *__pyx_v_single_line_tuples) {
  struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_w = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dumps", 0);

  /* "openstep_plist/writer.pyx":576
 *           single_line_tuples=False):
 *     w = Writer(
 *         unicode_escape=unicode_escape,             # <<<<<<<<<<<<<<
 *         float_precision=float_precision,
 *         indent=indent,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_unicode_escape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_unicode_escape, __pyx_t_2) < 0) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":577
 *     w = Writer(
 *         unicode_escape=unicode_escape,
 *         float_precision=float_precision,             # <<<<<<<<<<<<<<
 *         indent=indent,
 *         single_line_tuples=single_line_tuples,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_float_precision); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_float_precision, __pyx_t_2) < 0) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":578
 *         unicode_escape=unicode_escape,
 *         float_precision=float_precision,
 *         indent=indent,             # <<<<<<<<<<<<<<
 *         single_line_tuples=single_line_tuples,
 *     )
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_indent, __pyx_v_indent) < 0) __PYX_ERR(0, 576, __pyx_L1_error)

  /* "openstep_plist/writer.pyx":579
 *         float_precision=float_precision,
 *         indent=indent,
 *         single_line_tuples=single_line_tuples,             # <<<<<<<<<<<<<<
 *     )
 *     w.write(obj)
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_single_line_tuples, __pyx_v_single_line_tuples) < 0) __PYX_ERR(0, 576, __pyx_L1_error)

  /* "openstep_plist/writer.pyx":575
 * def dumps(obj, bint unicode_escape=True, int float_precision=6, indent=None,
 *           single_line_tuples=False):
 *     w = Writer(             # <<<<<<<<<<<<<<
 *         unicode_escape=unicode_escape,
 *         float_precision=float_precision,
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14openstep_plist_6writer_Writer), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_w = ((struct __pyx_obj_14openstep_plist_6writer_Writer *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":581
 *         single_line_tuples=single_line_tuples,
 *     )
 *     w.write(obj)             # <<<<<<<<<<<<<<
 *     return w.getvalue()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_w), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_obj);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":582
 *     )
 *     w.write(obj)
 *     return w.getvalue()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_w), __pyx_n_s_getvalue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "openstep_plist/writer.pyx":573
 * 
 * 
 * def dumps(obj, bint unicode_escape=True, int float_precision=6, indent=None,             # <<<<<<<<<<<<<<
 *           single_line_tuples=False):
 *     w = Writer(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openstep_plist.writer.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_w);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openstep_plist/writer.pyx":585
 * 
 * 
 * def dump(obj, fp, bint unicode_escape=True, int float_precision=6, indent=None,             # <<<<<<<<<<<<<<
 *          single_line_tuples=False):
 *     w = Writer(
 */

/* Python wrapper */
static PyObject *__pyx_pw_14openstep_plist_6writer_3dump(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14openstep_plist_6writer_2dump[] = "dump(obj, fp, bool unicode_escape=True, int float_precision=6, indent=None, single_line_tuples=False)";
static PyMethodDef __pyx_mdef_14openstep_plist_6writer_3dump = {"dump", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14openstep_plist_6writer_3dump, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14openstep_plist_6writer_2dump};
static PyObject *__pyx_pw_14openstep_plist_6writer_3dump(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_fp = 0;
  int __pyx_v_unicode_escape;
  int __pyx_v_float_precision;
  PyObject *__pyx_v_indent = 0;
  PyObject *__pyx_v_single_line_tuples = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_fp,&__pyx_n_s_unicode_escape,&__pyx_n_s_float_precision,&__pyx_n_s_indent,&__pyx_n_s_single_line_tuples,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject *)Py_None);

    /* "openstep_plist/writer.pyx":586
 * 
 * def dump(obj, fp, bint unicode_escape=True, int float_precision=6, indent=None,
 *          single_line_tuples=False):             # <<<<<<<<<<<<<<
 *     w = Writer(
 *         unicode_escape=unicode_escape,
 */
    values[5] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dump", 0, 2, 6, 1); __PYX_ERR(0, 585, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unicode_escape);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_float_precision);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indent);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_single_line_tuples);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dump") < 0)) __PYX_ERR(0, 585, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_fp = values[1];
    if (values[2]) {
      __pyx_v_unicode_escape = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_unicode_escape == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    } else {

      /* "openstep_plist/writer.pyx":585
 * 
 * 
 * def dump(obj, fp, bint unicode_escape=True, int float_precision=6, indent=None,             # <<<<<<<<<<<<<<
 *          single_line_tuples=False):
 *     w = Writer(
 */
      __pyx_v_unicode_escape = ((int)1);
    }
    if (values[3]) {
      __pyx_v_float_precision = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_float_precision == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    } else {
      __pyx_v_float_precision = ((int)6);
    }
    __pyx_v_indent = values[4];
    __pyx_v_single_line_tuples = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dump", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 585, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openstep_plist.writer.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14openstep_plist_6writer_2dump(__pyx_self, __pyx_v_obj, __pyx_v_fp, __pyx_v_unicode_escape, __pyx_v_float_precision, __pyx_v_indent, __pyx_v_single_line_tuples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14openstep_plist_6writer_2dump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_fp, int __pyx_v_unicode_escape, int __pyx_v_float_precision, PyObject *__pyx_v_indent, PyObject *__pyx_v_single_line_tuples) {
  struct __pyx_obj_14openstep_plist_6writer_Writer *__pyx_v_w = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);

  /* "openstep_plist/writer.pyx":588
 *          single_line_tuples=False):
 *     w = Writer(
 *         unicode_escape=unicode_escape,             # <<<<<<<<<<<<<<
 *         float_precision=float_precision,
 *         indent=indent,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_unicode_escape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_unicode_escape, __pyx_t_2) < 0) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":589
 *     w = Writer(
 *         unicode_escape=unicode_escape,
 *         float_precision=float_precision,             # <<<<<<<<<<<<<<
 *         indent=indent,
 *         single_line_tuples=single_line_tuples,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_float_precision); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_float_precision, __pyx_t_2) < 0) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":590
 *         unicode_escape=unicode_escape,
 *         float_precision=float_precision,
 *         indent=indent,             # <<<<<<<<<<<<<<
 *         single_line_tuples=single_line_tuples,
 *     )
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_indent, __pyx_v_indent) < 0) __PYX_ERR(0, 588, __pyx_L1_error)

  /* "openstep_plist/writer.pyx":591
 *         float_precision=float_precision,
 *         indent=indent,
 *         single_line_tuples=single_line_tuples,             # <<<<<<<<<<<<<<
 *     )
 *     w.write(obj)
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_single_line_tuples, __pyx_v_single_line_tuples) < 0) __PYX_ERR(0, 588, __pyx_L1_error)

  /* "openstep_plist/writer.pyx":587
 * def dump(obj, fp, bint unicode_escape=True, int float_precision=6, indent=None,
 *          single_line_tuples=False):
 *     w = Writer(             # <<<<<<<<<<<<<<
 *         unicode_escape=unicode_escape,
 *         float_precision=float_precision,
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14openstep_plist_6writer_Writer), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_w = ((struct __pyx_obj_14openstep_plist_6writer_Writer *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":593
 *         single_line_tuples=single_line_tuples,
 *     )
 *     w.write(obj)             # <<<<<<<<<<<<<<
 *     w.dump(fp)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_w), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_obj);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":594
 *     )
 *     w.write(obj)
 *     w.dump(fp)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_w), __pyx_n_s_dump); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_fp) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_fp);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":585
 * 
 * 
 * def dump(obj, fp, bint unicode_escape=True, int float_precision=6, indent=None,             # <<<<<<<<<<<<<<
 *          single_line_tuples=False):
 *     w = Writer(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openstep_plist.writer.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_w);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_14openstep_plist_6writer_Writer __pyx_vtable_14openstep_plist_6writer_Writer;

static PyObject *__pyx_tp_new_14openstep_plist_6writer_Writer(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_14openstep_plist_6writer_Writer *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14openstep_plist_6writer_Writer *)o);
  p->__pyx_vtab = __pyx_vtabptr_14openstep_plist_6writer_Writer;
  p->indent = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_14openstep_plist_6writer_6Writer_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14openstep_plist_6writer_Writer(PyObject *o) {
  struct __pyx_obj_14openstep_plist_6writer_Writer *p = (struct __pyx_obj_14openstep_plist_6writer_Writer *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_14openstep_plist_6writer_6Writer_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->indent);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14openstep_plist_6writer_Writer[] = {
  {"getvalue", (PyCFunction)__pyx_pw_14openstep_plist_6writer_6Writer_5getvalue, METH_NOARGS, __pyx_doc_14openstep_plist_6writer_6Writer_4getvalue},
  {"dump", (PyCFunction)__pyx_pw_14openstep_plist_6writer_6Writer_7dump, METH_O, __pyx_doc_14openstep_plist_6writer_6Writer_6dump},
  {"write", (PyCFunction)__pyx_pw_14openstep_plist_6writer_6Writer_9write, METH_O, __pyx_doc_14openstep_plist_6writer_6Writer_8write},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14openstep_plist_6writer_6Writer_11__reduce_cython__, METH_NOARGS, __pyx_doc_14openstep_plist_6writer_6Writer_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14openstep_plist_6writer_6Writer_13__setstate_cython__, METH_O, __pyx_doc_14openstep_plist_6writer_6Writer_12__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14openstep_plist_6writer_Writer = {
  PyVarObject_HEAD_INIT(0, 0)
  "openstep_plist.writer.Writer", /*tp_name*/
  sizeof(struct __pyx_obj_14openstep_plist_6writer_Writer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14openstep_plist_6writer_Writer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14openstep_plist_6writer_Writer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14openstep_plist_6writer_Writer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_writer(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_writer},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "writer",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_Object_of_type, __pyx_k_Object_of_type, sizeof(__pyx_k_Object_of_type), 0, 1, 0, 0},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_Writer, __pyx_k_Writer, sizeof(__pyx_k_Writer), 0, 0, 1, 1},
  {&__pyx_kp_b__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 0, 0},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_dump, __pyx_k_dump, sizeof(__pyx_k_dump), 0, 0, 1, 1},
  {&__pyx_n_s_dumps, __pyx_k_dumps, sizeof(__pyx_k_dumps), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_u_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 1, 0, 1},
  {&__pyx_n_s_float_precision, __pyx_k_float_precision, sizeof(__pyx_k_float_precision), 0, 0, 1, 1},
  {&__pyx_n_s_fp, __pyx_k_fp, sizeof(__pyx_k_fp), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_getvalue, __pyx_k_getvalue, sizeof(__pyx_k_getvalue), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_indent, __pyx_k_indent, sizeof(__pyx_k_indent), 0, 0, 1, 1},
  {&__pyx_kp_u_is_not_PLIST_serializable, __pyx_k_is_not_PLIST_serializable, sizeof(__pyx_k_is_not_PLIST_serializable), 0, 1, 0, 0},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_nil, __pyx_k_nil, sizeof(__pyx_k_nil), 0, 1, 0, 0},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_openstep_plist_writer, __pyx_k_openstep_plist_writer, sizeof(__pyx_k_openstep_plist_writer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_single_line_tuples, __pyx_k_single_line_tuples, sizeof(__pyx_k_single_line_tuples), 0, 0, 1, 1},
  {&__pyx_kp_s_src_openstep_plist_writer_pyx, __pyx_k_src_openstep_plist_writer_pyx, sizeof(__pyx_k_src_openstep_plist_writer_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_unicode_escape, __pyx_k_unicode_escape, sizeof(__pyx_k_unicode_escape), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 151, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 487, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "openstep_plist/writer.pyx":573
 * 
 * 
 * def dumps(obj, bint unicode_escape=True, int float_precision=6, indent=None,             # <<<<<<<<<<<<<<
 *           single_line_tuples=False):
 *     w = Writer(
 */
  __pyx_tuple__7 = PyTuple_Pack(6, __pyx_n_s_obj, __pyx_n_s_unicode_escape, __pyx_n_s_float_precision, __pyx_n_s_indent, __pyx_n_s_single_line_tuples, __pyx_n_s_w); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_openstep_plist_writer_pyx, __pyx_n_s_dumps, 573, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 573, __pyx_L1_error)

  /* "openstep_plist/writer.pyx":585
 * 
 * 
 * def dump(obj, fp, bint unicode_escape=True, int float_precision=6, indent=None,             # <<<<<<<<<<<<<<
 *          single_line_tuples=False):
 *     w = Writer(
 */
  __pyx_tuple__9 = PyTuple_Pack(7, __pyx_n_s_obj, __pyx_n_s_fp, __pyx_n_s_unicode_escape, __pyx_n_s_float_precision, __pyx_n_s_indent, __pyx_n_s_single_line_tuples, __pyx_n_s_w); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_openstep_plist_writer_pyx, __pyx_n_s_dump, 585, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("string_needs_quotes", (void (*)(void))__pyx_f_14openstep_plist_6writer_string_needs_quotes, "int (Py_UNICODE const *, Py_ssize_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_14openstep_plist_6writer_Writer = &__pyx_vtable_14openstep_plist_6writer_Writer;
  __pyx_vtable_14openstep_plist_6writer_Writer.extend_buffer = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, Py_UNICODE const *, Py_ssize_t))__pyx_f_14openstep_plist_6writer_6Writer_extend_buffer;
  __pyx_vtable_14openstep_plist_6writer_Writer._getvalue = (PyObject *(*)(struct __pyx_obj_14openstep_plist_6writer_Writer *))__pyx_f_14openstep_plist_6writer_6Writer__getvalue;
  __pyx_vtable_14openstep_plist_6writer_Writer.write_object = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *))__pyx_f_14openstep_plist_6writer_6Writer_write_object;
  __pyx_vtable_14openstep_plist_6writer_Writer.write_quoted_string = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, Py_UNICODE const *, Py_ssize_t))__pyx_f_14openstep_plist_6writer_6Writer_write_quoted_string;
  __pyx_vtable_14openstep_plist_6writer_Writer.write_unquoted_string = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *))__pyx_f_14openstep_plist_6writer_6Writer_write_unquoted_string;
  __pyx_vtable_14openstep_plist_6writer_Writer.write_string = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *))__pyx_f_14openstep_plist_6writer_6Writer_write_string;
  __pyx_vtable_14openstep_plist_6writer_Writer.write_short_float_repr = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *))__pyx_f_14openstep_plist_6writer_6Writer_write_short_float_repr;
  __pyx_vtable_14openstep_plist_6writer_Writer.write_data = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *))__pyx_f_14openstep_plist_6writer_6Writer_write_data;
  __pyx_vtable_14openstep_plist_6writer_Writer.write_array_from_list = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *))__pyx_f_14openstep_plist_6writer_6Writer_write_array_from_list;
  __pyx_vtable_14openstep_plist_6writer_Writer.write_array_from_tuple = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *))__pyx_f_14openstep_plist_6writer_6Writer_write_array_from_tuple;
  __pyx_vtable_14openstep_plist_6writer_Writer.write_dict = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *))__pyx_f_14openstep_plist_6writer_6Writer_write_dict;
  __pyx_vtable_14openstep_plist_6writer_Writer.write_ordered_dict = (Py_ssize_t (*)(struct __pyx_obj_14openstep_plist_6writer_Writer *, PyObject *))__pyx_f_14openstep_plist_6writer_6Writer_write_ordered_dict;
  if (PyType_Ready(&__pyx_type_14openstep_plist_6writer_Writer) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14openstep_plist_6writer_Writer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14openstep_plist_6writer_Writer.tp_dictoffset && __pyx_type_14openstep_plist_6writer_Writer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14openstep_plist_6writer_Writer.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_14openstep_plist_6writer_Writer.tp_dict, __pyx_vtabptr_14openstep_plist_6writer_Writer) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Writer, (PyObject *)&__pyx_type_14openstep_plist_6writer_Writer) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14openstep_plist_6writer_Writer) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_ptype_14openstep_plist_6writer_Writer = &__pyx_type_14openstep_plist_6writer_Writer;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("openstep_plist.util"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "PY_NARROW_UNICODE", (void **)&__pyx_vp_14openstep_plist_4util_PY_NARROW_UNICODE, "int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("openstep_plist.util"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "tounicode", (void (**)(void))&__pyx_f_14openstep_plist_4util_tounicode, "PyObject *(PyObject *, struct __pyx_opt_args_14openstep_plist_4util_tounicode *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "high_surrogate_from_unicode_scalar", (void (**)(void))&__pyx_f_14openstep_plist_4util_high_surrogate_from_unicode_scalar, "uint16_t (uint32_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "low_surrogate_from_unicode_scalar", (void (**)(void))&__pyx_f_14openstep_plist_4util_low_surrogate_from_unicode_scalar, "uint16_t (uint32_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initwriter(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initwriter(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_writer(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_writer(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_writer(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static Py_UNICODE __pyx_t_3[16];
  static Py_UNICODE __pyx_t_4[2];
  static Py_UNICODE __pyx_t_5[3];
  static Py_UNICODE __pyx_t_6[2];
  static int __pyx_t_7[128];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'writer' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_writer(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("writer", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_openstep_plist__writer) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "openstep_plist.writer")) {
      if (unlikely(PyDict_SetItemString(modules, "openstep_plist.writer", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_variable_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "openstep_plist/writer.pyx":4
 * #distutils: define_macros=CYTHON_TRACE_NOGIL=1
 * 
 * from collections import OrderedDict             # <<<<<<<<<<<<<<
 * from cpython.unicode cimport (
 *     PyUnicode_FromUnicode,
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderedDict);
  __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderedDict);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":30
 * 
 * 
 * cdef Py_UNICODE *HEX_MAP = [             # <<<<<<<<<<<<<<
 *     c'0', c'1', c'2', c'3', c'4', c'5', c'6', c'7',
 *     c'8', c'9', c'A', c'B', c'C', c'D', c'E', c'F',
 */
  __pyx_t_3[0] = '0';
  __pyx_t_3[1] = '1';
  __pyx_t_3[2] = '2';
  __pyx_t_3[3] = '3';
  __pyx_t_3[4] = '4';
  __pyx_t_3[5] = '5';
  __pyx_t_3[6] = '6';
  __pyx_t_3[7] = '7';
  __pyx_t_3[8] = '8';
  __pyx_t_3[9] = '9';
  __pyx_t_3[10] = 'A';
  __pyx_t_3[11] = 'B';
  __pyx_t_3[12] = 'C';
  __pyx_t_3[13] = 'D';
  __pyx_t_3[14] = 'E';
  __pyx_t_3[15] = 'F';
  __pyx_v_14openstep_plist_6writer_HEX_MAP = __pyx_t_3;

  /* "openstep_plist/writer.pyx":35
 * ]
 * 
 * cdef Py_UNICODE *ARRAY_SEP_NO_INDENT = [c',', c' ']             # <<<<<<<<<<<<<<
 * cdef Py_UNICODE *DICT_KEY_VALUE_SEP = [c' ', c'=', c' ']
 * cdef Py_UNICODE *DICT_ITEM_SEP_NO_INDENT = [c';', c' ']
 */
  __pyx_t_4[0] = ',';
  __pyx_t_4[1] = ' ';
  __pyx_v_14openstep_plist_6writer_ARRAY_SEP_NO_INDENT = __pyx_t_4;

  /* "openstep_plist/writer.pyx":36
 * 
 * cdef Py_UNICODE *ARRAY_SEP_NO_INDENT = [c',', c' ']
 * cdef Py_UNICODE *DICT_KEY_VALUE_SEP = [c' ', c'=', c' ']             # <<<<<<<<<<<<<<
 * cdef Py_UNICODE *DICT_ITEM_SEP_NO_INDENT = [c';', c' ']
 * 
 */
  __pyx_t_5[0] = ' ';
  __pyx_t_5[1] = '=';
  __pyx_t_5[2] = ' ';
  __pyx_v_14openstep_plist_6writer_DICT_KEY_VALUE_SEP = __pyx_t_5;

  /* "openstep_plist/writer.pyx":37
 * cdef Py_UNICODE *ARRAY_SEP_NO_INDENT = [c',', c' ']
 * cdef Py_UNICODE *DICT_KEY_VALUE_SEP = [c' ', c'=', c' ']
 * cdef Py_UNICODE *DICT_ITEM_SEP_NO_INDENT = [c';', c' ']             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6[0] = ';';
  __pyx_t_6[1] = ' ';
  __pyx_v_14openstep_plist_6writer_DICT_ITEM_SEP_NO_INDENT = __pyx_t_6;

  /* "openstep_plist/writer.pyx":41
 * 
 * # this table includes A-Z, a-z, 0-9, '.', '_' and '$'
 * cdef bint *VALID_UNQUOTED_CHARS = [             # <<<<<<<<<<<<<<
 *     False, False, False, False, False, False, False, False,
 *     False, False, False, False, False, False, False, False,
 */
  __pyx_t_7[0] = 0;
  __pyx_t_7[1] = 0;
  __pyx_t_7[2] = 0;
  __pyx_t_7[3] = 0;
  __pyx_t_7[4] = 0;
  __pyx_t_7[5] = 0;
  __pyx_t_7[6] = 0;
  __pyx_t_7[7] = 0;
  __pyx_t_7[8] = 0;
  __pyx_t_7[9] = 0;
  __pyx_t_7[10] = 0;
  __pyx_t_7[11] = 0;
  __pyx_t_7[12] = 0;
  __pyx_t_7[13] = 0;
  __pyx_t_7[14] = 0;
  __pyx_t_7[15] = 0;
  __pyx_t_7[16] = 0;
  __pyx_t_7[17] = 0;
  __pyx_t_7[18] = 0;
  __pyx_t_7[19] = 0;
  __pyx_t_7[20] = 0;
  __pyx_t_7[21] = 0;
  __pyx_t_7[22] = 0;
  __pyx_t_7[23] = 0;
  __pyx_t_7[24] = 0;
  __pyx_t_7[25] = 0;
  __pyx_t_7[26] = 0;
  __pyx_t_7[27] = 0;
  __pyx_t_7[28] = 0;
  __pyx_t_7[29] = 0;
  __pyx_t_7[30] = 0;
  __pyx_t_7[31] = 0;
  __pyx_t_7[32] = 0;
  __pyx_t_7[33] = 0;
  __pyx_t_7[34] = 0;
  __pyx_t_7[35] = 0;
  __pyx_t_7[36] = 1;
  __pyx_t_7[37] = 0;
  __pyx_t_7[38] = 0;
  __pyx_t_7[39] = 0;
  __pyx_t_7[40] = 0;
  __pyx_t_7[41] = 0;
  __pyx_t_7[42] = 0;
  __pyx_t_7[43] = 0;
  __pyx_t_7[44] = 0;
  __pyx_t_7[45] = 0;
  __pyx_t_7[46] = 1;
  __pyx_t_7[47] = 0;
  __pyx_t_7[48] = 1;
  __pyx_t_7[49] = 1;
  __pyx_t_7[50] = 1;
  __pyx_t_7[51] = 1;
  __pyx_t_7[52] = 1;
  __pyx_t_7[53] = 1;
  __pyx_t_7[54] = 1;
  __pyx_t_7[55] = 1;
  __pyx_t_7[56] = 1;
  __pyx_t_7[57] = 1;
  __pyx_t_7[58] = 0;
  __pyx_t_7[59] = 0;
  __pyx_t_7[60] = 0;
  __pyx_t_7[61] = 0;
  __pyx_t_7[62] = 0;
  __pyx_t_7[63] = 0;
  __pyx_t_7[64] = 0;
  __pyx_t_7[65] = 1;
  __pyx_t_7[66] = 1;
  __pyx_t_7[67] = 1;
  __pyx_t_7[68] = 1;
  __pyx_t_7[69] = 1;
  __pyx_t_7[70] = 1;
  __pyx_t_7[71] = 1;
  __pyx_t_7[72] = 1;
  __pyx_t_7[73] = 1;
  __pyx_t_7[74] = 1;
  __pyx_t_7[75] = 1;
  __pyx_t_7[76] = 1;
  __pyx_t_7[77] = 1;
  __pyx_t_7[78] = 1;
  __pyx_t_7[79] = 1;
  __pyx_t_7[80] = 1;
  __pyx_t_7[81] = 1;
  __pyx_t_7[82] = 1;
  __pyx_t_7[83] = 1;
  __pyx_t_7[84] = 1;
  __pyx_t_7[85] = 1;
  __pyx_t_7[86] = 1;
  __pyx_t_7[87] = 1;
  __pyx_t_7[88] = 1;
  __pyx_t_7[89] = 1;
  __pyx_t_7[90] = 1;
  __pyx_t_7[91] = 0;
  __pyx_t_7[92] = 0;
  __pyx_t_7[93] = 0;
  __pyx_t_7[94] = 0;
  __pyx_t_7[95] = 1;
  __pyx_t_7[96] = 0;
  __pyx_t_7[97] = 1;
  __pyx_t_7[98] = 1;
  __pyx_t_7[99] = 1;
  __pyx_t_7[100] = 1;
  __pyx_t_7[101] = 1;
  __pyx_t_7[102] = 1;
  __pyx_t_7[103] = 1;
  __pyx_t_7[104] = 1;
  __pyx_t_7[105] = 1;
  __pyx_t_7[106] = 1;
  __pyx_t_7[107] = 1;
  __pyx_t_7[108] = 1;
  __pyx_t_7[109] = 1;
  __pyx_t_7[110] = 1;
  __pyx_t_7[111] = 1;
  __pyx_t_7[112] = 1;
  __pyx_t_7[113] = 1;
  __pyx_t_7[114] = 1;
  __pyx_t_7[115] = 1;
  __pyx_t_7[116] = 1;
  __pyx_t_7[117] = 1;
  __pyx_t_7[118] = 1;
  __pyx_t_7[119] = 1;
  __pyx_t_7[120] = 1;
  __pyx_t_7[121] = 1;
  __pyx_t_7[122] = 1;
  __pyx_t_7[123] = 0;
  __pyx_t_7[124] = 0;
  __pyx_t_7[125] = 0;
  __pyx_t_7[126] = 0;
  __pyx_t_7[127] = 0;
  __pyx_v_14openstep_plist_6writer_VALID_UNQUOTED_CHARS = __pyx_t_7;

  /* "openstep_plist/writer.pyx":573
 * 
 * 
 * def dumps(obj, bint unicode_escape=True, int float_precision=6, indent=None,             # <<<<<<<<<<<<<<
 *           single_line_tuples=False):
 *     w = Writer(
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_14openstep_plist_6writer_1dumps, NULL, __pyx_n_s_openstep_plist_writer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dumps, __pyx_t_2) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":585
 * 
 * 
 * def dump(obj, fp, bint unicode_escape=True, int float_precision=6, indent=None,             # <<<<<<<<<<<<<<
 *          single_line_tuples=False):
 *     w = Writer(
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_14openstep_plist_6writer_3dump, NULL, __pyx_n_s_openstep_plist_writer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dump, __pyx_t_2) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "openstep_plist/writer.pyx":1
 * #cython: language_level=3             # <<<<<<<<<<<<<<
 * #distutils: define_macros=CYTHON_TRACE_NOGIL=1
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init openstep_plist.writer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init openstep_plist.writer");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* None */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_items */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* VoidPtrImport */
#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
